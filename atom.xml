<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZombieBrand</title>
  
  <subtitle>前端</subtitle>
  <link href="/ZombieBrand.github.io/atom.xml" rel="self"/>
  
  <link href="https://zombrbrand.github.io/ZombieBrand.github.io/"/>
  <updated>2019-06-08T13:58:44.695Z</updated>
  <id>https://zombrbrand.github.io/ZombieBrand.github.io/</id>
  
  <author>
    <name>车勇志</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css布局居中方法</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/06/08/css%E5%B8%83%E5%B1%80%E5%B1%85%E4%B8%AD%E6%96%B9%E6%B3%95/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/06/08/css布局居中方法/</id>
    <published>2019-06-08T13:51:26.000Z</published>
    <updated>2019-06-08T13:58:44.695Z</updated>
    
    <content type="html"><![CDATA[<p>#两栏布局</p><p>##左侧固定宽度右边自适应</p><p>负margin方法：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">    <span class="attribute">margin-right</span>:-<span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>overflow方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">    <span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>position方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">210px</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>flex方法:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line"><span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>:blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>#三栏布局</p><p>margin方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="center"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>:pink;</span><br><span class="line">  <span class="attribute">overflow</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:blue;</span><br><span class="line">  <span class="attribute">float</span>:right;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>overflow方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="center"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>:pink;</span><br><span class="line">  <span class="attribute">overflow</span>:auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:blue;</span><br><span class="line">  <span class="attribute">float</span>:right;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>position方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="center"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="built_in">calc</span>(100% - 440px);</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>:pink;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-50%);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:blue;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>flex方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">  &lt;div class="left"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="center"&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class="right"&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">*&#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>:border-box;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line"> <span class="attribute">display</span>:flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">background</span>:pink; </span><br><span class="line">  <span class="attribute">flex</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>:blue;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>#块级元素居中</p><p>margin方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>position方法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:grey;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translateX</span>(-50%)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>display:flex</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:grey;</span><br><span class="line">  <span class="attribute">display</span>:flex;   </span><br><span class="line">  <span class="attribute">justify-content</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>text-align:center</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">background</span>:grey;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>:red;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#多行文字水平垂直居中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">section</span>&gt;</span><br><span class="line">  &lt;div class="container"&gt;</span><br><span class="line">     &lt;h1 class="title"&gt;这是标题&lt;/h1&gt;</span><br><span class="line">     &lt;p class="content"&gt;这是一大段文字内容这是一大段文字内容这是一大段文字内容这是一大段文字内容这是一大段文字内容这是一大段文字内容&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/section&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line"><span class="selector-tag">section</span>&#123;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>:<span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">background</span>:grey;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">display</span>:table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>#image水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div class="container"&gt;</span><br><span class="line">   &lt;img src="" alt="图片"&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>:inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器固定水平垂直居中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:fixed;</span><br><span class="line">  <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>:<span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#两栏布局&lt;/p&gt;
&lt;p&gt;##左侧固定宽度右边自适应&lt;/p&gt;
&lt;p&gt;负margin方法：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;
      
    
    </summary>
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue协同开发</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/vue%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/vue协同开发/</id>
    <published>2019-04-16T07:29:49.000Z</published>
    <updated>2019-04-16T07:30:22.625Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack相关"><a href="#webpack相关" class="headerlink" title="webpack相关"></a>webpack相关</h2><p>局域网下指定ip端口查看项目方法:</p><p>在<strong>package.json</strong>中dev插入<code>—host ip —port ****</code>,输入对应的ip端口就可以在局域网下查看项目</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">script:&#123;</span><br><span class="line">  "dev": "webpack-dev-server --host 172.181.1.1 --port 8888 --inline --progress --config build/webpack.dev.conf.js",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack相关&quot;&gt;&lt;a href=&quot;#webpack相关&quot; class=&quot;headerlink&quot; title=&quot;webpack相关&quot;&gt;&lt;/a&gt;webpack相关&lt;/h2&gt;&lt;p&gt;局域网下指定ip端口查看项目方法:&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;package.
      
    
    </summary>
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/Vue/"/>
    
      <category term="协同开发" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/Vue/%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/Vue/"/>
    
      <category term="协同开发" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E5%8D%8F%E5%90%8C%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>cookie操作方法</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/cookie%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/cookie操作方法/</id>
    <published>2019-04-16T07:26:24.000Z</published>
    <updated>2019-04-16T07:27:12.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一个方法是obj里对应所有key-value"><a href="#第一个方法是obj里对应所有key-value" class="headerlink" title="第一个方法是obj里对应所有key value"></a>第一个方法是obj里对应所有key value</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie = <span class="built_in">document</span>.cookie.split(<span class="string">';'</span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">cookie.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line"><span class="keyword">let</span> ev = item.split(<span class="string">'='</span>)</span><br><span class="line">obj[ev[<span class="number">0</span>]] = ev[<span class="number">1</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><h3 id="这个方法是根据key的找到对应的value"><a href="#这个方法是根据key的找到对应的value" class="headerlink" title="这个方法是根据key的找到对应的value"></a>这个方法是根据key的找到对应的value</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookieValue</span>(<span class="params">key, cookieStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(?:^|\s)<span class="subst">$&#123;key&#125;</span>=([^;]*)`</span>).exec(cookieStr)</span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; result[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">getCookieValue(<span class="string">'name'</span>,<span class="built_in">document</span>.cookie)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一个方法是obj里对应所有key-value&quot;&gt;&lt;a href=&quot;#第一个方法是obj里对应所有key-value&quot; class=&quot;headerlink&quot; title=&quot;第一个方法是obj里对应所有key value&quot;&gt;&lt;/a&gt;第一个方法是obj里对应所有key
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/JavaScript/"/>
    
      <category term="缓存" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/JavaScript/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="JavaScript" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/JavaScript/"/>
    
      <category term="缓存" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>vueBus插件</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/vueBus%E6%8F%92%E4%BB%B6/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/vueBus插件/</id>
    <published>2019-04-16T07:25:20.000Z</published>
    <updated>2019-04-16T07:25:49.412Z</updated>
    
    <content type="html"><![CDATA[<h3 id="普通bus中央事件总线需要每个地方都去import引入-那么全局注册方法就会变得很简单-代码如下"><a href="#普通bus中央事件总线需要每个地方都去import引入-那么全局注册方法就会变得很简单-代码如下" class="headerlink" title="普通bus中央事件总线需要每个地方都去import引入,那么全局注册方法就会变得很简单.代码如下:"></a>普通bus中央事件总线需要每个地方都去import引入,那么全局注册方法就会变得很简单.代码如下:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line"><span class="keyword">const</span> Bus = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">methods:&#123;</span><br><span class="line">emit(event,...args)&#123;</span><br><span class="line"><span class="keyword">this</span>.$emit(event,...args)</span><br><span class="line">&#125;,</span><br><span class="line">on(event,callback)&#123;</span><br><span class="line"><span class="keyword">this</span>.$on(event,callback)</span><br><span class="line">&#125;,</span><br><span class="line">off(event,callback)&#123;</span><br><span class="line"><span class="keyword">this</span>.$off(event,callback)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Vue.prototype.$bus = Bus</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入main.js中 Vue.use(Bus)注册</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 具体调用位置可以用this.$bus.emit(event,1),this.$bus.on(...),this.$bus.off(...)</span></span><br></pre></td></tr></table></figure><p>这样在其他组件中可以通过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">      num:<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="keyword">this</span>.$bus.on(event,(val)=&gt;&#123;</span><br><span class="line">      <span class="keyword">this</span>.num =val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;普通bus中央事件总线需要每个地方都去import引入-那么全局注册方法就会变得很简单-代码如下&quot;&gt;&lt;a href=&quot;#普通bus中央事件总线需要每个地方都去import引入-那么全局注册方法就会变得很简单-代码如下&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack简单基础配置</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/webpack%E7%AE%80%E5%8D%95%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/16/webpack简单基础配置/</id>
    <published>2019-04-16T06:59:29.000Z</published>
    <updated>2019-04-16T07:23:07.664Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)  <span class="comment">//路径相关</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">entry:&#123;</span><br><span class="line">main:<span class="string">'./main'</span> <span class="comment">//配置主要的js文件</span></span><br><span class="line">&#125;,</span><br><span class="line">output:&#123;</span><br><span class="line">path:path.join(__dirname,<span class="string">'./dist'</span>) <span class="comment">//配置主要的输出文件路径</span></span><br><span class="line">publicPath:<span class="string">'./dist'</span> <span class="comment">//配置主要的打包输出路径 </span></span><br><span class="line">filename:<span class="string">'main.js'</span> <span class="comment">//配置输出文件的名字</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span> exports = config <span class="comment">//输出配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>) <span class="comment">//路径相关</span></span><br><span class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>) <span class="comment">//引入提取CSS文件插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        main: <span class="string">'./main'</span> <span class="comment">//配置主要的js文件</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">'./dist'</span>) <span class="comment">//配置主要的输出文件路径</span></span><br><span class="line">        publicPath: <span class="string">'./dist'</span> <span class="comment">//配置主要的打包输出路径 </span></span><br><span class="line">        filename: <span class="string">'main.js'</span> <span class="comment">//配置输出文件的名字</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123; <span class="comment">//加载模块loader      </span></span><br><span class="line">        rules: [&#123;</span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,<span class="comment">//根绝.vue文件模板处理</span></span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    loaders: &#123;</span><br><span class="line">                        css: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                            use: <span class="string">'css-loader'</span>,    <span class="comment">//use: 'css-loader'?minimize是压缩代码</span></span><br><span class="line">                            fallback: <span class="string">'style-loader'</span></span><br><span class="line">                        &#125;),</span><br><span class="line">                        sass: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                            use: <span class="string">'sass-loader'</span>,</span><br><span class="line">                            fallback: <span class="string">'style-loader'</span></span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            test:<span class="regexp">/\.js$/</span>,</span><br><span class="line">            loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">            exclude:<span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: ExtractTextPlugin.extract(&#123;</span><br><span class="line">                    use: <span class="string">'css-loader'</span>,</span><br><span class="line">                    fallback: <span class="string">'style-loader'</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            test:<span class="regexp">/\.(gif|jpg|png|woff|svg|eot|ttf)\??.*$/</span>,</span><br><span class="line">            loader:<span class="string">'url-loader?limit=1024'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(<span class="string">'main.css'</span>) <span class="comment">//输出文件名字</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span> exports = config <span class="comment">//输出配置文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
      <category term="webpack" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>head部分的清单</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/head%E9%83%A8%E5%88%86%E7%9A%84%E6%B8%85%E5%8D%95/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/head部分的清单/</id>
    <published>2019-04-09T04:39:25.000Z</published>
    <updated>2019-04-09T04:40:37.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h1><p><a href="https://creativecommons.org/publicdomain/zero/1.0/" target="_blank" rel="noopener"><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/html/assets/license-CC0-green.svg" alt="CC0"></a><br><a href="https://github.com/joshbuchea/HEAD/graphs/contributors" target="_blank" rel="noopener"><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/html/assets/head.svg" alt="Contributors"></a></p><p>一份关于任何*可以*写入到你的文档中 <code>&lt;head&gt;</code> 部分的清单。</p><p><a href="https://github.com/ZombrBrand/HEAD" target="_blank" rel="noopener">gihub地址</a></p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#最小推荐">最小推荐</a></li><li><a href="#网页元素">网页元素</a></li><li><a href="#meta-标签">Meta 标签</a></li><li><a href="#链接">链接</a></li><li><a href="#网站图标">网站图标</a></li><li><a href="#社交">社交</a><ul><li><a href="#facebook-open-graph">Facebook Open Graph</a></li><li><a href="#twitter-card">Twitter Card</a></li><li><a href="#twitter-privacy">Twitter Privacy</a></li><li><a href="#google--schemaorg">Google+ / Schema.org</a></li><li><a href="#pinterest">Pinterest</a></li><li><a href="#facebook-instant-articles">Facebook Instant Articles</a></li><li><a href="#oembed">OEmbed</a></li></ul></li><li><a href="#浏览器--平台">浏览器 / 平台</a><ul><li><a href="#apple-ios">Apple iOS</a></li><li><a href="#google-android">Google Android</a></li><li><a href="#google-chrome">Google Chrome</a></li><li><a href="#microsoft-internet-explorer">Microsoft Internet Explorer</a></li></ul></li><li><a href="#国内的浏览器">国内的浏览器</a><ul><li><a href="#360-浏览器">360 浏览器</a></li><li><a href="#qq-移动浏览器">QQ 移动浏览器</a></li><li><a href="#uc-移动浏览器">UC 移动浏览器</a></li></ul></li><li><a href="#应用链接">应用链接</a></li><li><a href="#其他资源">其他资源</a></li><li><a href="#相关项目">相关项目</a></li><li><a href="#其他格式">其他格式</a></li><li><a href="#翻译">翻译</a></li><li><a href="#贡献">贡献</a><ul><li><a href="#贡献者">贡献者</a></li></ul></li><li><a href="#作者">作者</a></li><li><a href="#许可">许可</a></li></ul><h2 id="最小推荐"><a href="#最小推荐" class="headerlink" title="最小推荐"></a>最小推荐</h2><p>以下是构成任何 Web 页面（网站/应用程序）的基本要素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  以上 2 个 meta 标签 *必须* 放在 head 之前，以确保正确的文档呈现；</span></span><br><span class="line"><span class="comment">  其他任何 head 元素 *必须* 在这些标签之后。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="网页元素"><a href="#网页元素" class="headerlink" title="网页元素"></a>网页元素</h2><p>有效的 <code>&lt;head&gt;</code> 元素包括 <code>meta</code>、<code>link</code>、<code>title</code>、<code>style</code>、<code>script</code>、<code>noscript</code> 和 <code>base</code>。</p><p>这些元素提供了如何通过如浏览器，搜索引擎，网络爬虫等网络技术来感知和呈现文档的信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置此文档的字符编码，以便 UTF-8 范围中的所有字符（如 emoji）都能正确显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置文档标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 设置文档中所有相对链接的基础链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"https://example.com/page.html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接一个外部 CSS 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用于文档内的 CSS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* ... */</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript &amp; No-JavaScript 标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// function(s) go here</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">noscript</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--无 JS 时显示--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="Meta-标签"><a href="#Meta-标签" class="headerlink" title="Meta 标签"></a>Meta 标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  以上 2 个 meta 标签 *必须* 放在 head 之前，以确保正确的文档呈现；</span></span><br><span class="line"><span class="comment">  其他任何 head 元素 *必须* 在这些标签之后。</span></span><br><span class="line"><span class="comment">  † 如果你的项目需要支持 Internet Explorer 11 之前的版本，请使用 content="ie-edge" 标签。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, shrink-to-fit=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许控制资源从何处加载。在 &lt;head&gt; 中尽可能地靠前放置，因为该标签仅适用于在其之后声明的资源。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"default-src 'self'"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Web 应用的名称（仅当网站被用作为一个应用时才使用）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"application-name"</span> <span class="attr">content</span>=<span class="string">"应用名称"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Chrome、Firefox OS 和 Opera 的主题颜色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#4285f4"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 针对页面的简短描述（限制 150 字符）--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此内容*可能*被用作搜索引擎结果的一部分。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"一个页面描述"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 控制搜索引擎的抓取和索引行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>&gt;</span><span class="comment">&lt;!-- 所有搜索引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"googlebot"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>&gt;</span><span class="comment">&lt;!-- 仅对 Google 有效 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 告诉 Google 不显示网站链接的搜索框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"nositelinkssearchbox"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 告诉 Google 不提供此页面的翻译 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"notranslate"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 验证网址所有权 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google-site-verification"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span><span class="comment">&lt;!-- Google Search Console --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"yandex-verification"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span><span class="comment">&lt;!-- Yandex Webmasters --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msvalidate.01"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span><span class="comment">&lt;!-- Bing Webmaster Center --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"alexaVerifyID"</span> <span class="attr">content</span>=<span class="string">"verification_token"</span>&gt;</span><span class="comment">&lt;!-- Alexa Console --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"p:domain_verify"</span> <span class="attr">content</span>=<span class="string">"code from pinterest"</span>&gt;</span><span class="comment">&lt;!-- Pinterest Console --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"norton-safeweb-site-verification"</span> <span class="attr">content</span>=<span class="string">"norton code"</span>&gt;</span><span class="comment">&lt;!-- Norton Safe Web --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 确定用于构建页面的软件（如 - WordPress、Dreamweaver）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"program"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关于你的网站主题的简短描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">content</span>=<span class="string">"你的网站主题"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 基于网站内容给出一般的年龄分级 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"rating"</span> <span class="attr">content</span>=<span class="string">"General"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 允许控制 referrer 信息如何传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"no-referrer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁用自动检测和格式化可能的电话号码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过设置为 "off" 完全退出 DNS 预取 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"off"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在客户端存储 cookie，web 浏览器的客户端识别 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"set-cookie"</span> <span class="attr">content</span>=<span class="string">"name=value; expires=date; path=url"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定要显示在一个特定框架中的页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Window-Target"</span> <span class="attr">content</span>=<span class="string">"_value"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 地理标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"ICBM"</span> <span class="attr">content</span>=<span class="string">"latitude, longitude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.position"</span> <span class="attr">content</span>=<span class="string">"latitude;longitude"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.region"</span> <span class="attr">content</span>=<span class="string">"country[-state]"</span>&gt;</span><span class="comment">&lt;!-- 国家代码 (ISO 3166-1): 强制性, 州代码 (ISO 3166-2): 可选; 如 content="US" / content="US-NY" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"geo.placename"</span> <span class="attr">content</span>=<span class="string">"city/town"</span>&gt;</span><span class="comment">&lt;!-- 如 content="New York City" --&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://support.google.com/webmasters/answer/79812?hl=zh-Hans" target="_blank" rel="noopener">Google 可以识别的 Meta 标签</a></li><li>📖 <a href="https://wiki.whatwg.org/wiki/MetaExtensions" target="_blank" rel="noopener">WHATWG Wiki: Meta 拓展</a></li><li>📖 <a href="https://en.wikipedia.org/wiki/ICBM_address#Modern_use" target="_blank" rel="noopener">ICBM - 维基百科</a></li><li>📖 <a href="https://en.wikipedia.org/wiki/Geotagging#HTML_pages" target="_blank" rel="noopener">地理标记 - 维基百科</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 指向一个外部 CSS 样式表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://example.com/styles.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有助于防止出现内容重复的问题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/?page=2"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接到当前文档的一个 AMP HTML 版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"amphtml"</span> <span class="attr">href</span>=<span class="string">"https://example.com/path/to/amp-version.html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接到一个指定 Web 应用程序“安装”凭据的 JSON 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"manifest"</span> <span class="attr">href</span>=<span class="string">"manifest.json"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接到关于页面所有者的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"author"</span> <span class="attr">href</span>=<span class="string">"humans.txt"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指向一个适用于链接内容的版权申明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"license"</span> <span class="attr">href</span>=<span class="string">"copyright.html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 给出可能的你的另一种语言的文档位置参考 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://es.example.com/"</span> <span class="attr">hreflang</span>=<span class="string">"es"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提供了关于作者或其他人的信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"https://google.com/profiles/thenextweb"</span> <span class="attr">type</span>=<span class="string">"text/html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"mailto:name@example.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"me"</span> <span class="attr">href</span>=<span class="string">"sms:+15035550125"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接到一个描述历史记录、文档或其他具有历史意义的材料的集合的文档 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"archives"</span> <span class="attr">href</span>=<span class="string">"https://example.com/archives/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 链接到层次结构中的顶级资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"index"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提供了自我引用 - 当文档有多个可能的引用时非常有用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"self"</span> <span class="attr">type</span>=<span class="string">"application/atom+xml"</span> <span class="attr">href</span>=<span class="string">"http://example.com/atom.xml"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 分别是一系列页面中的第一个，最后一个，上一个和下一个页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"first"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"last"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/?page=42"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prev"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/?page=1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"next"</span> <span class="attr">href</span>=<span class="string">"http://example.com/article/?page=3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当使用第三方服务来维护博客时使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"EditURI"</span> <span class="attr">href</span>=<span class="string">"https://example.com/xmlrpc.php?rsd"</span> <span class="attr">type</span>=<span class="string">"application/rsd+xml"</span> <span class="attr">title</span>=<span class="string">"RSD"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当另一个 WordPress 博客链接到你的 WordPress 博客或文章时形成一个自动化的评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"pingback"</span> <span class="attr">href</span>=<span class="string">"https://example.com/xmlrpc.php"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当你在自己的页面上链接到一个 url 时通知它 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"webmention"</span> <span class="attr">href</span>=<span class="string">"https://example.com/webmention"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用通过 Micropub 客户端发布你的域名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"micropub"</span> <span class="attr">href</span>=<span class="string">"https://example.com/micropub"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 打开搜索 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"search"</span> <span class="attr">href</span>=<span class="string">"/open-search.xml"</span> <span class="attr">type</span>=<span class="string">"application/opensearchdescription+xml"</span> <span class="attr">title</span>=<span class="string">"Search Title"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Feeds --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://feeds.feedburner.com/example"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span> <span class="attr">title</span>=<span class="string">"RSS"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"https://example.com/feed.atom"</span> <span class="attr">type</span>=<span class="string">"application/atom+xml"</span> <span class="attr">title</span>=<span class="string">"Atom 0.3"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 预取，预载，预浏览 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 更多信息：https://css-tricks.com/prefetching-preloading-prebrowsing/ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"//example.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preconnect"</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prefetch"</span> <span class="attr">href</span>=<span class="string">"https://www.example.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"https://example.com/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"preload"</span> <span class="attr">href</span>=<span class="string">"image.png"</span> <span class="attr">as</span>=<span class="string">"image"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://www.iana.org/assignments/link-relations/link-relations.xhtml" target="_blank" rel="noopener">链接关系</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 针对 IE 10 及以下版本 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果将 `favicon.ico` 放在根目录下，则无需标签 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我们目前需要提供的最大的网站图标尺寸 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">sizes</span>=<span class="string">"192x192"</span> <span class="attr">href</span>=<span class="string">"/path/to/icon.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Apple 触摸图标 (尺寸同样是 192x192) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/path/to/apple-touch-icon.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Safari 固定选项卡图标 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"mask-icon"</span> <span class="attr">href</span>=<span class="string">"/path/to/icon.svg"</span> <span class="attr">color</span>=<span class="string">"blue"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://bitsofco.de/all-about-favicons-and-touch-icons/" target="_blank" rel="noopener">所有关于网站图标（和触摸图标）的信息</a></li><li>📖 <a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/pinnedTabs/pinnedTabs.html" target="_blank" rel="noopener">创建固定选项卡图标</a></li><li>📖 <a href="https://github.com/audreyr/favicon-cheat-sheet" target="_blank" rel="noopener">网站图标对照表</a></li><li>📖 <a href="https://developers.google.com/web/fundamentals/design-and-ux/browser-customization/" target="_blank" rel="noopener">网址图标 &amp; 浏览器颜色表</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h2><h3 id="Facebook-Open-Graph"><a href="#Facebook-Open-Graph" class="headerlink" title="Facebook Open Graph"></a>Facebook Open Graph</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"fb:app_id"</span> <span class="attr">content</span>=<span class="string">"123456789"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://example.com/page.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"website"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"Content Title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"https://example.com/image.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"Description Here"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:site_name"</span> <span class="attr">content</span>=<span class="string">"Site Name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:locale"</span> <span class="attr">content</span>=<span class="string">"en_US"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"article:author"</span> <span class="attr">content</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://developers.facebook.com/docs/sharing/webmasters#markup" target="_blank" rel="noopener">Facebook 的 Open Graph 的标记</a></li><li>📖 <a href="https://ogp.me/" target="_blank" rel="noopener">Open Graph 协议</a></li><li>🛠 <a href="https://developers.facebook.com/tools/debug/" target="_blank" rel="noopener">页面验证 - Facebook Sharing Debugger</a></li></ul><h3 id="Twitter-Card"><a href="#Twitter-Card" class="headerlink" title="Twitter Card"></a>Twitter Card</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:card"</span> <span class="attr">content</span>=<span class="string">"summary"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:site"</span> <span class="attr">content</span>=<span class="string">"@site_account"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:creator"</span> <span class="attr">content</span>=<span class="string">"@individual_account"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:url"</span> <span class="attr">content</span>=<span class="string">"https://example.com/page.html"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:title"</span> <span class="attr">content</span>=<span class="string">"Content Title"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:description"</span> <span class="attr">content</span>=<span class="string">"Content description less than 200 characters"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:image"</span> <span class="attr">content</span>=<span class="string">"https://example.com/image.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://dev.twitter.com/cards/getting-started" target="_blank" rel="noopener">名片入门指南 - Twitter 开发者</a></li><li>🛠 <a href="https://cards-dev.twitter.com/validator" target="_blank" rel="noopener">页面验证 - Twitter Card Validator</a></li></ul><h3 id="Twitter-Privacy"><a href="#Twitter-Privacy" class="headerlink" title="Twitter Privacy"></a>Twitter Privacy</h3><p>如果你在自己的网站中嵌入了推文，Twitter 可以使用你网站上的信息为 Twitter 用户定制内容和建议。 <a href="https://dev.twitter.com/web/overview/privacy#what-privacy-options-do-website-publishers-have" target="_blank" rel="noopener">更多关于 Twitter 隐私选项的信息</a>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 禁止 Twitter 使用你网站上的信息用于提供个性化的目的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:dnt"</span> <span class="attr">content</span>=<span class="string">"on"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Google-Schema-org"><a href="#Google-Schema-org" class="headerlink" title="Google+ / Schema.org"></a>Google+ / Schema.org</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">""</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Article"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"author"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"publisher"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"内容标题"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"内容描述少于 200 个字符"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"http://example.com/image.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意:</strong> 这个标记需要将属性添加到你的顶级 html 标签中</p><ul><li>🛠 请在 <a href="https://developers.google.com/structured-data/testing-tool/" target="_blank" rel="noopener">结构化数据测试工具</a> 上测试你的页面</li></ul><h3 id="Pinterest"><a href="#Pinterest" class="headerlink" title="Pinterest"></a>Pinterest</h3><p>根据他们的<a href="https://help.pinterest.com/en/articles/prevent-people-saving-things-pinterest-your-site" target="_blank" rel="noopener">帮助中心</a>可知，Pinterest 允许你禁止他人保存你网站里的内容。<code>description</code> 为可选。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"pinterest"</span> <span class="attr">content</span>=<span class="string">"nopin"</span> <span class="attr">description</span>=<span class="string">"Sorry, you can't save from my website!"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Facebook-Instant-Articles"><a href="#Facebook-Instant-Articles" class="headerlink" title="Facebook Instant Articles"></a>Facebook Instant Articles</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"op:markup_version"</span> <span class="attr">content</span>=<span class="string">"v1.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 你的文章的 Web 版网址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"https://example.com/article.html"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用于该文章的样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"fb:article_style"</span> <span class="attr">content</span>=<span class="string">"myarticlestyle"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://developers.facebook.com/docs/instant-articles/guides/articlecreate" target="_blank" rel="noopener">创建文章 - Instant Articles</a></li><li>📖 <a href="https://developers.facebook.com/docs/instant-articles/reference" target="_blank" rel="noopener">代码示例 - Instant Articles</a></li></ul><h3 id="OEmbed"><a href="#OEmbed" class="headerlink" title="OEmbed"></a>OEmbed</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"application/json+oembed"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://example.com/services/oembed?url=http%3A%2F%2Fexample.com%2Ffoo%2F&amp;amp;format=json"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"oEmbed Profile: JSON"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">type</span>=<span class="string">"text/xml+oembed"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">href</span>=<span class="string">"https://example.com/services/oembed?url=http%3A%2F%2Fexample.com%2Ffoo%2F&amp;amp;format=xml"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">title</span>=<span class="string">"oEmbed Profile: XML"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://oembed.com/" target="_blank" rel="noopener">oEmbed 格式</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="浏览器-平台"><a href="#浏览器-平台" class="headerlink" title="浏览器 / 平台"></a>浏览器 / 平台</h2><h3 id="Apple-iOS"><a href="#Apple-iOS" class="headerlink" title="Apple iOS"></a>Apple iOS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 智能应用 Banner --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=APP_ID,affiliate-data=AFFILIATE_ID,app-argument=SOME_TEXT"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁用自动检测和格式化可能的电话号码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加到主屏幕 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 启动图标 (大于等于 180x180px) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-icon"</span> <span class="attr">href</span>=<span class="string">"/path/to/apple-touch-icon.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启动屏幕图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"apple-touch-startup-image"</span> <span class="attr">href</span>=<span class="string">"/path/to/launch.png"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启动图标的标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"应用标题"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 启用独立（全屏）模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 状态栏外观（除非启用独立模式，否则无效） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-status-bar-style"</span> <span class="attr">content</span>=<span class="string">"black"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- iOS 应用深层链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-itunes-app"</span> <span class="attr">content</span>=<span class="string">"app-id=APP-ID, app-argument=http/url-sample.com"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"alternate"</span> <span class="attr">href</span>=<span class="string">"ios-app://APP-ID/http/url-sample.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="noopener">配置 Web 应用程序</a></li></ul><h3 id="Google-Android"><a href="#Google-Android" class="headerlink" title="Google Android"></a>Google Android</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"theme-color"</span> <span class="attr">content</span>=<span class="string">"#E64545"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加到主屏幕 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 更多信息：https://developer.chrome.com/multidevice/android/installtohomescreen --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Google-Chrome"><a href="#Google-Chrome" class="headerlink" title="Google Chrome"></a>Google Chrome</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"chrome-webstore-item"</span> <span class="attr">href</span>=<span class="string">"https://chrome.google.com/webstore/detail/APP_ID"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁用翻译提示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"google"</span> <span class="attr">content</span>=<span class="string">"notranslate"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Microsoft-Internet-Explorer"><a href="#Microsoft-Internet-Explorer" class="headerlink" title="Microsoft Internet Explorer"></a>Microsoft Internet Explorer</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 强制 IE 8/9/10 使用其最新的渲染引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-ua-compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 Skype Toolbar 浏览器扩展功能禁用自动检测和格式化可能的电话号码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"skype_toolbar"</span> <span class="attr">content</span>=<span class="string">"skype_toolbar_parser_compatible"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Windows 磁贴 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"msapplication-config"</span> <span class="attr">content</span>=<span class="string">"/browserconfig.xml"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最低要求的的 <code>browserconfig.xml</code> 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">browserconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">msapplication</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">square70x70logo</span> <span class="attr">src</span>=<span class="string">"small.png"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">square150x150logo</span> <span class="attr">src</span>=<span class="string">"medium.png"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">wide310x150logo</span> <span class="attr">src</span>=<span class="string">"wide.png"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">square310x310logo</span> <span class="attr">src</span>=<span class="string">"large.png"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">msapplication</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">browserconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://msdn.microsoft.com/en-us/library/dn320426.aspx" target="_blank" rel="noopener">浏览器配置模式参考</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="国内的浏览器"><a href="#国内的浏览器" class="headerlink" title="国内的浏览器"></a>国内的浏览器</h2><h3 id="360-浏览器"><a href="#360-浏览器" class="headerlink" title="360 浏览器"></a>360 浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 选择渲染引擎 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit|ie-comp|ie-stand"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="QQ-移动浏览器"><a href="#QQ-移动浏览器" class="headerlink" title="QQ 移动浏览器"></a>QQ 移动浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在指定方向上锁定屏幕（锁定横/竖屏） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"landscape/portrait"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 全屏显示此页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 页面将以“应用模式”显示（全屏等）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-page-mode"</span> <span class="attr">content</span>=<span class="string">"app"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="UC-移动浏览器"><a href="#UC-移动浏览器" class="headerlink" title="UC 移动浏览器"></a>UC 移动浏览器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在指定方向上锁定屏幕（锁定横/竖屏） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"landscape/portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 全屏显示此页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 即使在“文本模式”下，UC 浏览器也会显示图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"imagemode"</span> <span class="attr">content</span>=<span class="string">"force"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面将以“应用模式”显示（全屏、禁止手势等） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"browsermode"</span> <span class="attr">content</span>=<span class="string">"application"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在此页面禁用 UC 浏览器的“夜间模式” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"nightmode"</span> <span class="attr">content</span>=<span class="string">"disable"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 简化页面，减少数据传输 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"layoutmode"</span> <span class="attr">content</span>=<span class="string">"fitscreen"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 禁用的 UC 浏览器的功能，“当此页面中有较多文本时缩放字体” --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"wap-font-scale"</span> <span class="attr">content</span>=<span class="string">"no"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://www.uc.cn/download/UCBrowser_U3_API.doc" target="_blank" rel="noopener">UC 浏览器文档</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="应用链接"><a href="#应用链接" class="headerlink" title="应用链接"></a>应用链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- iOS --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:url"</span> <span class="attr">content</span>=<span class="string">"applinks://docs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:app_store_id"</span> <span class="attr">content</span>=<span class="string">"12345"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:ios:app_name"</span> <span class="attr">content</span>=<span class="string">"App Links"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Android --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:url"</span> <span class="attr">content</span>=<span class="string">"applinks://docs"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:app_name"</span> <span class="attr">content</span>=<span class="string">"App Links"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:android:package"</span> <span class="attr">content</span>=<span class="string">"org.applinks"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 页面回退 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"al:web:url"</span> <span class="attr">content</span>=<span class="string">"https://applinks.org/documentation"</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>📖 <a href="https://applinks.org/documentation/" target="_blank" rel="noopener">应用链接文档</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul><li>📖 <a href="https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/html.md" target="_blank" rel="noopener">HTML5 样板文档：HTML 标签</a></li><li>📖 <a href="https://github.com/h5bp/html5-boilerplate/blob/master/dist/doc/extend.md" target="_blank" rel="noopener">HTML5 样板文档：扩展和定制</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="相关项目"><a href="#相关项目" class="headerlink" title="相关项目"></a>相关项目</h2><ul><li><a href="https://github.com/joshbuchea/atom-html-head-snippets" target="_blank" rel="noopener">Atom HTML Head 片段</a> - Atom <code>HEAD</code> 片段包</li><li><a href="https://github.com/marcobiedermann/sublime-head-snippets" target="_blank" rel="noopener">Sublime Text HTML Head 片段</a> - Sublime Text <code>HEAD</code> 片段包</li><li><a href="https://github.com/hemanth/head-it" target="_blank" rel="noopener">head-it</a> - <code>HEAD</code> 片段的 CLI 接口</li><li><a href="https://github.com/ktquez/vue-head" target="_blank" rel="noopener">vue-head</a> - 在 Vue.js 中操作 <code>HEAD</code> 标签的 meta 信息</li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="其他格式"><a href="#其他格式" class="headerlink" title="其他格式"></a>其他格式</h2><ul><li>📄 <a href="https://gitprint.com/joshbuchea/HEAD/blob/master/README.md" target="_blank" rel="noopener">PDF</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><ul><li>🇺🇸 <a href="https://github.com/joshbuchea/HEAD" target="_blank" rel="noopener">英语/English</a></li><li>🇨🇳 <a href="https://github.com/Amery2010/HEAD" target="_blank" rel="noopener">简体中文/Chinese (Simplified)</a></li><li>🇩🇪 <a href="https://github.com/Shidigital/HEAD" target="_blank" rel="noopener">德语/German</a></li><li>🇧🇷 <a href="https://github.com/Webschool-io/HEAD" target="_blank" rel="noopener">巴西葡萄牙语/Brazilian Portuguese</a></li><li>🇮🇹 <a href="https://github.com/Fakkio/HEAD" target="_blank" rel="noopener">意大利语/Italian</a></li><li>🇯🇵 <a href="https://coliss.com/articles/build-websites/operation/work/collection-of-html-head-elements.html" target="_blank" rel="noopener">日语/Japanese</a></li><li>🇰🇷 <a href="https://github.com/Lutece/HEAD" target="_blank" rel="noopener">韩语/Korean</a></li><li>🇷🇺 <a href="https://github.com/Konfuze/HEAD" target="_blank" rel="noopener">俄罗斯语/Russian/Русский</a></li><li>🇪🇸 <a href="https://github.com/alvaroadlf/HEAD" target="_blank" rel="noopener">西班牙语/Spanish</a></li><li>🇹🇷 <a href="https://github.com/mkg0/HEAD" target="_blank" rel="noopener">土耳其语/Turkish/Türkçe</a></li></ul><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p><h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p><strong>开启一个 issue 或一个 pull 请求来提出修改或补充。</strong></p><h3 id="指南"><a href="#指南" class="headerlink" title="指南"></a>指南</h3><p><strong> HEAD </strong> 仓库由两个分支组成：</p><h4 id="1、master"><a href="#1、master" class="headerlink" title="1、master"></a>1、<code>master</code></h4><p>对该分支包含的 <code>README.md</code> 文件的修改会自动反映在 <a href="https://gethead.info/" target="_blank" rel="noopener">gethead.info</a> 网站上。 所有对照表内容的更改都应该针对此文件。</p><p>请按照下列步骤 pull 请求：</p><ul><li>只修改一个标签，或一次一组相关的标签</li><li>对属性使用双引号</li><li>请不要在自我闭合的元素中使用斜线 —— 即便 HTML5 规范中说，他们是可选的</li><li>考虑在文档中加入链接以支持你所提到的变化</li></ul><h4 id="2-gh-pages"><a href="#2-gh-pages" class="headerlink" title="2. gh-pages"></a>2. <code>gh-pages</code></h4><p>该分支负责 <a href="https://gethead.info/" target="_blank" rel="noopener">gethead.info</a> 网站。我们使用 <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a> 通过 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 服务来部署 <code>README.md</code> Markdown 文件。所有网站相关的修改必须集中在这里。</p><p>你可能需要通过 <a href="https://jekyllrb.com/docs/home/" target="_blank" rel="noopener">Jekyll 文档</a> 来了解 Jekyll 是如何在该分支上工作的。</p><h3 id="贡献者"><a href="#贡献者" class="headerlink" title="贡献者"></a>贡献者</h3><p>列出所有超级棒的 <a href="https://github.com/joshbuchea/HEAD/graphs/contributors" target="_blank" rel="noopener">贡献者们</a>.</p><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p><strong><a href="https://joshbuchea.com/" target="_blank" rel="noopener">Josh Buchea</a></strong></p><h3 id="翻译者"><a href="#翻译者" class="headerlink" title="翻译者"></a>翻译者</h3><p><strong><a href="https://xiangfa.org/" target="_blank" rel="noopener">子丶言</a></strong></p><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p><img src="https://i.creativecommons.org/p/zero/1.0/88x31.png" alt="CC0" title="CC0"></p><p><strong><a href="#目录">⬆ 返回顶部</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HEAD&quot;&gt;&lt;a href=&quot;#HEAD&quot; class=&quot;headerlink&quot; title=&quot;HEAD&quot;&gt;&lt;/a&gt;HEAD&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot; t
      
    
    </summary>
    
      <category term="HTML" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/HTML/"/>
    
      <category term="meta" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/meta/"/>
    
      <category term="head" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/head/"/>
    
  </entry>
  
  <entry>
    <title>JSONP</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/JSONP/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/JSONP/</id>
    <published>2019-04-09T04:30:58.000Z</published>
    <updated>2019-04-09T04:32:06.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h2><ol><li>声明封装一个jsonp的函数,并且传入两个参数url和一个随机的Messagexxx,因为防止多次跨域请求得到的资源不会被覆盖.让每一次请求的资源都能够独立的显示.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url,fn</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> Message = <span class="string">'Message'</span>+<span class="built_in">parseInt</span>(<span class="built_in">Math</span>.randow()*<span class="number">1000</span>,<span class="number">10</span>)  <span class="comment">//生成随机Message</span></span><br><span class="line"> <span class="built_in">window</span>[Message] = fn                                     <span class="comment">//让这个随机Message是window中的key,这里不使用window.Message主要是因为这个Message是随机每一都不一样.</span></span><br><span class="line"> <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)            <span class="comment">//创建一个script标签</span></span><br><span class="line"> script.src = url+<span class="string">'?callback='</span>+ Message                   <span class="comment">//callback是约定俗成的,可以改变为任意参数</span></span><br><span class="line"> <span class="built_in">document</span>.head.appendChild(script)                        <span class="comment">//利用script的特性,只有在html文档中才会触发请求</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在duowan.js中放入要被跨域请求的数据 <code>({&quot;name&quot;:&quot;cheche&quot;,&quot;gender&quot;:&quot;male&quot;})</code> //是一个占位等待被回调的参数</li><li>在后端中需要添加如下代码</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(path === <span class="string">"/duowan.js"</span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> string = fs.readFileSync(<span class="string">'./duowan.js'</span>,<span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="keyword">var</span> callback = query.callback                         <span class="comment">//利用?查询字符串调取callback的值,这个值就是Message看上边步骤1</span></span><br><span class="line">  response.setHeader(<span class="string">'Content-Type'</span>,<span class="string">'charset=utf-8'</span>)    </span><br><span class="line">  response.end(string.replace(<span class="string">'&#123;&#123;callback&#125;&#125;'</span>,callback)) <span class="comment">//替换string字符串中的&#123;&#123;callback&#125;&#125;为callback,它的值又是Message,Message在window中它的值是function(data)&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在前端执行jsonp函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jsonp(<span class="string">'http://duowan.com'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(第一次数据)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br><span class="line">jsonp(<span class="string">'http://duowan.com'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(第二次数据)</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>得到响应的数据为Message加随机数的执行函数:Message0323({“name”:”cheche”,”gender”:”male”})</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一次的数据</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"cheche"</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>&#125;</span><br><span class="line">第二次的数据</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"cheche"</span>,<span class="string">"gender"</span>:<span class="string">"male"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="jQuery也有同样的函数实现JSONP"><a href="#jQuery也有同样的函数实现JSONP" class="headerlink" title="jQuery也有同样的函数实现JSONP"></a>jQuery也有同样的函数实现JSONP</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:<span class="string">"http://duowan.com/duowan.js"</span></span><br><span class="line">  dataType:<span class="string">'jsonp'</span></span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'第一次执行'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ZombrBrand/JSONP-demo" target="_blank" rel="noopener">demo地址</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;具体实现代码&quot;&gt;&lt;a href=&quot;#具体实现代码&quot; class=&quot;headerlink&quot; title=&quot;具体实现代码&quot;&gt;&lt;/a&gt;具体实现代码&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;声明封装一个jsonp的函数,并且传入两个参数url和一个随机的Messagexxx,因为防止多
      
    
    </summary>
    
      <category term="跨域" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E8%B7%A8%E5%9F%9F/"/>
    
      <category term="JavaScirpt" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E8%B7%A8%E5%9F%9F/JavaScirpt/"/>
    
    
      <category term="JavaScirpt" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/JavaScirpt/"/>
    
      <category term="JSONP" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/JSONP/"/>
    
      <category term="跨域" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E8%B7%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>自制jQuery</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/%E8%87%AA%E5%88%B6jQuery/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/09/自制jQuery/</id>
    <published>2019-04-09T04:28:11.000Z</published>
    <updated>2019-04-09T04:29:43.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自制jQuery"><a href="#自制jQuery" class="headerlink" title="自制jQuery"></a>自制jQuery</h1><p><a href="https://github.com/ZombrBrand/selfjQuery-demo1" target="_blank" rel="noopener">源码地址</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>车jQuery自制<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.$ = <span class="function"><span class="keyword">function</span> (<span class="params">selectors</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> elements</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="keyword">typeof</span> selectors === <span class="string">'string'</span>) &#123;</span></span><br><span class="line"><span class="javascript">elements = <span class="built_in">document</span>.querySelectorAll(selectors)</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectors <span class="keyword">instanceof</span> <span class="built_in">Array</span>) &#123;</span></span><br><span class="line"><span class="undefined">elements = &#123;&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; selectors.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">elements[i] = selectors[i]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">elements.length = selectors.length</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectors <span class="keyword">instanceof</span> Element) &#123;</span></span><br><span class="line"><span class="undefined">elements = &#123; 0: selectors, length: 1 &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.on = <span class="function"><span class="keyword">function</span> (<span class="params">eventType, fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (elements[i].addEventListener) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].addEventListener(eventType, fn)</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (elements[i].attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">elements[i].attachEvent(<span class="string">'on'</span> + eventType, fn)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">classname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (elements[i].classList) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].classList.add(classname)</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">elements[i].className = elements[i].className + <span class="string">' '</span> + classname</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.removeClass = <span class="function"><span class="keyword">function</span> (<span class="params">classname</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].classList.remove(classname)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.text = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = []</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">result.push(elements[i].innerText || elements[i].textContent)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> result</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (elements[i].innerText) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].innerText = string</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">elements[i].textContent = string</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.appendText = <span class="function"><span class="keyword">function</span> (<span class="params">string</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (elements[i].innerText) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].innerText += string</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">elements[i].textContent += string</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.css = <span class="function"><span class="keyword">function</span> (<span class="params">styleName, styleString</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].style[styleName] = styleString</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.html = <span class="function"><span class="keyword">function</span> (<span class="params">stringhtml</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = []</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">result.push(elements[i].innerHTML)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> result</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].innerHTML = stringhtml</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.attr = <span class="function"><span class="keyword">function</span> (<span class="params">attrname, value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="undefined">elements[i].setAttribute(attrname, value)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.get = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements[index]</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript">elements.siblings = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> result = []</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> chilrens = elements[i].parentNode.children</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; chilrens.length; x++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (chilrens[x] !== elements[i]) &#123;</span></span><br><span class="line"><span class="undefined">result.push(chilrens[x])</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> newresult = $(result)</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> newresult</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> elements</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">/*测试分割线---------------------------------------------------------------------------------------------------------*/</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> items = $(<span class="string">'li'</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(items)</span></span><br><span class="line"><span class="javascript">items.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'点击'</span>)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="javascript">items.addClass(<span class="string">'hi'</span>).on(<span class="string">'dblclick'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'被双击了'</span>) &#125;).removeClass(<span class="string">'hi'</span>).addClass(<span class="string">'hello'</span>).addClass(<span class="string">'frank'</span>).addClass(<span class="string">'jack'</span>)</span></span><br><span class="line"><span class="xml">items.text('<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span>')</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(items.text())</span></span><br><span class="line"><span class="javascript">items.css(<span class="string">'border'</span>, <span class="string">'1px solid red'</span>)</span></span><br><span class="line"><span class="javascript">items.attr(<span class="string">'name'</span>, <span class="string">'frank'</span>)</span></span><br><span class="line"><span class="xml">items.html('<span class="tag">&lt;<span class="name">p</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">p</span>&gt;</span>')</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(items.html())</span></span><br><span class="line"><span class="javascript">items[<span class="number">0</span>].style.border = <span class="string">'1px solid green'</span></span></span><br><span class="line"><span class="javascript">items.get(<span class="number">1</span>).style.border = <span class="string">'1px solid blue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> item = $(items[<span class="number">1</span>])</span></span><br><span class="line"><span class="javascript">item.siblings().addClass(<span class="string">'s'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自制jQuery&quot;&gt;&lt;a href=&quot;#自制jQuery&quot; class=&quot;headerlink&quot; title=&quot;自制jQuery&quot;&gt;&lt;/a&gt;自制jQuery&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ZombrBrand/selfjQu
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/JavaScript/"/>
    
      <category term="jQuery" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/JavaScript/jQuery/"/>
    
    
      <category term="JavaScript" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery基础</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/08/jQuery%E5%9F%BA%E7%A1%80/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/08/jQuery基础/</id>
    <published>2019-04-08T09:14:50.000Z</published>
    <updated>2019-04-08T09:17:34.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).eq(<span class="number">1</span>) <span class="comment">//选择li中键值是1的element</span></span><br><span class="line">$(<span class="string">'.a'</span>).next() <span class="comment">//从class="a"的元素相邻下一个元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).prev() <span class="comment">//从class="a"的元素相邻下上一个元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).nextAll() <span class="comment">//从class="a"的元素同辈之后的所有元素集合</span></span><br><span class="line">$(<span class="string">'.a'</span>).prevAll() <span class="comment">//从class="a"的元素相邻之前的所有元素集合</span></span><br><span class="line">$(<span class="string">'.a'</span>).siblings() <span class="comment">//从class="a"的元素相邻的所有元素集合</span></span><br><span class="line">$(<span class="string">'.a'</span>).parent() <span class="comment">//从class="a"的元素的上一级父元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).parents() <span class="comment">//从class="a"的元素的所有父元素祖元素 parents(''selector") 这样的话就会查找class="a"的父元素包含selector选择器的元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).children() <span class="comment">//从class="a"的元素向下一层的所有元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).find(<span class="string">'.b'</span>) <span class="comment">//从class="a"的元素后代子元素class="b"的元素合集</span></span><br><span class="line">$(<span class="string">'.a'</span>).filter(<span class="string">'.b'</span>) <span class="comment">//从class="a"的元素集合中满足class="b"的元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).has(<span class="string">'.b'</span>) <span class="comment">//从class="a"的元素集合中含有class="b"的元素</span></span><br><span class="line">$(<span class="string">'.a'</span>).is(<span class="string">'.b'</span>) <span class="comment">//从class="a"的元素集合众是否含有class="b"的元素返回布尔值\</span></span><br></pre></td></tr></table></figure><h3 id="利用选择器制作tab切换"><a href="#利用选择器制作tab切换" class="headerlink" title="利用选择器制作tab切换"></a>利用选择器制作tab切换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.tabs-top&gt;li'</span>).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123; <span class="comment">//对tabs-top&gt;li进行点击事件监听</span></span><br><span class="line">    <span class="keyword">let</span> li=e.currentTarget <span class="comment">//获取点击的元素</span></span><br><span class="line">    <span class="keyword">let</span> Index=$(li).index() <span class="comment">//li是排行第几</span></span><br><span class="line">    $(li).addClass(<span class="string">'active'</span>) <span class="comment">//点击事件li添加'active'</span></span><br><span class="line">    $(li).siblings(<span class="string">'.active'</span>).removeClass(<span class="string">'active'</span>) <span class="comment">//点击事件li的兄弟含有'.active'的删除'active'</span></span><br><span class="line">    <span class="keyword">let</span> liIndex =$(li).parent().parent().siblings().children().children().eq(Index) <span class="comment">//找到panes的对应li元素</span></span><br><span class="line">    liIndex.addClass(<span class="string">'active'</span>) <span class="comment">//给panes对应的li添加'active'</span></span><br><span class="line">    liIndex.siblings(<span class="string">'.active'</span>).removeClass(<span class="string">'active'</span>) <span class="comment">//给panes对应的li的兄弟含有'.active'删除'active'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h2><h3 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'li'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index,element</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index+<span class="string">":"</span>+<span class="keyword">this</span>)</span><br><span class="line">&#125;) <span class="comment">//函数内部的this总是指向当前的li元素</span></span><br></pre></td></tr></table></figure><h3 id="extend"><a href="#extend" class="headerlink" title="$.extend()"></a>$.extend()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="string">'name'</span>:<span class="string">'cheche'</span>,<span class="string">'age'</span>:<span class="number">20</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="string">'name'</span>:<span class="string">'xiaopei'</span>,<span class="string">'apple'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="keyword">var</span> newobj = $.extend(&#123;&#125;,obj1,obj2)</span><br><span class="line"><span class="built_in">console</span>.log(newobj) </span><br><span class="line">[object <span class="built_in">Object</span>] &#123;</span><br><span class="line">  age: <span class="number">20</span>,</span><br><span class="line">  apple: <span class="number">0</span>,</span><br><span class="line">  name: <span class="string">"xiaopei"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将两个对向合并成一个新的对象返回，如果第一个参数设置的是true那么会进行递归合并,如果有相同的属性和值那么obj2的值会覆盖obj1</span></span><br></pre></td></tr></table></figure><h3 id="clone"><a href="#clone" class="headerlink" title="clone()"></a>clone()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'selector'</span>).clone() <span class="comment">//这个方法会进行深拷贝匹配的元素合集</span></span><br></pre></td></tr></table></figure><h3 id="index"><a href="#index" class="headerlink" title="index()"></a>index()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'selector'</span>).index()  <span class="comment">//如果index参数没有设置那么会返回匹配元素合集第一个元素相对于同级兄弟元素自己是第几的位置，如果参数设置那么会从返回合集中与参数匹配的元素位置</span></span><br></pre></td></tr></table></figure><h3 id="ready"><a href="#ready" class="headerlink" title="ready()"></a>ready()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;) <span class="comment">//当页面DOM元素加载完成后立即执行</span></span><br></pre></td></tr></table></figure><h3 id="toggleClass"><a href="#toggleClass" class="headerlink" title="toggleClass()"></a>toggleClass()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).toggleClass(<span class="string">'active'</span>) <span class="comment">//如果存在就删除如果不存在就添加</span></span><br></pre></td></tr></table></figure><h3 id="hasClass"><a href="#hasClass" class="headerlink" title="hasClass()"></a>hasClass()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).hasClass(<span class="string">'active'</span>) === <span class="literal">true</span> <span class="comment">//判断是否class中有active</span></span><br></pre></td></tr></table></figure><h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"www.baidu.com"</span>,  <span class="comment">//发送地址</span></span><br><span class="line">    type:<span class="string">"post"</span>,                 <span class="comment">//类型</span></span><br><span class="line">    data:&#123;<span class="string">"name"</span>:<span class="string">"che"</span>,<span class="string">"age"</span>:<span class="string">"18"</span>&#125;, <span class="comment">//发送附带参数</span></span><br><span class="line">    dataType:<span class="string">"json"</span>,                            <span class="comment">//发送参数类型</span></span><br><span class="line">    <span class="keyword">async</span>:<span class="literal">false</span>,                                    <span class="comment">//同步还是异步</span></span><br><span class="line">    cache:<span class="literal">false</span>,                                    <span class="comment">//是否禁用缓存</span></span><br><span class="line">&#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;<span class="built_in">console</span>.log(res)&#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'失败'</span>)&#125;).always(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'请求完成'</span>)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.<span class="keyword">get</span>('text.js',&#123;<span class="string">'name'</span>:<span class="string">'che'</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data)&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$.getJSON(<span class="string">'text.json'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;<span class="built_in">console</span>.log(data)&#125;)</span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>直接看这个DEMO</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        top: 100px;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"continer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>show<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>hide<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>slidUp<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>slidDown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeIn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>fadeout<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span>animate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $box = $(<span class="string">'.box'</span>)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(1)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.show(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了show'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(2)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.hide(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了hide'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(3)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.slideUp(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了slideUp'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(4)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.slideDown(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了slideDown'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(5)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.fadeIn(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了fadeIn'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(6)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $box.fadeOut(<span class="string">'fast'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'执行了fadeOut'</span>)</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.continer'</span>).on(<span class="string">'click'</span>, <span class="string">':nth-child(7)'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        $box.animate(&#123;</span></span><br><span class="line"><span class="undefined">            opacity: 0.2,</span></span><br><span class="line"><span class="javascript">            left: <span class="string">'+=50'</span>,</span></span><br><span class="line"><span class="javascript">            width: [<span class="string">'toggle'</span>, <span class="string">'swing'</span>],</span></span><br><span class="line"><span class="javascript">            height: [<span class="string">'toggle'</span>, <span class="string">'swing'</span>]</span></span><br><span class="line"><span class="javascript">        &#125;, <span class="number">1000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'执行了animate'</span>) &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择器&quot;&gt;&lt;a href=&quot;#选择器&quot; class=&quot;headerlink&quot; title=&quot;选择器&quot;&gt;&lt;/a&gt;选择器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/jQuery/"/>
    
    
      <category term="jQuery" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>vue-axios拦截器实现loading</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/08/vue-axios%E6%8B%A6%E6%88%AA%E5%99%A8%E5%AE%9E%E7%8E%B0loading/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/04/08/vue-axios拦截器实现loading/</id>
    <published>2019-04-08T07:54:48.000Z</published>
    <updated>2019-04-08T07:57:37.403Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000016110704" target="_blank" rel="noopener">原文地址</a></p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><ul><li>利用vue-cli脚手架创建项目</li><li>进入项目安装vuex、axios（npm install vuex,npm install axios）</li></ul><h1 id="axios配置"><a href="#axios配置" class="headerlink" title="axios配置"></a>axios配置</h1><p>项目中安装axios模块（npm install axios）完成后，进行以下配置：</p><p><strong>main.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//引入axios</span><br><span class="line">import Axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">//修改原型链，全局使用axios,这样之后可在每个组件的methods中调用$axios命令完成数据请求</span><br><span class="line">Vue.prototype.$axios=Axios</span><br></pre></td></tr></table></figure><h1 id="loading组件"><a href="#loading组件" class="headerlink" title="loading组件"></a>loading组件</h1><p>我这里就选择使用iview提供的loading组件，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install iview</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line">import iView from &apos;iview&apos;;</span><br><span class="line">import &apos;iview/dist/styles/iview.css&apos;;</span><br><span class="line">Vue.use(iView);</span><br></pre></td></tr></table></figure><p>安装引入后，将loading写成一个组件loading.vue</p><p><img src="/ZombieBrand.github.io/assets/53601419-5b7d263f2495c_articlex.png" alt="clipboard.png"></p><h1 id="Vuex-state状态设置控制loading的显隐"><a href="#Vuex-state状态设置控制loading的显隐" class="headerlink" title="Vuex state状态设置控制loading的显隐"></a>Vuex state状态设置控制loading的显隐</h1><p><strong>store.js</strong>(Vuex)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export const store = new Vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        isShow:false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在state中定义isShow属性，默认false隐藏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-if=&quot;this.$store.state.isShow&quot;</span><br></pre></td></tr></table></figure><p>为loading组件添加v-if绑定state中的isShow</p><h1 id="组件使用axios请求数据"><a href="#组件使用axios请求数据" class="headerlink" title="组件使用axios请求数据"></a>组件使用axios请求数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=&quot;getData&quot;&gt;请求数据&lt;/button&gt;</span><br><span class="line">methods:&#123;</span><br><span class="line">        getData()&#123;</span><br><span class="line">            this.$axios.get(&apos;https://www.apiopen.top/journalismApi&apos;)</span><br><span class="line">            .then(res=&gt;&#123;</span><br><span class="line">                console.log(res)//返回请求的结果</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(err=&gt;&#123;</span><br><span class="line">                console.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我这里使用一个按钮进行触发事件，利用get请求网上随便找的一个api接口,.then中返回请求的整个结果（不仅仅包括数据）</p><h1 id="Axios拦截器配置"><a href="#Axios拦截器配置" class="headerlink" title="Axios拦截器配置"></a>Axios拦截器配置</h1><p><strong>main.js</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//定义一个请求拦截器</span><br><span class="line">Axios.interceptors.request.use(function(config)&#123;</span><br><span class="line">  store.state.isShow=true; //在请求发出之前进行一些操作</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br><span class="line">//定义一个响应拦截器</span><br><span class="line">Axios.interceptors.response.use(function(config)&#123;</span><br><span class="line">  store.state.isShow=false;//在这里对返回的数据进行处理</span><br><span class="line">  return config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>分别定义一个请求拦截器（请求开始时执行某些操作）、响应拦截器（接受到数据后执行某些操作），之间分别设置拦截时执行的操作，改变state内isShow的布尔值从而控制loading组件在触发请求数据开始时显示loading，返回数据时隐藏loading<br><strong>特别注意</strong>：这里有一个语法坑（我可是来来回回踩了不少次）main.js中调取、操作vuex state中的数据不同于组件中的this.$store.state，而是直接store.state 同上面代码</p><h1 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h1><p><img src="/ZombieBrand.github.io/assets/3238449369-5b7d2b18395ec_articlex.png" alt="clipboard.png"></p><p><img src="/ZombieBrand.github.io/assets/2586587721-5b7d2ada0d718_articlex.png" alt="clipboard.png"></p><blockquote><p>本文作者：茅野zhy<br>博客链接：<a href="http://www.zhysama.xyz" target="_blank" rel="noopener">www.zhysama.xyz</a><br>版权声明： 该文章由博主编辑 , 转发请注明出处谢谢！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000016110704&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/Vue/"/>
    
      <category term="axios" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/Vue/axios/"/>
    
    
      <category term="Vue" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/Vue/"/>
    
      <category term="axios" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/axios/"/>
    
      <category term="loding" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/loding/"/>
    
  </entry>
  
  <entry>
    <title>Grid布局</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/31/Grid%E5%B8%83%E5%B1%80/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/31/Grid布局/</id>
    <published>2019-03-31T10:53:53.000Z</published>
    <updated>2019-06-08T13:59:07.133Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">阮一峰博客转载</a></p></blockquote><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>网格布局（Grid）是最强大的 CSS 布局方案。</p><p>它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032501.png" alt="img"></p><p>上图这样的布局，就是 Grid 布局的拿手好戏。</p><p>Grid 布局与 <a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局</a>有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。</p><p>Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是<strong>一维布局</strong>。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是<strong>二维布局</strong>。Grid 布局远比 Flex 布局强大。</p><h2 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h2><p>学习 Grid 布局之前，需要了解一些基本概念。</p><h3 id="2-1-容器和项目"><a href="#2-1-容器和项目" class="headerlink" title="2.1 容器和项目"></a>2.1 容器和项目</h3><p>采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>上面代码中，最外层的<code>&lt;div&gt;</code>元素就是容器，内层的三个<code>&lt;div&gt;</code>元素就是项目。</p><p>注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的<code>&lt;p&gt;</code>元素就不是项目。Grid 布局只对项目生效。</p><h3 id="2-2-行和列"><a href="#2-2-行和列" class="headerlink" title="2.2 行和列"></a>2.2 行和列</h3><p>容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032502.png" alt="img"></p><p>上图中，水平的深色区域就是”行”，垂直的深色区域就是”列”。</p><h3 id="2-3-单元格"><a href="#2-3-单元格" class="headerlink" title="2.3 单元格"></a>2.3 单元格</h3><p>行和列的交叉区域，称为”单元格”（cell）。</p><p>正常情况下，<code>n</code>行和<code>m</code>列会产生<code>n x m</code>个单元格。比如，3行3列会产生9个单元格。</p><h3 id="2-4-网格线"><a href="#2-4-网格线" class="headerlink" title="2.4 网格线"></a>2.4 网格线</h3><p>划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。</p><p>正常情况下，<code>n</code>行有<code>n + 1</code>根水平网格线，<code>m</code>列有<code>m + 1</code>根垂直网格线，比如三行就有四根水平网格线。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032503.png" alt="img"></p><p>上图是一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线。</p><h2 id="三、容器属性"><a href="#三、容器属性" class="headerlink" title="三、容器属性"></a>三、容器属性</h2><p>Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。</p><h3 id="3-1-display-属性"><a href="#3-1-display-属性" class="headerlink" title="3.1 display 属性"></a>3.1 display 属性</h3><p><code>display: grid</code>指定一个容器采用网格布局。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032504.png" alt="img"></p><p>上图是<code>display: grid</code>的<a href="https://jsbin.com/guvivum/edit?html,css,output" target="_blank" rel="noopener">效果</a>。</p><p>默认情况下，容器元素都是块级元素，但也可以设成行内元素。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-grid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定<code>div</code>是一个行内元素，该元素内部采用网格布局。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032505.png" alt="img"></p><p>上图是<code>display: inline-grid</code>的<a href="https://jsbin.com/qatitav/edit?html,css,output" target="_blank" rel="noopener">效果</a>。</p><p> 注意，设为网格布局以后，容器的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>vertical-align</code>和<code>column-*</code>等设置都将失效。</p><h3 id="3-2-grid-template-columns-属性，-grid-template-rows-属性"><a href="#3-2-grid-template-columns-属性，-grid-template-rows-属性" class="headerlink" title="3.2  grid-template-columns 属性， grid-template-rows 属性"></a>3.2  grid-template-columns 属性， grid-template-rows 属性</h3><p>容器指定了网格布局以后，接着就要划分行和列。<code>grid-template-columns</code>属性定义每一列的列宽，<code>grid-template-rows</code>属性定义每一行的行高。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/qiginur/edit?css,output" target="_blank" rel="noopener">上面代码</a>指定了一个三行三列的网格，列宽和行高都是<code>100px</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" alt="img"></p><p>除了使用绝对单位，也可以使用百分比。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>（1）repeat()</strong></p><p>有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用<code>repeat()</code>函数，简化重复的值。上面的代码用<code>repeat()</code>改写如下。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(3, 33.33%);</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(3, 33.33%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>repeat()</code>接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。</p><p><code>repeat()</code>重复某种模式也是可以的。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(2, 100<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 80<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/cokohu/edit?css,output" target="_blank" rel="noopener">上面代码</a>定义了6列，第一列和第四列的宽度为<code>100px</code>，第二列和第五列为<code>20px</code>，第三列和第六列为<code>80px</code>。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032507.png" alt="img"></p><p><strong>（2）auto-fill 关键字</strong></p><p>有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用<code>auto-fill</code>关键字表示自动填充。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, 100px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/himoku/edit?css,output" target="_blank" rel="noopener">上面代码</a>表示每列宽度<code>100px</code>，然后自动填充，直到容器不能放置更多的列。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032508.png" alt="img"></p><p><strong>（3）fr 关键字</strong></p><p>为了方便表示比例关系，网格布局提供了<code>fr</code>关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为<code>1fr</code>和<code>2fr</code>，就表示后者是前者的两倍。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/hadexek/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>表示两个相同宽度的列。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/1_bg2019032509.png" alt="img"></p><p><code>fr</code>可以与绝对长度的单位结合使用，这时会非常方便。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/remowec/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032510.png" alt="img"></p><p><strong>（4）minmax()</strong></p><p><code>minmax()</code>函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: 1<span class="selector-tag">fr</span> 1<span class="selector-tag">fr</span> <span class="selector-tag">minmax</span>(100<span class="selector-tag">px</span>, 1<span class="selector-tag">fr</span>);</span><br></pre></td></tr></table></figure><p>上面代码中，<code>minmax(100px, 1fr)</code>表示列宽不小于<code>100px</code>，不大于<code>1fr</code>。</p><p><strong>（5）auto 关键字</strong></p><p><code>auto</code>关键字表示由浏览器自己决定长度。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: 100<span class="selector-tag">px</span> <span class="selector-tag">auto</span> 100<span class="selector-tag">px</span>;</span><br></pre></td></tr></table></figure><p>上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了<code>min-width</code>，且这个值大于最大宽度。</p><p><strong>（6）网格线的名称</strong></p><p><code>grid-template-columns</code>属性和<code>grid-template-rows</code>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1] <span class="number">100px</span> [c2] <span class="number">100px</span> [c3] auto [c4];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1] <span class="number">100px</span> [r2] <span class="number">100px</span> [r3] auto [r4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。</p><p>网格布局允许同一根线有多个名字，比如<code>[fifth-line row-5]</code>。</p><p><strong>（7）布局实例</strong></p><p><code>grid-template-columns</code>属性对于网页布局非常有用。两栏式布局只需要一行代码。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">70%</span> <span class="number">30%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码将左边栏设为70%，右边栏设为30%。</p><p>传统的十二网格布局，写起来也很容易。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-columns</span>: <span class="selector-tag">repeat</span>(12, 1<span class="selector-tag">fr</span>);</span><br></pre></td></tr></table></figure><h3 id="3-3-grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性"><a href="#3-3-grid-row-gap-属性，-grid-column-gap-属性，-grid-gap-属性" class="headerlink" title="3.3  grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性"></a>3.3  grid-row-gap 属性， grid-column-gap 属性， grid-gap 属性</h3><p><code>grid-row-gap</code>属性设置行与行的间隔（行间距），<code>grid-column-gap</code>属性设置列与列的间隔（列间距）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/mezufab/edit?css,output" target="_blank" rel="noopener">上面代码</a>中，<code>grid-row-gap</code>用于设置行间距，<code>grid-column-gap</code>用于设置列间距。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032511.png" alt="img"></p><p><code>grid-gap</code>属性是<code>grid-column-gap</code>和<code>grid-row-gap</code>的合并简写形式，语法如下。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-gap</span>: &lt;<span class="selector-tag">grid-row-gap</span>&gt; &lt;<span class="selector-tag">grid-column-gap</span>&gt;;</span><br></pre></td></tr></table></figure><p>因此，上面一段 CSS 代码等同于下面的代码。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>grid-gap</code>省略了第二个值，浏览器认为第二个值等于第一个值。</p><p> 根据最新标准，上面三个属性名的<code>grid-</code>前缀已经删除，<code>grid-column-gap</code>和<code>grid-row-gap</code>写成<code>column-gap</code>和<code>row-gap</code>，<code>grid-gap</code>写成<code>gap</code>。</p><h3 id="3-4-grid-template-areas-属性"><a href="#3-4-grid-template-areas-属性" class="headerlink" title="3.4 grid-template-areas 属性"></a>3.4 grid-template-areas 属性</h3><p>网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。<code>grid-template-areas</code>属性用于定义区域。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">'a b c'</span></span><br><span class="line">                       <span class="string">'d e f'</span></span><br><span class="line">                       <span class="string">'g h i'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码先划分出9个单元格，然后将其定名为<code>a</code>到<code>i</code>的九个区域，分别对应这九个单元格。</p><p>多个单元格合并成一个区域的写法如下。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: 'a a a'</span><br><span class="line">                     'b b b'</span><br><span class="line">                     'c c c';</span><br></pre></td></tr></table></figure><p>上面代码将9个单元格分成<code>a</code>、<code>b</code>、<code>c</code>三个区域。</p><p>下面是一个布局实例。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-template-areas</span>: "<span class="selector-tag">header</span> <span class="selector-tag">header</span> <span class="selector-tag">header</span>"</span><br><span class="line">                     "<span class="selector-tag">main</span> <span class="selector-tag">main</span> <span class="selector-tag">sidebar</span>"</span><br><span class="line">                     "<span class="selector-tag">footer</span> <span class="selector-tag">footer</span> <span class="selector-tag">footer</span>";</span><br></pre></td></tr></table></figure><p>上面代码中，顶部是页眉区域<code>header</code>，底部是页脚区域<code>footer</code>，中间部分则为<code>main</code>和<code>sidebar</code>。</p><p>如果某些区域不需要利用，则使用”点”（<code>.</code>）表示。</p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grid-template-areas: 'a . c'</span><br><span class="line">                     'd . f'</span><br><span class="line">                     'g . i';</span><br></pre></td></tr></table></figure><p>上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。</p><p> 注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为<code>区域名-start</code>，终止网格线自动命名为<code>区域名-end</code>。</p><p> 比如，区域名为<code>header</code>，则起始位置的水平网格线和垂直网格线叫做<code>header-start</code>，终止位置的水平网格线和垂直网格线叫做<code>header-end</code>。</p><h3 id="3-5-grid-auto-flow-属性"><a href="#3-5-grid-auto-flow-属性" class="headerlink" title="3.5 grid-auto-flow 属性"></a>3.5 grid-auto-flow 属性</h3><p>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032506.png" alt="img"></p><p>这个顺序由<code>grid-auto-flow</code>属性决定，默认值是<code>row</code>，即”先行后列”。也可以将它设成<code>column</code>，变成”先列后行”。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column</span>;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/xutokec/edit?css,output" target="_blank" rel="noopener">上面代码</a>设置了<code>column</code>以后，放置顺序就变成了下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032512.png" alt="img"></p><p><code>grid-auto-flow</code>属性除了设置成<code>row</code>和<code>column</code>，还可以设成<code>row dense</code>和<code>column dense</code>。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。</p><p><a href="https://jsbin.com/wapejok/edit?css,output" target="_blank" rel="noopener">下面的例子</a>让1号项目和2号项目各占据两个单元格，然后在默认的<code>grid-auto-flow: row</code>情况下，会产生下面这样的布局。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032513.png" alt="img"></p><p>上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。</p><p>现在修改设置，设为<code>row dense</code>，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">row</span> <span class="selector-tag">dense</span>;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/helewuy/edit?css,output" target="_blank" rel="noopener">上面代码</a>的效果如下。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032514.png" alt="img"></p><p>上图会先填满第一行，再填满第二行，所以3号项目就会紧跟在1号项目的后面。8号项目和9号项目就会排到第四行。</p><p>如果将设置改为<code>column dense</code>，表示”先列后行”，并且尽量填满空格。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">grid-auto-flow</span>: <span class="selector-tag">column</span> <span class="selector-tag">dense</span>;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/pupoduc/1/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>的效果如下。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032515.png" alt="img"></p><p>上图会先填满第一列，再填满第2列，所以3号项目在第一列，4号项目在第二列。8号项目和9号项目被挤到了第四列。</p><h3 id="3-6-justify-items-属性，-align-items-属性，-place-items-属性"><a href="#3-6-justify-items-属性，-align-items-属性，-place-items-属性" class="headerlink" title="3.6  justify-items 属性， align-items 属性， place-items 属性"></a>3.6  justify-items 属性， align-items 属性， place-items 属性</h3><p><code>justify-items</code>属性设置单元格内容的水平位置（左中右），<code>align-items</code>属性设置单元格内容的垂直位置（上中下）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性的写法完全相同，都可以取下面这些值。</p><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li><p>stretch：拉伸，占满单元格的整个宽度（默认值）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://jsbin.com/gijeqej/edit?css,output" target="_blank" rel="noopener">上面代码</a>表示，单元格的内容左对齐，效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032516.png" alt="img"></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/tecawur/edit?css,output" target="_blank" rel="noopener">上面代码</a>表示，单元格的内容头部对齐，效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032517.png" alt="img"></p><p><code>place-items</code>属性是<code>align-items</code>属性和<code>justify-items</code>属性的合并简写形式。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-items</span>: &lt;<span class="selector-tag">align-items</span>&gt; &lt;<span class="selector-tag">justify-items</span>&gt;;</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-items</span>: <span class="selector-tag">start</span> <span class="selector-tag">end</span>;</span><br></pre></td></tr></table></figure><p>如果省略第二个值，则浏览器认为与第一个值相等。</p><h3 id="3-7-justify-content-属性，-align-content-属性，-place-content-属性"><a href="#3-7-justify-content-属性，-align-content-属性，-place-content-属性" class="headerlink" title="3.7  justify-content 属性， align-content 属性， place-content 属性"></a>3.7  justify-content 属性， align-content 属性， place-content 属性</h3><p><code>justify-content</code>属性是整个内容区域在容器里面的水平位置（左中右），<code>align-content</code>属性是整个内容区域的垂直位置（上中下）。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以<code>justify-content</code>属性为例，<code>align-content</code>属性的图完全一样，只是将水平方向改成垂直方向。）</p><ul><li>start - 对齐容器的起始边框。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032519.png" alt="img"></p><ul><li>end - 对齐容器的结束边框。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032518.png" alt="img"></p><ul><li>center - 容器内部居中。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032520.png" alt="img"></p><ul><li>stretch - 项目大小没有指定时，拉伸占据整个网格容器。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032521.png" alt="img"></p><ul><li>space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032522.png" alt="img"></p><ul><li>space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032523.png" alt="img"></p><ul><li>space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。</li></ul><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032524.png" alt="img"></p><p><code>place-content</code>属性是<code>align-content</code>属性和<code>justify-content</code>属性的合并简写形式。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-content</span>: &lt;<span class="selector-tag">align-content</span>&gt; &lt;<span class="selector-tag">justify-content</span>&gt;</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-content</span>: <span class="selector-tag">space-around</span> <span class="selector-tag">space-evenly</span>;</span><br></pre></td></tr></table></figure><p>如果省略第二个值，浏览器就会假定第二个值等于第一个值。</p><h3 id="3-8-grid-auto-columns-属性，-grid-auto-rows-属性"><a href="#3-8-grid-auto-columns-属性，-grid-auto-rows-属性" class="headerlink" title="3.8  grid-auto-columns 属性， grid-auto-rows 属性"></a>3.8  grid-auto-columns 属性， grid-auto-rows 属性</h3><p>有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。</p><p><code>grid-auto-columns</code>属性和<code>grid-auto-rows</code>属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与<code>grid-template-columns</code>和<code>grid-template-rows</code>完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。</p><p><a href="https://jsbin.com/sayuric/edit?css,output" target="_blank" rel="noopener">下面的例子</a>里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: <span class="number">50px</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定新增的行高统一为50px（原始的行高为100px）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032525.png" alt="img"></p><h3 id="3-9-grid-template-属性，-grid-属性"><a href="#3-9-grid-template-属性，-grid-属性" class="headerlink" title="3.9  grid-template 属性， grid 属性"></a>3.9  grid-template 属性， grid 属性</h3><p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p><p><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</p><p>从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。</p><h2 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h2><p>下面这些属性定义在项目上面。</p><h3 id="4-1-grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性"><a href="#4-1-grid-column-start-属性，-grid-column-end-属性，-grid-row-start-属性，-grid-row-end-属性" class="headerlink" title="4.1  grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性"></a>4.1  grid-column-start 属性， grid-column-end 属性， grid-row-start 属性， grid-row-end 属性</h3><p>项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。</p><ul><li><code>grid-column-start</code>属性：左边框所在的垂直网格线</li><li><code>grid-column-end</code>属性：右边框所在的垂直网格线</li><li><code>grid-row-start</code>属性：上边框所在的水平网格线</li><li><p><code>grid-row-end</code>属性：下边框所在的水平网格线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://jsbin.com/yukobuf/edit?css,output" target="_blank" rel="noopener">上面代码</a>指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032526.png" alt="img"></p><p>上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。</p><p>除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的<code>grid-auto-flow</code>属性决定，这个属性的默认值是<code>row</code>，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成<code>column</code>、<code>row dense</code>和<code>column dense</code>，看看其他项目的位置发生了怎样的变化。</p><p><a href="https://jsbin.com/nagobey/edit?html,css,output" target="_blank" rel="noopener">下面的例子</a>是指定四个边框位置的效果。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032527.png" alt="img"></p><p>这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: header-start;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: header-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，左边框和右边框的位置，都指定为网格线的名字。</p><p>这四个属性的值还可以使用<code>span</code>关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/hehumay/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>表示，1号项目的左边框距离右边框跨越2个网格。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032528.png" alt="img"></p><p>这与<a href="https://jsbin.com/mujihib/edit?html,css,output" target="_blank" rel="noopener">下面的代码</a>效果完全一样。</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这四个属性，如果产生了项目的重叠，则使用<code>z-index</code>属性指定项目的重叠顺序。</p><h3 id="4-2-grid-column-属性，-grid-row-属性"><a href="#4-2-grid-column-属性，-grid-row-属性" class="headerlink" title="4.2  grid-column 属性， grid-row 属性"></a>4.2  grid-column 属性， grid-row 属性</h3><p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>:  / ;</span><br><span class="line">  <span class="attribute">grid-row</span>:  / ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，项目<code>item-1</code>占据第一行，从第一根列线到第三根列线。</p><p>这两个属性之中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 等同于 */</span></span><br><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#b03532</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/volugow/edit?html,css,output" target="_blank" rel="noopener">上面代码</a>中，项目<code>item-1</code>占据的区域，包括第一行 + 第二行、第一列 + 第二列。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032529.png" alt="img"></p><p>斜杠以及后面的部分可以省略，默认跨越一个网格。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，项目<code>item-1</code>占据左上角第一个网格。</p><h3 id="4-3-grid-area-属性"><a href="#4-3-grid-area-属性" class="headerlink" title="4.3 grid-area 属性"></a>4.3 grid-area 属性</h3><p><code>grid-area</code>属性指定项目放在哪一个区域。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/qokexob/edit?css,output" target="_blank" rel="noopener">上面代码</a>中，1号项目位于<code>e</code>区域，效果如下图。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032530.png" alt="img"></p><p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一个<a href="https://jsbin.com/duyafez/edit?css,output" target="_blank" rel="noopener">例子</a>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / <span class="number">1</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-justify-self-属性，-align-self-属性，-place-self-属性"><a href="#4-4-justify-self-属性，-align-self-属性，-place-self-属性" class="headerlink" title="4.4  justify-self 属性， align-self 属性， place-self 属性"></a>4.4  justify-self 属性， align-self 属性， place-self 属性</h3><p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p><p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个属性都可以取下面四个值。</p><ul><li>start：对齐单元格的起始边缘。</li><li>end：对齐单元格的结束边缘。</li><li>center：单元格内部居中。</li><li>stretch：拉伸，占满单元格的整个宽度（默认值）。</li></ul><p>下面是<code>justify-self: start</code>的例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-1</span>  &#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019032532.png" alt="img"></p><p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-self</span>: &lt;<span class="selector-tag">align-self</span>&gt; &lt;<span class="selector-tag">justify-self</span>&gt;;</span><br></pre></td></tr></table></figure><p>下面是一个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">place-self</span>: <span class="selector-tag">center</span> <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure><p>如果省略第二个值，<code>place-self</code>属性会认为这两个值相等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰博客转载&lt;/a&gt;&lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/css/"/>
    
      <category term="Grid" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/Grid/"/>
    
  </entry>
  
  <entry>
    <title>http控制缓存</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/18/http%E6%8E%A7%E5%88%B6%E7%BC%93%E5%AD%98/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/18/http控制缓存/</id>
    <published>2019-03-18T03:42:21.000Z</published>
    <updated>2019-03-18T03:42:53.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="静态服务器（无缓存无更新请求数据）"><a href="#静态服务器（无缓存无更新请求数据）" class="headerlink" title="静态服务器（无缓存无更新请求数据）"></a>静态服务器（无缓存无更新请求数据）</h3><ul><li>优点：简单。</li><li>缺点：每次请求必须查找返回原始文件，浪费带宽。</li></ul><h3 id="有缓存-无更新请求数据"><a href="#有缓存-无更新请求数据" class="headerlink" title="有缓存-无更新请求数据"></a>有缓存-无更新请求数据</h3><ul><li>优点：节省资源，速度快。</li><li>缺点：服务器缓存中的数据变了，浏览器不知道数据是否发生改变。</li></ul><h3 id="缓存作用："><a href="#缓存作用：" class="headerlink" title="缓存作用："></a>缓存作用：</h3><p>缓存是指代理服务器或客户端本地磁盘内保存的资源副本，利用缓存可减少对源服务器的访问，可以节省通信流量和通信时间。</p><h3 id="有缓存有更新请求数据"><a href="#有缓存有更新请求数据" class="headerlink" title="有缓存有更新请求数据"></a>有缓存有更新请求数据</h3><ul><li>主要原理：请求被响应的时候，响应报文中有一个Expires ：Mon,10 Dec 1990 02:25:22GMT（过期时间），再一次进行请求的时候，用本地的时间与过期时间进行比较，如果本地时间小于过期时间，那么从缓存中获取，如果本地时间大于过期时间，重新向服务器发送请求获取，再一次发送新的过期时间。</li><li>优点：缓存可控制。</li><li>缺点：控制的功能太单一，这种格式的时间和容易写错。</li></ul><h3 id="有缓存-更新机制升级版"><a href="#有缓存-更新机制升级版" class="headerlink" title="有缓存+更新机制升级版"></a>有缓存+更新机制升级版</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=300；</span><br></pre></td></tr></table></figure><p>以上代码代表时间间隔，如果再一次的请求在时间间隔300s之内，就在缓存中获取，否则从服务器获取。</p><ul><li>Cache-Control还有其他值： <ul><li><code>Public</code>表示响应可被任何中间节点缓存，如 Browser &lt;– proxy1 &lt;– proxy2 &lt;– Server，中间的proxy可以缓存资源，比如下次再请求同一资源proxy1直接把自己缓存的东西给 Browser 而不再向proxy2要。</li><li><code>Private</code>表示中间节点不允许缓存，对于Browser &lt;– proxy1 &lt;– proxy2 &lt;– Server，proxy 会老老实实把Server 返回的数据发送给proxy1,自己不缓存任何数据。当下次Browser再次请求时proxy会做好请求转发而不是自作主张给自己缓存的数据。</li><li><code>no-cache</code>表示不使用 Cache-Control的缓存控制方式做前置验证，而是使用 Etag 或者Last-Modified字段来控制缓存。不走缓存，响应报文，是服务器发给浏览器的。浏览器在一次发送请求时，发现这个字段，就不会再缓存中获取数据了，而是再一次向服务器发送请求。 缓存只是本地缓存，而不是服务器对应的缓存。报文会缓存，但是不会使用。</li><li><code>no-store</code> ，真正的不缓存任何东西。浏览器会直接向服务器请求原始文件，并且请求中不附带 Etag 参数(服务器认为是新请求)。不存，所有的流程都不进行缓存。连报文都不会进行缓存，啥都不缓存。</li><li><code>max-age</code>，表示当前资源的有效时间，单位为秒。</li></ul></li><li>优点： 缓存控制功能更强大</li><li>缺点： 不够完美，超过时间间隔再向服务器要文件的时候，服务器会再一次发送源文件，但如果文件未被改变，发送源文件太浪费带宽了，只要发送一个文件未被更改的短信息标示就好了。</li></ul><h3 id="缓存-更新终极版"><a href="#缓存-更新终极版" class="headerlink" title="缓存+更新终极版"></a>缓存+更新终极版</h3><p>服务器返回的文件以及额外信息，其中Etag 是 对请求文件的编码，如果请求文件在服务端未被修改，这个值就不会变。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=300；</span><br><span class="line">ETag:W/&quot;e-cbxLFQW5zapn79tQwb/g6Q&quot;</span><br></pre></td></tr></table></figure><p>当超过时间间隔的时候，重新发请求获取源文件的时候，在发送请求的时候附带刚刚保存的文件的ETag ( If-None-Match：W/“e-cbxLFQW5zapn79tQwb/g6Q”），之后于ETag进行比较，如果二者相等，则发送个短消息（响应头，不包含图片内容, 304），如果二者不等则发送新文件和新的 ETag，浏览器获取新文件并更新该文件的 Etag。（浏览器的默认行为。）</p><p>与 ETag 类似功能的是Last-Modified/If-Modified-Since。当资源过期时（max-age超时），发现资源具有Last-Modified声明，则再次向web服务器请求时带上头 If-Modified-Since，表示上次服务器告知的文件修改的时间。web服务器收到请求后发现有头If-Modified-Since 则与被请求资源的最后修改时间进行比对。若最后修改时间较新，说明资源又被改动过，则响应整片资源内容（200）；若最后修改时间较旧，说明资源无新修改，则响应HTTP 304 ，告知浏览器继续使用所保存的cache。第一次去请求，响应头中存在Last-modified,刷新后第二次请求，请求头中有if-modified-since。</p><h3 id="html不会缓存-css和图片都会"><a href="#html不会缓存-css和图片都会" class="headerlink" title=".html不会缓存,.css和图片都会"></a>.html不会缓存,.css和图片都会</h3><p>原因：图片和CSS的请求都是HTML到达浏览器后，浏览器解析发出的，而HTML是直接输入URL解析出来的。报文也存在差异：</p><p><img src="https:////upload-images.jianshu.io/upload_images/5628037-f2997c3aa3cab988.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/603/format/webp" alt="img"></p><p>htmlq请求报文.PNG</p><p><img src="https:////upload-images.jianshu.io/upload_images/5628037-510b4da0bfeb8353.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/583/format/webp" alt="img"></p><p>css报文.PNG</p><ul><li>当浏览器检测到状态码是304的时候，就会在本地的缓存中拿数据，做一个展示。调试的时候以为是服务器发过来的，实际上并不是。</li><li>勾选开发者工具控制台Disable cache原理：浏览器自动在请求报文上添加：pragma:no-cache。</li></ul><h3 id="lastModified和cache-control"><a href="#lastModified和cache-control" class="headerlink" title="lastModified和cache-control"></a>lastModified和cache-control</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">LastModified：sXXX</span><br></pre></td></tr></table></figure><p>可以进行缓存，但是下一次请求之前，不可以直接在缓存中拿数据，要先问服务器是否可以在本地缓存中中拿，如果服务器返回304状态码，则表示可以在本地缓存中拿数据，否则，服务器返回数据。</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ol><li><p>在互联网上，域名通过DNS服务映射到IP地址之后访问目标网站，也就是说，当请求到达服务器时，已经是已IP地址形式访问了。</p></li><li><p>代理：是一种具有转发功能的应用程序，它扮演了位于服务器和客户端“中间人”的角色，接收由客户端发送的请求并转发给服务器，同时也接收服务器返回的响应并转发给客户端。代理不会改变请求URI。每次通过代理服务器转发请求或者响应的时候，会追加写入Via首部信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET/HTTP/1.1 Via:proxy1</span><br></pre></td></tr></table></figure><p>。 </p><ul><li>缓存代理（利用缓存技术）；</li><li>透明代理，不对报文做任何加工的代理叫透明代理。</li></ul></li><li><p>网关：是转发其他服务器通信数据的服务器，接收从客户端发来的请求时，它就像自己拥有资源的服务器一样，对请求进行处理。利用网关可以由HTTP请求转化为其他协议通信。</p></li><li><p>隧道：是在相隔甚远的客户端和服务器两者之间进行中转，并保持双方通信连接的应用程序。隧道的目的是确保客户端能与服务器进行安全的通信，本身 不会去解析HTTP请求，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p></li><li><p>需要兼容HTTP1.0的时候需要使用Expires，不然可以考虑直接使用Cache-Control</p></li><li><p>需要处理一秒内多次修改的情况，或者其他Last-Modified处理不了的情况，才使用ETag，否则使用Last-Modified。</p></li><li><p>对于所有可缓存资源，需要指定一个Expires或Cache-Control，同时指定Last-Modified或者Etag。</p></li><li><p>可以通过标识文件版本名、加长缓存时间的方式来减少304响应。</p></li></ol><p>作者：L_筱_Q</p><p>链接：<a href="https://www.jianshu.com/p/8f7e1d4fc3ba" target="_blank" rel="noopener">https://www.jianshu.com/p/8f7e1d4fc3ba</a></p><p>来源：简书</p><p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;静态服务器（无缓存无更新请求数据）&quot;&gt;&lt;a href=&quot;#静态服务器（无缓存无更新请求数据）&quot; class=&quot;headerlink&quot; title=&quot;静态服务器（无缓存无更新请求数据）&quot;&gt;&lt;/a&gt;静态服务器（无缓存无更新请求数据）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;优点：简
      
    
    </summary>
    
      <category term="HTTP" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/HTTP/"/>
    
    
      <category term="缓存" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="HTTP" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/flex%E5%B8%83%E5%B1%80/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/flex布局/</id>
    <published>2019-03-17T10:29:21.733Z</published>
    <updated>2019-06-08T13:59:01.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h2><ul><li>normal flow（正常流）</li><li>float + clear（浮动+清楚浮动）</li><li>position relative + absolute （相对定位+绝对定位）</li><li>display inline-block （改变元素属性）</li><li>-margin（负外边距）</li></ul><h2 id="Flex布局特性"><a href="#Flex布局特性" class="headerlink" title="Flex布局特性"></a>Flex布局特性</h2><ol><li><p>块级布局侧重垂直方向、行内布局侧重水平方向，flex布局是<strong>与方向无关的</strong></p></li><li><p>flex布局可以实现<strong>空间自动分配</strong>、<strong>自动对齐</strong>（全称:the flexible box Module）</p></li><li><p>flex适用于<strong>简单的线性布局</strong>，更复杂的布局要交给grid布局（目前还没发布）</p><p>​    </p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>display: flex;</p><p>display: inline-flex;</p><p>设为Flex布局后，子元素的<code>loat,clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote></li></ol><h2 id="Flex基础概念"><a href="#Flex基础概念" class="headerlink" title="Flex基础概念"></a>Flex基础概念</h2><p><strong>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</strong></p><p><a href="https://camo.githubusercontent.com/c204f0894898f5a8feee7ec098a16fc94532a5fa/68747470733a2f2f6f6f6f2e306f302e6f6f6f2f323031372f30352f30392f353931313763336464623763662e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/c204f0894898f5a8feee7ec098a16fc94532a5fa/68747470733a2f2f6f6f6f2e306f302e6f6f6f2f323031372f30352f30392f353931313763336464623763662e706e67" alt="flex基础分解图"></a></p><ul><li><p>上图水平是主轴(main axis)垂直是侧轴(cross axis)。主轴的开始位置叫做<code>main start</code>，结束位置叫做<code>main end</code>；侧轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code> 。</p></li><li><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的侧轴空间叫做<code>cross size</code>。</p></li></ul><h2 id="Flex-container容器属性"><a href="#Flex-container容器属性" class="headerlink" title="Flex container容器属性"></a>Flex container容器属性</h2><h3 id="flex-direction-决定了主轴的方向（即项目的排列方向"><a href="#flex-direction-决定了主轴的方向（即项目的排列方向" class="headerlink" title="flex-direction: 决定了主轴的方向（即项目的排列方向)"></a>flex-direction: 决定了主轴的方向（即项目的排列方向)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>:flex;</span><br><span class="line">     <span class="attribute">flex-direction</span>:column-revers|column|row-reverse|row;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>row(默认)</td><td>主轴方向为水平，起点在左端</td></tr><tr><td>row- reverse</td><td>主轴方向为水平，起点在右端</td></tr><tr><td>column</td><td>主轴方向为垂直，起点在上端</td></tr><tr><td>column-reverse</td><td>主轴方向为垂直，起点在下端</td></tr></tbody></table><p>  <a href="https://camo.githubusercontent.com/bb8b00a8353d931a32a422edc2f8b525cc510f1a/687474703a2f2f7777772e7275616e796966656e672e636f6d2f626c6f67696d672f61737365742f323031352f6267323031353037313030352e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/bb8b00a8353d931a32a422edc2f8b525cc510f1a/687474703a2f2f7777772e7275616e796966656e672e636f6d2f626c6f67696d672f61737365742f323031352f6267323031353037313030352e706e67" alt="flex-direction排序图"></a></p><blockquote><p>单独添加flex-direction: row; //默认是不会换行</p></blockquote><hr><h3 id="flex-wrap-定义如果一条轴线排不下，如何换行"><a href="#flex-wrap-定义如果一条轴线排不下，如何换行" class="headerlink" title="flex-wrap: 定义如果一条轴线排不下，如何换行"></a>flex-wrap: 定义如果一条轴线排不下，如何换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>:flex;</span><br><span class="line">     <span class="attribute">flex-direction</span>:now  </span><br><span class="line">     flex-wrap:wrap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>nowrap(默认)</td><td>不换行</td></tr><tr><td>wrap</td><td>换行</td></tr><tr><td>wrap-reverse</td><td>换行反转</td></tr></tbody></table><p>  <a href="https://camo.githubusercontent.com/ef9b8559067337e190b156db8ff369f199e7e477/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d353461626161306361653634323863652e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/ef9b8559067337e190b156db8ff369f199e7e477/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d353461626161306361653634323863652e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="img"></a></p><hr><h3 id="flex-flow（以上两个属性的简写）"><a href="#flex-flow（以上两个属性的简写）" class="headerlink" title="flex-flow（以上两个属性的简写）"></a>flex-flow（以上两个属性的简写）</h3><p>  <code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="justify-content-定义了项目在主轴上的对齐方式"><a href="#justify-content-定义了项目在主轴上的对齐方式" class="headerlink" title="justify-content:定义了项目在主轴上的对齐方式"></a>justify-content:定义了项目在主轴上的对齐方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">justify-content</span>:flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>flex-start(默认)</td><td>项目沿着主轴方向的起始位置靠齐</td></tr><tr><td>flex-end</td><td>项目沿着主轴方向的结束位置靠齐，和flex-start相反</td></tr><tr><td>space-between</td><td>项目在主轴方向上两端对齐，其中的间隔相等</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</td></tr></tbody></table><p>  <a href="https://camo.githubusercontent.com/8f5eaddc35a3f320262ee598998c8d038946d04c/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d636664303366343763313632663434382e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/8f5eaddc35a3f320262ee598998c8d038946d04c/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d636664303366343763313632663434382e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="img"></a></p><hr><h3 id="align-items定义项目在交叉轴上如何对齐"><a href="#align-items定义项目在交叉轴上如何对齐" class="headerlink" title="align-items定义项目在交叉轴上如何对齐"></a>align-items定义项目在交叉轴上如何对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>:flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>项目沿着侧轴上的起点对齐</td></tr><tr><td>flex-end</td><td>项目沿着侧轴上的终点对齐</td></tr><tr><td>center</td><td>项目在侧轴方向上居中对齐</td></tr><tr><td>stretch(默认)</td><td>如果项目未设置高度或高度为auto,将占满整个容器的高度。</td></tr></tbody></table><p><a href="https://camo.githubusercontent.com/e4492baad276d7c4ad526348c72addbbe0b7ff86/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d363362306666326638653362616136622e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/e4492baad276d7c4ad526348c72addbbe0b7ff86/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d363362306666326638653362616136622e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="img"></a></p><hr><h3 id="align-content多行多列内容对齐方式"><a href="#align-content多行多列内容对齐方式" class="headerlink" title="align-content多行多列内容对齐方式"></a>align-content多行多列内容对齐方式</h3><p><em>注意如果项目只有一行，属性不起作用</em></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-content</span>:flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性名</th><th>说明</th></tr></thead><tbody><tr><td>flex-start</td><td>项目与侧轴的起点对齐</td></tr><tr><td>flex-end</td><td>项目与侧轴的终点对齐</td></tr><tr><td>center</td><td>项目与侧轴的中点对齐</td></tr><tr><td>space-between</td><td>与侧轴两端对齐，轴线之间的间隔平均分布</td></tr><tr><td>space-around</td><td>每行轴线两侧的间隔都相等。所以轴线之间的间隔比轴线与边框的间隔大一倍</td></tr><tr><td>stretch（默认）</td><td>轴线占满整个测轴</td></tr></tbody></table><p><a href="https://camo.githubusercontent.com/d5d550de5ba40286e0d1d2a63dd709fdf4605e13/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d356562633339343136396339356566302e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/d5d550de5ba40286e0d1d2a63dd709fdf4605e13/687474703a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f353535363032362d356562633339343136396339356566302e6a70673f696d6167654d6f6772322f6175746f2d6f7269656e742f7374726970253743696d61676556696577322f322f772f31323430" alt="img"></a></p><hr><h2 id="flex-item项目属性"><a href="#flex-item项目属性" class="headerlink" title="flex item项目属性"></a>flex item项目属性</h2><ul><li><h3 id="order属性：定义项目的排列顺序。数值越小，排列越靠前，默认为0"><a href="#order属性：定义项目的排列顺序。数值越小，排列越靠前，默认为0" class="headerlink" title="order属性：定义项目的排列顺序。数值越小，排列越靠前，默认为0"></a>order属性：定义项目的排列顺序。数值越小，排列越靠前，默认为0</h3></li></ul><p><code>.item{order: &lt;integer&gt;;}</code></p><ul><li><h3 id="flex-grow属性-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"><a href="#flex-grow属性-定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大" class="headerlink" title="flex-grow属性:定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"></a>flex-grow属性:定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</h3></li></ul><p><code>.item{flex-grow:&lt;number&gt;;}</code></p><p>flex-grow为零的话则不变化，不能为負值。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项的2倍。</p><ul><li><h3 id="flex-shrink属性：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"><a href="#flex-shrink属性：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小" class="headerlink" title="flex-shrink属性：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"></a>flex-shrink属性：定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</h3></li></ul><p><code>.item{flex-shrink:&lt;number&gt;;}</code></p><p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。负值对该属性无效。</p><ul><li><h3 id="flex-basis属性-定义了在分配多余空间之前，项目占据的主轴空间（main-size）"><a href="#flex-basis属性-定义了在分配多余空间之前，项目占据的主轴空间（main-size）" class="headerlink" title="flex-basis属性:定义了在分配多余空间之前，项目占据的主轴空间（main size）"></a>flex-basis属性:定义了在分配多余空间之前，项目占据的主轴空间（main size）</h3></li></ul><p>浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。它可以设为跟width或height属性一样的值，则项目将占据固定空间</p><p><code>.item{flex-basis: &lt;length&gt;| auto;</code></p><ul><li><h3 id="flex属性：flex-grow-flex-shrink和flex-basis的简写"><a href="#flex属性：flex-grow-flex-shrink和flex-basis的简写" class="headerlink" title="flex属性：flex-grow,flex-shrink和flex-basis的简写"></a>flex属性：flex-grow,flex-shrink和flex-basis的简写</h3></li></ul><p>默认值为0 1 auto。后两个属性可选。该属性有两个<code>快捷值：auto(</code>1 1 <em>auto) 和 none</em> (0 0 auto)。</p><ul><li><h3 id="align-self属性：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性"><a href="#align-self属性：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性" class="headerlink" title="align-self属性：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性"></a>align-self属性：允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性</h3></li></ul><p>默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p><p><code>.item{align-self:auto | flex-start | flex-end | center | baseline | stretch;}</code></p><p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p><blockquote><p><a href="https://www.w3cplus.com/css3/understanding-flexbox-everything-you-need-to-know.html" target="_blank" rel="noopener">最近发现一篇很详细关于flex box 布局的博客链接</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">阮一峰flex实战布局教程</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常见布局&quot;&gt;&lt;a href=&quot;#常见布局&quot; class=&quot;headerlink&quot; title=&quot;常见布局&quot;&gt;&lt;/a&gt;常见布局&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;normal flow（正常流）&lt;/li&gt;
&lt;li&gt;float + clear（浮动+清楚浮动）&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/css/"/>
    
    
      <category term="css" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/css/"/>
    
      <category term="布局" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>前端缓存</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E5%89%8D%E7%AB%AF%E7%BC%93%E5%AD%98/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/前端缓存/</id>
    <published>2019-03-17T08:36:48.000Z</published>
    <updated>2019-03-17T08:38:06.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="localStorage-还能这么用"><a href="#localStorage-还能这么用" class="headerlink" title="localStorage 还能这么用"></a>localStorage 还能这么用</h1><p><img src="http://self-storage.b0.upaiyun.com/2017/10/09/150756387698667375.png" alt="img"></p><p>HTML5中 Web Storage 的出现，主要是为了弥补使用 Cookie 作为本地存储的不足。Cookie 存储的数据量非常小，而且数据会自动携带到请求头里，但服务器端可能并不关心这些数据，所以会造成带宽的浪费。</p><p>Web Storage 提供了两个存储对象：localStorage 和 sessionStorage。</p><p>sessionStorage 存储的数据仅在本次会话有用，会话结束后会自动失效，而且数据仅在当前窗口有效，同一源下新窗口也访问不到其他窗口基于<br>sessionStorage 存储的数据。也是由于这些特性，导致 sessionStorage 的使用场景会比较少。</p><p>localStorage 可以永久存储，而且同源下数据多窗口也能共享，。看起来很美好，但 localStorage 也有短板，绝大多数浏览器有 5M 的大小限制。但是这不足以成为大家使用 localStorage 的障碍，要知道 Cookie 只有 4K 的大小，多了一千多倍，偷着乐吧。</p><h2 id="localStorage-的基本使用"><a href="#localStorage-的基本使用" class="headerlink" title="localStorage 的基本使用"></a>localStorage 的基本使用</h2><p>讲这个内容的文章网上太多了，现在再来讲有点老套了。这里就不做更多介绍了，不清楚的读者可以看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API" target="_blank" rel="noopener">这里</a>。</p><p>有两点需要注意一下。在 <code>setItem</code> 时，可能会达到大小限制，最好加上错误捕捉 <a href="https://iammapping.com/the-other-ways-to-use-localstorage/#ref-error" target="_blank" rel="noopener">1</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  localStorage.setItem(key, value);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (isQuotaExceeded(e)) &#123;</span><br><span class="line">    <span class="comment">// Storage full, maybe notify user or do some clean-up</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isQuotaExceeded</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> quotaExceeded = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">if</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.code) &#123;</span><br><span class="line">      <span class="keyword">switch</span> (e.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">22</span>:</span><br><span class="line">          quotaExceeded = <span class="literal">true</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1014</span>:</span><br><span class="line">          <span class="comment">// Firefox</span></span><br><span class="line">          <span class="keyword">if</span> (e.name === <span class="string">'NS_ERROR_DOM_QUOTA_REACHED'</span>) &#123;</span><br><span class="line">            quotaExceeded = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.number === <span class="number">-2147024882</span>) &#123;</span><br><span class="line">      <span class="comment">// Internet Explorer 8</span></span><br><span class="line">      quotaExceeded = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> quotaExceeded;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在存储容量快满时，会造成 <code>getItem</code> 性能急剧下降 <a href="https://iammapping.com/the-other-ways-to-use-localstorage/#ref-performance" target="_blank" rel="noopener">2</a>。</p><p>我们下面看看 localStorage 有哪些脑洞大开的用法。</p><h2 id="缓存静态文件"><a href="#缓存静态文件" class="headerlink" title="缓存静态文件"></a>缓存静态文件</h2><p>你不禁要问，HTTP 协议不是本来就支持缓存文件吗（之前写过一篇文章<a href="https://iammapping.com/the-http-guide-of-web-cache/" target="_blank" rel="noopener">《Web缓存之HTTP指南》</a>），为什么还要使用 localStorage 来缓存？为了可编程化，通俗一点说就是把命运握在自己手中。</p><p>HTTP 协议的缓存，可以由用户浏览器清除或禁用缓存，也可以由 Web 服务器设置过期时间或不缓存。对于前端工程师，这更像是一个黑盒，想要决定文件是访问缓存还是访问远程显得有些力不从心了。</p><p>使用 localStorage 控制文件缓存的方式有两种：</p><ol><li>使用 Loader 加载静态文件</li><li>借助服务器端将静态文件 inline 化</li></ol><p>这两种方式一般都会提前做好缓存过期策略，通常是使用版本号来控制，下面还会细讲。否则文件新版上线，用户客户端还是旧版，这就麻烦大了，而且这类问题，还不好调试不好重现。</p><h3 id="使用-Loader-加载静态文件"><a href="#使用-Loader-加载静态文件" class="headerlink" title="使用 Loader 加载静态文件"></a>使用 Loader 加载静态文件</h3><p>由于请求都是动态发出的，所以可以对请求拦截处理。大致流程如下：</p><ol><li>查看请求的文件 url 是否有缓存到 localStorage</li><li>如果没有，到第 2 大步</li><li>如果有，判断文件是否过期或版本号是否匹配<ol><li>过期或不匹配，到第 2 大步</li><li>文件内容有效，到第 4 大步</li></ol></li><li>请求远程文件</li><li>缓存最新文件内容</li><li>执行文件内容</li></ol><p>这个方式有个开源库：<a href="https://github.com/addyosmani/basket.js" target="_blank" rel="noopener">basket.js</a>。</p><h3 id="借助服务器端将静态文件-inline-化"><a href="#借助服务器端将静态文件-inline-化" class="headerlink" title="借助服务器端将静态文件 inline 化"></a>借助服务器端将静态文件 inline 化</h3><p>这个方式比上面那种更进一步，在第一次响应时把需要放入 localStorage 的文件都内联进 html 中，后面每次响应只要文件版本没有变化，都是渲染一段从 localStorage 加载该文件的代码。这样做的好处是可以有效减少请求次数，即使是第一次。</p><p>版本号不匹配（版本号可记在 Cookie 中，第一次访问没有版本号），服务端响应内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">script2ls</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> script = <span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (script) &#123;</span></span><br><span class="line"><span class="undefined">    localStorage[id] = script.innerHTML;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="undefined">...jquery source code...</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">script2ls(<span class="string">'jquery.js'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>版本号匹配，服务端响应内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">ls2script</span>(<span class="params">id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="undefined">  script.text = localStorage[id];</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.head.appendChild(script);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">ls2script(<span class="string">'jquery.js'</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不过使用 localStorage 缓存文件会有 XSS 的风险，而且造成的伤害可能是永久的 <a href="https://iammapping.com/the-other-ways-to-use-localstorage/#ref-xss" target="_blank" rel="noopener">3</a>。</p><h2 id="同源窗口通信"><a href="#同源窗口通信" class="headerlink" title="同源窗口通信"></a>同源窗口通信</h2><p>你可能不禁又要问，不是有 postMessage 吗？没错 postMessage 确实可以用于窗口或 iframe 间通信，但是前提是你必须拿到打开新窗或 iframe 的句柄对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> popup = <span class="built_in">window</span>.open(...popup details...);</span><br><span class="line">popup.postMessage(<span class="string">"hello there!"</span>, <span class="string">"http://example.com"</span>);</span><br></pre></td></tr></table></figure><p>这样在新窗中再打开新窗，似乎就不好传递消息了。</p><p>你可能还想问，为什么要在窗口间通信？好问题，没有应用场景的技术都是耍流氓。像多窗口共用的一些组件，而且对数据实时同步都有较高要求的都会是这个技术的应用场景。比如通知中心上面的未读数量，两个窗口，A 窗口更新为 8，切到 B 窗口还是 9，这就造成了体验不一致，这个例子可能还觉得无关痛痒；再比如购物车，两个产品窗口，A 窗口添加到购物车，切到 B 窗口添加到购物车，发现没有 A 添加的产品，这样就比较严重了。这当然也可以通过每个窗口都与后台建立连接来更新，但用户如果开十几个窗口就开销大了。</p><p>有了同源窗口通信，我们就可以只有一个窗口与后台建立连接，收到更新后，广播给其他窗口就可以。说了这么多，实现原理是怎样的呢？</p><p><img src="http://self-storage.b0.upaiyun.com/2017/10/09/150756219537917384.png" alt="storage event"></p><p>其实原理也简单，每次 localStorage 中有任何变动都会触发一个 <code>storage</code> 事件，所有窗口都监听这个事件，一旦有窗口更新 localStorage，其他窗口都会收到通知，根据事件中的 <code>key</code> 把不关心的变动过滤掉。原理是很简单，但是要实现一套完整的广播机制还是有些复杂，你需要：</p><ul><li>管理好每个窗口的唯一 ID</li><li>防止消息重复</li><li>防止消息发给不关心的窗口</li><li>窗口心跳 keep alive</li><li>主窗口选举</li><li>…</li></ul><p>不用担心，已经有了不错的开源实现：<a href="https://github.com/diy/intercom.js" target="_blank" rel="noopener">diy/intercom.js</a>、<a href="https://github.com/tejacques/crosstab" target="_blank" rel="noopener">tejacques/crosstab</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="作为前端-DB-的存储介质"><a href="#作为前端-DB-的存储介质" class="headerlink" title="作为前端 DB 的存储介质"></a>作为前端 DB 的存储介质</h3><p>你可能不满足于用键值对保存数据，你还想保存更复杂的数据结构。</p><p>灵活存取 json 格式的数据：<a href="https://github.com/typicode/lowdb#install" target="_blank" rel="noopener">typicode/lowdb</a></p><p>通过 sql 对数据 CURD 操作：<a href="https://github.com/agershun/alasql#localstorage-and-dom-storage" target="_blank" rel="noopener">agershun/alasql</a></p><h3 id="表单自动持久化"><a href="#表单自动持久化" class="headerlink" title="表单自动持久化"></a>表单自动持久化</h3><p>在填写表单时，遇到浏览器奔溃或者误操作导致填写内容丢失，此刻用户的内心也应该是奔溃的。误操作还可以加一个 <code>beforeunload</code> 事件，在关闭浏览器或跳出当前页前提醒一下用户。那浏览器崩溃呢，将数据变更实时保存到后台，这样似乎开销很大，实时保存到 localStorage 是个不错的解决方案，真巧，也有一个开源实现：<a href="https://github.com/simsalabim/sisyphus" target="_blank" rel="noopener">simsalabim/sisyphus</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>文件缓存现在有更好的解决方案，没错，说的就是 Service Worker 的 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage" target="_blank" rel="noopener">CacheStorage</a>。</p><p>不过多了解一些脑洞大开的想法，有利于拓展解决问题的思路。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;localStorage-还能这么用&quot;&gt;&lt;a href=&quot;#localStorage-还能这么用&quot; class=&quot;headerlink&quot; title=&quot;localStorage 还能这么用&quot;&gt;&lt;/a&gt;localStorage 还能这么用&lt;/h1&gt;&lt;p&gt;&lt;img s
      
    
    </summary>
    
      <category term="缓存" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
      <category term="缓存" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="localStorage" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/localStorage/"/>
    
  </entry>
  
  <entry>
    <title>移动端入门常见适配问题</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%A5%E9%97%A8%E5%B8%B8%E8%A7%81%E9%80%82%E9%85%8D%E9%97%AE%E9%A2%98/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/移动端入门常见适配问题/</id>
    <published>2019-03-17T08:35:52.000Z</published>
    <updated>2019-05-12T06:25:03.219Z</updated>
    
    <content type="html"><![CDATA[<h3 id="这个项目收集移动端开发所需要的一些资源与小技巧"><a href="#这个项目收集移动端开发所需要的一些资源与小技巧" class="headerlink" title="这个项目收集移动端开发所需要的一些资源与小技巧"></a><a href="https://github.com/ZombrBrand/mobileTech" target="_blank" rel="noopener">这个项目收集移动端开发所需要的一些资源与小技巧</a></h3><h3 id="移动端开发分为4类"><a href="#移动端开发分为4类" class="headerlink" title="移动端开发分为4类"></a>移动端开发分为4类</h3><hr><ul><li>Native（原生 APP）<br>使用 Java/Objective-C/Swift 开发</li><li>Webapp<br>在手机浏览器上展示的网页</li><li>Hybird（混合应用）<br>Native + Html</li><li>微信小程序<br><a href="https://www.zhihu.com/topic/20061410/hot" target="_blank" rel="noopener">https://www.zhihu.com/topic/20061410/hot</a></li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><hr><ul><li>开发成本<br>开发App成本比较大：android + ios+前端+后台<br>Webapp=微信小程序：前端</li><li>更新<br>Native：需要提示用户更新下载新版本<br>Webapp=Hybird=小程序： 不需要用户更新下载新版本</li><li>性能体验<br>Native：体验最佳，速度快，功能强大<br>Hybird：次之<br>Webapp：最差</li><li>安装方式<br>Native=Hybird：下载安装<br>Webapp：无需下载</li><li>跨平台<br>andriod平台<br>ios平台<br>Webapp：不需要考虑平台</li></ul><h3 id="移动端和-PC-的区别"><a href="#移动端和-PC-的区别" class="headerlink" title="移动端和 PC 的区别"></a>移动端和 PC 的区别</h3><hr><p>开发流程一样：psd稿子-&gt;切图-&gt;分析功能-&gt;&gt;写html-&gt;写css-&gt;写js</p><p><img src="https:////upload-images.jianshu.io/upload_images/6555104-2938ecae4e58d13c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="img"></p><p>移动端vsPC端，移动端的布局更简单</p><h4 id="1-触摸事件"><a href="#1-触摸事件" class="headerlink" title="1.触摸事件"></a>1.触摸事件</h4><p>touchstart, touchend, touchmove, touchcancel<br> touchcancel：系统取消touch事件的时候触发（不常用）<br> <a href="http://js.jirengu.com/pire/5/edit?html,js,output" target="_blank" rel="noopener">touchstart立即响应</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node.addEventListener(&apos;touchstart&apos;, function()&#123;</span><br><span class="line">  console.log(&apos;start touch&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">node.addEventListener(&apos;touchend&apos;, function()&#123;</span><br><span class="line">  console.log(&apos;&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>JS没有滑动事件，我们可以<a href="http://www.zixuephp.net/article-201.html" target="_blank" rel="noopener">用触摸点的坐标来判断滑动方向</a>。</p><h4 id="2-移动端-300ms-延时"><a href="#2-移动端-300ms-延时" class="headerlink" title="2.移动端 300ms 延时"></a>2.移动端 300ms 延时</h4><p><a href="http://thx.github.io/mobile/300ms-click-delay" target="_blank" rel="noopener">300ms 延时的原因</a><br> 出于对手指触摸滑动的区分，移动端页面对于触摸事件会有 300 毫秒的延迟。</p><p>2007 年初，苹果公司在发布首款 iPhone 前夕，遇到一个问题 —— 当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。</p><p>这当中最出名的，当属双击缩放(double tap to zoom)，浏览PC页面时，默认缩小显示（980px的视窗宽度），用手指在屏幕上快速点击两次，Safari 浏览器会将网页缩放至原始比例。</p><p>假定用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。</p><h5 id="避免300ms延时的方法"><a href="#避免300ms延时的方法" class="headerlink" title="避免300ms延时的方法"></a>避免300ms延时的方法</h5><p><strong>方案一：禁止缩放，就无需等待300ms</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no&quot;&gt; 禁止用户缩放</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1,maximum-scale=1&quot;&gt; 禁止浏览器缩放</span><br></pre></td></tr></table></figure><p><strong>方案二：更改默认的视口宽度</strong><br> 用 <meta> 标签配置width=device-width。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;将视口大小设为设备本身的尺寸</span><br></pre></td></tr></table></figure><p>Chrome 32对<a href="https://codereview.chromium.org/18850005/" target="_blank" rel="noopener">包含 width=device-width 或者置为比 viewport 值更小的页面上禁用双击缩放</a>。没有双击缩放就没有 300 毫秒点击延迟。<br> iOS 9.3 中：Safari 针对移动版的网页去掉了点击时的 300ms 延迟。对于网页开发者来说，不再需要引入类似 FastClick 这样的 Hack 了。双击放大的功能仍然可用，但是必须点击链接之外的地方才有效（否则就直接进入链接了）</p><p><strong>方案三：CSS touch-action: manipulation;</strong><br> CSS属性 touch-action 用于指定某个给定的区域是否允许用户操作，以及如何响应用户操作（比如浏览器自带的划动、缩放等）<br> 移动端300ms延迟，就可以使用<code>touch-action: manipulation;</code>来解决。<br> manipulation:<br> 浏览器只允许进行滚动和持续缩放操作，禁用其他非标准手势，例如双击以进行缩放，也就没有300 毫秒点击延迟啦。</p><p><strong>方案四：使用fastclick库</strong><br> <a href="https://github.com/ftlabs/fastclick" target="_blank" rel="noopener">FastClick</a> 是 <a href="http://labs.ft.com/" target="_blank" rel="noopener">FT Labs</a> 专门为解决移动端浏览器 300 毫秒点击延迟问题所开发的一个轻量级的库。简而言之，FastClick 在检测到 <code>touchend</code> 事件的时候，会通过 <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener">DOM 自定义事件</a>立即触发一个模拟 <code>click</code> 事件，并把浏览器在 300 毫秒之后真正触发的 <code>click</code> 事件阻止掉。用法很简单：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//引入fastclick.js</span><br><span class="line">&lt;script type=&apos;application/javascript&apos; src=&apos;/path/to/fastclick.js&apos;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">//在body里面写</span><br><span class="line">if (&apos;addEventListener&apos; in document) &#123;</span><br><span class="line">    document.addEventListener(&apos;DOMContentLoaded&apos;, function() &#123;</span><br><span class="line">        FastClick.attach(document.body);</span><br><span class="line">    &#125;, false);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-常见手势"><a href="#3-常见手势" class="headerlink" title="3.常见手势"></a>3.常见手势</h4><p><img src="https:////upload-images.jianshu.io/upload_images/6555104-7edcad4fb0b58095.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/988" alt="img"></p><p>image</p><p> 但原生js只有touchstart, touchend, touchmove事件， </p><p>hammerjs</p><p> 为我们实现了一个手势库</p><h4 id="4-滚动"><a href="#4-滚动" class="headerlink" title="4.滚动"></a>4.滚动</h4><p>以往我们可以通过CSS的overflow:scroll或者overflow:auto实现滚动，但是在移动端这样效果不好。可以使用<a href="http://iscrolljs.com/" target="_blank" rel="noopener">iscroll</a></p><h4 id="5-需要设置viewport来控制屏幕全屏显示，禁止缩放"><a href="#5-需要设置viewport来控制屏幕全屏显示，禁止缩放" class="headerlink" title="5.需要设置viewport来控制屏幕全屏显示，禁止缩放"></a>5.需要设置viewport来控制屏幕全屏显示，禁止缩放</h4><p>inital-scale页面初始的放大倍数，maximum-scale最大放大倍数<br> user-scalable=no 页面不可以放大缩小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, inital-scale=1.0, maximum-scale=1.0, user-scalable=no;&quot; /&gt;</span><br></pre></td></tr></table></figure><h4 id="6-页面适配-动态-rem-（移动端方案，不是响应式）"><a href="#6-页面适配-动态-rem-（移动端方案，不是响应式）" class="headerlink" title="6.页面适配-动态 rem （移动端方案，不是响应式）"></a>6.页面适配-动态 rem （移动端方案，不是响应式）</h4><h5 id="响应式方案"><a href="#响应式方案" class="headerlink" title="响应式方案"></a>响应式方案</h5><p>目的是一份代码解决手机、平板、电脑的页面适配。</p><ol><li>meta:vp禁止缩放<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, inital-scale=1.0, maximum-scale=1.0, user-scalable=no;&quot; /&gt;</code> </li><li>尽量不要写width/height，该用max-width/max-height</li><li>多用flex布局</li><li>media query</li></ol><h5 id="动态-rem方案"><a href="#动态-rem方案" class="headerlink" title="动态 rem方案"></a>动态 rem方案</h5><p>而动态 rem是只针对移动端页面的适配方法。<a href="https://h5.m.taobao.com/" target="_blank" rel="noopener">例如手机淘宝</a> 在移动端宽度不适合再用固定宽度px，我们希望整体等比缩放。如果用媒体查询的响应式，那么对于宽度不同的手机，显示页面内容的宽度仍然一样，内容居中，只是两边留白宽度不同。</p><p>rem是CSS3新增的一个相对单位（root em，根em），相对的只是HTML根元素（1rem=html font size）。通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应（em也是相对长度单位，但会继承父级元素的字体大小）。</p><p>rem是相对于根节点html的font-size的倍数，浏览器对font-size值有限制，一般font-size最小值默认为12。</p><p><strong>动态 rem方案1</strong></p><ol><li>meta:vp禁止缩放<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, inital-scale=1.0, maximum-scale=1.0, user-scalable=no;&quot; /&gt;</code> </li><li>document.documentElement.clientWidth动态获取页面宽度</li><li>赋给html的font-size，即拼接成<code>html{font-size:&#39;+document.documentElement.clientWidth +&#39;px;}</code> </li><li>所有需要跟视觉稿一致的地方，按比例算出rem值<br><a href="http://js.jirengu.com/runakatoxe/1/edit" target="_blank" rel="noopener">示例1</a> </li></ol><p><strong>动态rem方案2</strong></p><ol><li>meta:vp禁止缩放<br><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, height=device-height, inital-scale=1.0, maximum-scale=1.0, user-scalable=no;&quot; /&gt;</code> </li><li>document.documentElement.clientWidth动态获取页面宽度width</li><li>赋给html的font-size，即拼接成<code>html{font-size:&#39;+ width/10 +&#39;px;}</code> </li><li>10rem==页面宽度width</li><li>所有单位都用rem == 所有长度都以页面的宽度为基准<br><a href="http://js.jirengu.com/zupeviquni/1/edit" target="_blank" rel="noopener">示例2</a> </li></ol><p><strong>动态rem方案3 + retina下，border: 1px问题</strong></p><ol><li>普通屏幕<br>CSS 1px == 设备的1px</li><li>在Retina<br>CSS 1px == 设备的2px<br>设计师要求 border-width == 设备的1px<br>所以我们让border-width ：0.5px== 设备的1px（兼容性有问题，不是所有的浏览器都支持0.5px）</li></ol><p>解决方案：<br> 1.获取设备 像素比window.devicePixelRatio<br> 2.<code>var sacle = 1/window.devicePixelRatio;</code><br> 3.让rem变为rem*像素比<br> 4.border-top:1px solid red;<br> <a href="http://jsbin.com/cojivi/1/edit?html,css,output" target="_blank" rel="noopener">示例3</a><br> <a href="http://www.aliued.com/?p=3166" target="_blank" rel="noopener">移动端高清、多屏适配方案-阿里</a><br> <a href="http://www.alloyteam.com/2016/03/mobile-web-adaptation-tool-rem/" target="_blank" rel="noopener">移动web适配-rem-腾讯</a></p><p><strong>动态rem方案可以被css3中相对长度单位vw 取代</strong><br> <a href="https://caniuse.com/#search=vm" target="_blank" rel="noopener">查看浏览器对vw的支持情况</a><br> vw  相对于视口的宽度。视口被均分为100单位的vw(即浏览器可视区) 100vw = 可视区宽度<br> vh  相对于视口的高度。视口被均分为100单位的vh(即浏览器可视区) 100vh  = 可视区高度</p><h4 id="7-开发调试"><a href="#7-开发调试" class="headerlink" title="7.开发调试"></a>7.开发调试</h4><p>PC端：采用本地编写，浏览器查看，dev-tools调试<br> 移动端：<code>npm install browser-sync</code> 用于在手机端验证和调试。手机通过连接局域网地址也可以访问页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ browser-sync</span><br><span class="line">[Browsersync] Access URLs:</span><br><span class="line"> ---------------------------------------</span><br><span class="line">       Local: http://localhost:3000</span><br><span class="line">    External: http://192.168.10.101:3000</span><br><span class="line"> ---------------------------------------</span><br><span class="line">          UI: http://localhost:3001   (调试地址)</span><br><span class="line"> UI External: http://192.168.10.101:3001</span><br></pre></td></tr></table></figure><h4 id="8-移动端解决方法收集"><a href="#8-移动端解决方法收集" class="headerlink" title="8.移动端解决方法收集"></a>8.移动端解决方法收集</h4><p><a href="https://github.com/jtyjty99999/mobileTech/blob/master/README.md" target="_blank" rel="noopener">https://github.com/jtyjty99999/mobileTech/blob/master/README.md</a><br> <a href="https://placeholder.com/" target="_blank" rel="noopener">image place holder占位图片定制化</a></p><h4 id="9-安卓只会出发一次touchstart-touchmove-不处罚touchend"><a href="#9-安卓只会出发一次touchstart-touchmove-不处罚touchend" class="headerlink" title="9.安卓只会出发一次touchstart,touchmove,不处罚touchend"></a>9.安卓只会出发一次touchstart,touchmove,不处罚touchend</h4><p>解决方案是touchmove中加入:<code>event.preventDefault</code></p><h4 id="10-局部滚动开启弹性滚动"><a href="#10-局部滚动开启弹性滚动" class="headerlink" title="10.局部滚动开启弹性滚动:"></a>10.局部滚动开启弹性滚动:</h4><p>解决方案是:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">overflow</span>:scroll;</span><br><span class="line">    <span class="attribute">-webkit-overflow-scrolling</span>:touch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-Web移动端Fixed布局的解决方案"><a href="#11-Web移动端Fixed布局的解决方案" class="headerlink" title="11.Web移动端Fixed布局的解决方案"></a>11.Web移动端Fixed布局的解决方案</h4><p><a href="https://efe.baidu.com/blog/mobile-fixed-layout/" target="_blank" rel="noopener">解决方案连接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;这个项目收集移动端开发所需要的一些资源与小技巧&quot;&gt;&lt;a href=&quot;#这个项目收集移动端开发所需要的一些资源与小技巧&quot; class=&quot;headerlink&quot; title=&quot;这个项目收集移动端开发所需要的一些资源与小技巧&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="移动端" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/%E9%80%82%E9%85%8D/"/>
    
    
      <category term="移动端" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>移动端rem适配</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E7%A7%BB%E5%8A%A8%E7%AB%AFrem%E9%80%82%E9%85%8D/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/移动端rem适配/</id>
    <published>2019-03-17T08:31:59.000Z</published>
    <updated>2019-06-08T14:01:50.156Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端适配基础知识及方案"><a href="#移动端适配基础知识及方案" class="headerlink" title="移动端适配基础知识及方案"></a>移动端适配基础知识及方案</h1><p>导读</p><p>移动端适配，是我们在开发中经常会遇到的，这里面可能会遇到非常多的问题：</p><ul><li><code>1px</code>问题</li><li><code>UI</code>图完美适配方案</li><li><code>iPhoneX</code>适配方案</li><li>横屏适配</li><li>高清屏图片模糊问题</li><li>…</li></ul><p>上面这些问题可能我们在开发中已经知道如何解决，但是问题产生的原理，以及解决方案的原理可能会模糊不清。在解决这些问题的过程中，我们往往会遇到非常多的概念：像素、分辨率、<code>PPI</code>、<code>DPI</code>、<code>DP</code>、<code>DIP</code>、<code>DPR</code>、视口等等，你真的能分清这些概念的意义吗？</p><p>本文将从移动端适配的基础概念出发，探究移动端适配各种问题的解决方案和实现原理。</p><h2 id="一、英寸"><a href="#一、英寸" class="headerlink" title="一、英寸"></a>一、英寸</h2><p>一般用英寸描述屏幕的物理大小，如电脑显示器的<code>17</code>、<code>22</code>，手机显示器的<code>4.8</code>、<code>5.7</code>等使用的单位都是英寸。</p><p>需要注意，上面的尺寸都是屏幕对角线的长度：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-f69212b35546a5fb8d97934da5274ff0_hd.jpg" alt="img"></p><p>英寸(<code>inch</code>,缩写为<code>in</code>)在荷兰语中的本意是大拇指，一英寸就是指甲底部普通人拇指的宽度。</p><p>英寸和厘米的换算：<code>1英寸 = 2.54 厘米</code></p><h2 id="二、分辨率"><a href="#二、分辨率" class="headerlink" title="二、分辨率"></a>二、分辨率</h2><h3 id="2-1-像素"><a href="#2-1-像素" class="headerlink" title="2.1 像素"></a>2.1 像素</h3><p>像素即一个小方块，它具有特定的位置和颜色。</p><p>图片、电子屏幕（手机、电脑）就是由无数个具有特定颜色和特定位置的小方块拼接而成。</p><p>像素可以作为图片或电子屏幕的最小组成单位。</p><p>下面我们使用<code>sketch</code>打开一张图片：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-7ba4697c8f8e9879a757a8ab82407ba6_hd.jpg" alt="img"></p><p>将这些图片放大即可看到这些像素点：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-6a16f970f38154410d6e07a13dac7cb5_hd.jpg" alt="img"></p><p>通常我们所说的分辨率有两种，屏幕分辨率和图像分辨率。</p><h3 id="2-2-屏幕分辨率"><a href="#2-2-屏幕分辨率" class="headerlink" title="2.2 屏幕分辨率"></a>2.2 屏幕分辨率</h3><p>屏幕分辨率指一个屏幕具体由多少个像素点组成。</p><p>下面是<code>apple</code>的官网上对手机分辨率的描述：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-07bd041bbabb54c90bbcc52d5a8374a1_hd.jpg" alt="img"></p><p><code>iPhone XS Max</code> 和 <code>iPhone SE</code>的分辨率分别为<code>2688 x 1242</code>和<code>1136 x 640</code>。这表示手机分别在垂直和水平上所具有的像素点数。</p><p>当然分辨率高不代表屏幕就清晰，屏幕的清晰程度还与尺寸有关。</p><h3 id="2-3-图像分辨率"><a href="#2-3-图像分辨率" class="headerlink" title="2.3 图像分辨率"></a>2.3 图像分辨率</h3><p>我们通常说的<code>图片分辨率</code>其实是指图片含有的<code>像素数</code>，比如一张图片的分辨率为<code>800 x 400</code>。这表示图片分别在垂直和水平上所具有的像素点数为<code>800</code>和<code>400</code>。</p><p>同一尺寸的图片，分辨率越高，图片越清晰。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-8eb5bc21f6e20aef319b39147d4a3066_hd.jpg" alt="img"></p><h3 id="2-4-PPI"><a href="#2-4-PPI" class="headerlink" title="2.4 PPI"></a>2.4 PPI</h3><p><code>PPI(Pixel Per Inch)</code>：每英寸包括的像素数。</p><p><code>PPI</code>可以用于描述屏幕的清晰度以及一张图片的质量。</p><p>使用<code>PPI</code>描述图片时，<code>PPI</code>越高，图片质量越高，使用<code>PPI</code>描述屏幕时，<code>PPI</code>越高，屏幕越清晰。</p><p>在上面描述手机分辨率的图片中，我们可以看到：<code>iPhone XS Max</code> 和 <code>iPhone SE</code>的<code>PPI</code>分别为<code>458</code>和<code>326</code>，这足以证明前者的屏幕更清晰。</p><p>由于手机尺寸为手机对角线的长度，我们通常使用如下的方法计算<code>PPI</code>:</p><p>$$ \frac{\sqrt{水平像素点数^2+垂直像素点数^2}}{尺寸}$$</p><p><code>iPhone 6</code>的<code>PPI</code>为 $ \frac{\sqrt{1334^2+750^2}}{4.7}=325.6$，那它每英寸约含有<code>326</code>个物理像素点。</p><h3 id="2-5-DPI"><a href="#2-5-DPI" class="headerlink" title="2.5 DPI"></a>2.5 DPI</h3><p><code>DPI(Dot Per Inch)</code>：即每英寸包括的点数。</p><p>这里的点是一个抽象的单位，它可以是屏幕像素点、图片像素点也可以是打印机的墨点。</p><p>平时你可能会看到使用<code>DPI</code>来描述图片和屏幕，这时的<code>DPI</code>应该和<code>PPI</code>是等价的，<code>DPI</code>最常用的是用于描述打印机，表示打印机每英寸可以打印的点数。</p><p>一张图片在屏幕上显示时，它的像素点数是规则排列的，每个像素点都有特定的位置和颜色。</p><p>当使用打印机进行打印时，打印机可能不会规则的将这些点打印出来，而是使用一个个打印点来呈现这张图像，这些打印点之间会有一定的空隙，这就是<code>DPI</code>所描述的：打印点的密度。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-f955af7fbe15aef2b9d1adce784f3183_hd.jpg" alt="img"></p><p>在上面的图像中我们可以清晰的看到，打印机是如何使用墨点来打印一张图像。</p><p>所以，打印机的<code>DPI</code>越高，打印图像的精细程度就越高，同时这也会消耗更多的墨点和时间。</p><h2 id="三、设备独立像素"><a href="#三、设备独立像素" class="headerlink" title="三、设备独立像素"></a>三、设备独立像素</h2><p>实际上，上面我们描述的像素都是<code>物理像素</code>，即设备上真实的物理单元。</p><p>下面我们来看看<code>设备独立像素</code>究竟是如何产生的：</p><p>智能手机发展非常之快，在几年之前，我们还用着分辨率非常低的手机，比如下面左侧的白色手机，它的分辨率是<code>320x480</code>，我们可以在上面浏览正常的文字、图片等等。</p><p>但是，随着科技的发展，低分辨率的手机已经不能满足我们的需求了。很快，更高分辨率的屏幕诞生了，比如下面的黑色手机，它的分辨率是<code>640x940</code>，正好是白色手机的两倍。</p><p>理论上来讲，在白色手机上相同大小的图片和文字，在黑色手机上会被缩放一倍，因为它的分辨率提高了一倍。这样，岂不是后面出现更高分辨率的手机，页面元素会变得越来越小吗？</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-b0031ba3baf8ef17d73289e97e88c717_hd.jpg" alt="img"></p><p>然而，事实并不是这样的，我们现在使用的智能手机，不管分辨率多高，他们所展示的界面比例都是基本类似的。乔布斯在<code>iPhone4</code>的发布会上首次提出了<code>Retina Display</code>(视网膜屏幕)的概念，它正是解决了上面的问题，这也使它成为一款跨时代的手机。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-3a66fbf62bc3d92fa5eedc059d0c85ea_hd.jpg" alt="img"></p><p>在<code>iPhone4</code>使用的视网膜屏幕中，把<code>2x2</code>个像素当<code>1</code>个像素使用，这样让屏幕看起来更精致，但是元素的大小却不会改变。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-677b3aeb56ae1db5b7e92daaa28a5c64_hd.jpg" alt="img"></p><p>如果黑色手机使用了视网膜屏幕的技术，那么显示结果应该是下面的情况，比如列表的宽度为<code>300</code>个像素，那么在一条水平线上，白色手机会用<code>300</code>个物理像素去渲染它，而黑色手机实际上会用<code>600</code>个物理像素去渲染它。</p><p>我们必须用一种单位来同时告诉不同分辨率的手机，它们在界面上显示元素的大小是多少，这个单位就是设备独立像素(<code>Device Independent Pixels</code>)简称<code>DIP</code>或<code>DP</code>。上面我们说，列表的宽度为<code>300</code>个像素，实际上我们可以说：列表的宽度为<code>300</code>个设备独立像素。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-b6f8254d0fbf691d9700227924017061_hd.jpg" alt="img"></p><p>打开<code>chrome</code>的开发者工具，我们可以模拟各个手机型号的显示情况，每种型号上面会显示一个尺寸，比如<code>iPhone X</code>显示的尺寸是<code>375x812</code>，实际<code>iPhone X</code>的分辨率会比这高很多，这里显示的就是设备独立像素。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-089758df9a8331d99760203c40d692eb_hd.jpg" alt="img"></p><h3 id="3-1-设备像素比"><a href="#3-1-设备像素比" class="headerlink" title="3.1 设备像素比"></a>3.1 设备像素比</h3><p>设备像素比<code>device pixel ratio</code>简称<code>dpr</code>，即物理像素和设备独立像素的比值。</p><p>在<code>web</code>中，浏览器为我们提供了<code>window.devicePixelRatio</code>来帮助我们获取<code>dpr</code>。</p><p>在<code>css</code>中，可以使用媒体查询<code>min-device-pixel-ratio</code>，区分<code>dpr</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> (-webkit-min-device-pixel-ratio: <span class="number">2</span>),(min-device-pixel-ratio: <span class="number">2</span>)&#123; &#125;</span><br></pre></td></tr></table></figure><p>在<code>React Native</code>中，我们也可以使用<code>PixelRatio.get()</code>来获取<code>DPR</code>。</p><p>当然，上面的规则也有例外，<code>iPhone 6、7、8 Plus</code>的实际物理像素是<code>1080 x 1920</code>，在开发者工具中我们可以看到：它的设备独立像素是<code>414 x 736</code>，设备像素比为<code>3</code>，设备独立像素和设备像素比的乘积并不等于<code>1080 x 1920</code>，而是等于<code>1242 x 2208</code>。</p><p>实际上，手机会自动把<code>1242 x 2208</code>个像素点塞进<code>1080 * 1920</code>个物理像素点来渲染，我们不用关心这个过程，而<code>1242 x 2208</code>被称为屏幕的<code>设计像素</code>。我们开发过程中也是以这个<code>设计像素</code>为准。</p><p>实际上，从苹果提出视网膜屏幕开始，才出现设备像素比这个概念，因为在这之前，移动设备都是直接使用物理像素来进行展示。</p><p>紧接着，<code>Android</code>同样使用了其他的技术方案来实现<code>DPR</code>大于<code>1</code>的屏幕，不过原理是类似的。由于<code>Android</code>屏幕尺寸非常多、分辨率高低跨度非常大，不像苹果只有它自己的几款固定设备、尺寸。所以，为了保证各种设备的显示效果，<code>Android</code>按照设备的像素密度将设备分成了几个区间：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-7627f4a74c11bb340f2128af6d400264_hd.jpg" alt="img"></p><p>当然，所有的<code>Android</code>设备不一定严格按照上面的分辨率，每个类型可能对应几种不同分辨率，所以，每个<code>Android</code>手机都能根据给定的区间范围，确定自己的<code>DPR</code>，从而拥有类似的显示。当然，仅仅是类似，由于各个设备的尺寸、分辨率上的差异，设备独立像素也不会完全相等，所以各种<code>Android</code>设备仍然不能做到在展示上完全相等。</p><h3 id="3-2-移动端开发"><a href="#3-2-移动端开发" class="headerlink" title="3.2 移动端开发"></a>3.2 移动端开发</h3><p>在<code>iOS</code>、<code>Android</code>和<code>React Native</code>开发中样式单位其实都使用的是设备独立像素。</p><p><code>iOS</code>的尺寸单位为<code>pt</code>，<code>Android</code>的尺寸单位为<code>dp</code>，<code>React Native</code>中没有指定明确的单位，它们其实都是设备独立像素<code>dp</code>。</p><p>在使用<code>React Native</code>开发<code>App</code>时，<code>UI</code>给我们的原型图一般是基于<code>iphone6</code>的像素给定的。</p><p>为了适配所有机型，我们在写样式时需要把物理像素转换为设备独立像素：例如：如果给定一个元素的高度为<code>200px</code>(这里的<code>px</code>指物理像素，非<code>CSS</code>像素)，<code>iphone6</code>的设备像素比为<code>2</code>，我们给定的<code>height</code>应为<code>200px/2=100dp</code>。</p><p>当然，最好的是，你可以和设计沟通好，所有的<code>UI</code>图都按照设备独立像素来出。</p><p>我们还可以在代码(<code>React Native</code>)中进行<code>px</code>和<code>dp</code>的转换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;PixelRatio &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dpr = PixelRatio.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * px转换为dp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pxConvertTodp</span>(<span class="params">px</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> px / dpr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dp转换为px</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">dpConvertTopx</span>(<span class="params">dp</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> PixelRatio.getPixelSizeForLayoutSize(dp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-WEB端开发"><a href="#3-3-WEB端开发" class="headerlink" title="3.3 WEB端开发"></a>3.3 WEB端开发</h3><p>在写<code>CSS</code>时，我们用到最多的单位是<code>px</code>，即<code>CSS像素</code>，当页面缩放比例为<code>100%</code>时，一个<code>CSS像素</code>等于一个设备独立像素。</p><p>但是<code>CSS像素</code>是很容易被改变的，当用户对浏览器进行了放大，<code>CSS像素</code>会被放大，这时一个<code>CSS像素</code>会跨越更多的物理像素。</p><p><code>页面的缩放系数 = CSS像素 / 设备独立像素</code>。</p><h3 id="3-4-关于屏幕"><a href="#3-4-关于屏幕" class="headerlink" title="3.4 关于屏幕"></a>3.4 关于屏幕</h3><p>这里多说两句<code>Retina</code>屏幕，因为我在很多文章中看到对<code>Retina</code>屏幕的误解。</p><p><code>Retina</code>屏幕只是苹果提出的一个营销术语：</p><blockquote><p>在普通的使用距离下，人的肉眼无法分辨单个的像素点。</p></blockquote><p>为什么强调<code>普通的使用距离下</code>呢？我们来看一下它的计算公式：</p><p>$$ a=2arctan(h/2d) $$</p><p><code>a</code>代表人眼视角，<code>h</code>代表像素间距，<code>d</code>代表肉眼与屏幕的距离，符合以上条件的屏幕可以使肉眼看不见单个物理像素点。</p><p>它不能单纯的表达分辨率和<code>PPI</code>，只能一种表达视觉效果。</p><p>让多个物理像素渲染一个独立像素只是<code>Retina</code>屏幕为了达到效果而使用的一种技术。而不是所有<code>DPR &gt; 1</code>的屏幕就是<code>Retina</code>屏幕。</p><p>比如：给你一块超大尺寸的屏幕，即使它的<code>PPI</code>很高，<code>DPR</code>也很高，在近距离你也能看清它的像素点，这就不算<code>Retina</code>屏幕。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-eb0cc98dca4962512c0c9bda1e03a4ce_hd.jpg" alt="img"></p><p>我们经常见到用<code>K</code>和<code>P</code>这个单位来形容屏幕：</p><p><code>P</code>代表的就是屏幕纵向的像素个数，<code>1080P</code>即纵向有<code>1080</code>个像素，分辨率为<code>1920X1080</code>的屏幕就属于<code>1080P</code>屏幕。</p><p>我们平时所说的高清屏其实就是屏幕的物理分辨率达到或超过<code>1920X1080</code>的屏幕。</p><p><code>K</code>代表屏幕横向有几个<code>1024</code>个像素，一般来讲横向像素超过<code>2048</code>就属于<code>2K</code>屏，横向像素超过<code>4096</code>就属于<code>4K</code>屏。</p><h2 id="四、视口"><a href="#四、视口" class="headerlink" title="四、视口"></a>四、视口</h2><p>视口(<code>viewport</code>)代表当前可见的计算机图形区域。在<code>Web</code>浏览器术语中，通常与浏览器窗口相同，但不包括浏览器的<code>UI</code>， 菜单栏等——即指你正在浏览的文档的那一部分。</p><p>一般我们所说的视口共包括三种：布局视口、视觉视口和理想视口，它们在屏幕适配中起着非常重要的作用。</p><h3 id="4-1-布局视口"><a href="#4-1-布局视口" class="headerlink" title="4.1 布局视口"></a>4.1 布局视口</h3><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-e762442d4873fb63c8406b0455761635_hd.jpg" alt="img"></p><p>布局视口(<code>layout viewport</code>)：当我们以百分比来指定一个元素的大小时，它的计算值是由这个元素的包含块计算而来的。当这个元素是最顶级的元素时，它就是基于布局视口来计算的。</p><p>所以，布局视口是网页布局的基准窗口，在<code>PC</code>浏览器上，布局视口就等于当前浏览器的窗口大小（不包括<code>borders</code> 、<code>margins</code>、滚动条）。</p><p>在移动端，布局视口被赋予一个默认值，大部分为<code>980px</code>，这保证<code>PC</code>的网页可以在手机浏览器上呈现，但是非常小，用户可以手动对网页进行放大。</p><p>我们可以通过调用<code>document.documentElement.clientWidth / clientHeight</code>来获取布局视口大小。</p><h3 id="4-2-视觉视口"><a href="#4-2-视觉视口" class="headerlink" title="4.2 视觉视口"></a>4.2 视觉视口</h3><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-8bcbdbad7a33419d14a59147ee12ea0f_hd.jpg" alt="img"></p><p>视觉视口(<code>visual viewport</code>)：用户通过屏幕真实看到的区域。</p><p>视觉视口默认等于当前浏览器的窗口大小（包括滚动条宽度）。</p><p>当用户对浏览器进行缩放时，不会改变布局视口的大小，所以页面布局是不变的，但是缩放会改变视觉视口的大小。</p><p>例如：用户将浏览器窗口放大了<code>200%</code>，这时浏览器窗口中的<code>CSS像素</code>会随着视觉视口的放大而放大，这时一个<code>CSS</code>像素会跨越更多的物理像素。</p><p>所以，布局视口会限制你的<code>CSS</code>布局而视觉视口决定用户具体能看到什么。</p><p>我们可以通过调用<code>window.innerWidth / innerHeight</code>来获取视觉视口大小。</p><h3 id="4-3-理想视口"><a href="#4-3-理想视口" class="headerlink" title="4.3 理想视口"></a>4.3 理想视口</h3><p><img src="https://pic4.zhimg.com/80/v2-089758df9a8331d99760203c40d692eb_hd.jpg" alt="img"></p><p>布局视口在移动端展示的效果并不是一个理想的效果，所以理想视口(<code>ideal viewport</code>)就诞生了：网站页面在移动端展示的理想大小。</p><p>如上图，我们在描述设备独立像素时曾使用过这张图，在浏览器调试移动端时页面上给定的像素大小就是理想视口大小，它的单位正是设备独立像素。</p><p>上面在介绍<code>CSS像素时</code>曾经提到<code>页面的缩放系数 = CSS像素 / 设备独立像素</code>，实际上说<code>页面的缩放系数 = 理想视口宽度 / 视觉视口宽度</code>更为准确。</p><p>所以，当页面缩放比例为<code>100%</code>时，<code>CSS像素 = 设备独立像素</code>，<code>理想视口 = 视觉视口</code>。</p><p>我们可以通过调用<code>screen.width / height</code>来获取理想视口大小。</p><h3 id="4-4-Meta-viewport"><a href="#4-4-Meta-viewport" class="headerlink" title="4.4 Meta viewport"></a>4.4 Meta viewport</h3><p><meta> 元素表示那些不能由其它HTML元相关元素之一表示的任何元数据信息，它可以告诉浏览器如何解析页面。</p><p>我们可以借助<code>&lt;meta&gt;</code>元素的<code>viewport</code>来帮助我们设置视口、缩放等，从而让移动端得到更好的展示效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是<code>viewport</code>的一个配置，我们来看看它们的具体含义：</p><p><code>Value</code>| 可能值| 描述 -|-|- <code>width</code>| 正整数或<code>device-width</code> | 以<code>pixels</code>（像素）为单位， 定义布局视口的宽度。 <code>height</code>| 正整数或<code>device-height</code> | 以<code>pixels</code>（像素）为单位， 定义布局视口的高度。 <code>initial-scale</code>| <code>0.0 - 10.0</code>|定义页面初始缩放比率。 <code>minimum-scale</code>| <code>0.0 - 10.0</code>|定义缩放的最小值；必须小于或等于<code>maximum-scale</code>的值。 <code>maximum-scale</code>| <code>0.0 - 10.0</code>|定义缩放的最大值；必须大于或等于<code>minimum-scale</code>的值。 <code>user-scalable</code>| 一个布尔值（<code>yes</code>或者<code>no</code>）| 如果设置为 <code>no</code>，用户将不能放大或缩小网页。默认值为 yes。</p><h3 id="4-5-移动端适配"><a href="#4-5-移动端适配" class="headerlink" title="4.5 移动端适配"></a>4.5 移动端适配</h3><p>为了在移动端让页面获得更好的显示效果，我们必须让布局视口、视觉视口都尽可能等于理想视口。</p><p><code>device-width</code>就等于理想视口的宽度，所以设置<code>width=device-width</code>就相当于让布局视口等于理想视口。</p><p>由于<code>initial-scale = 理想视口宽度 / 视觉视口宽度</code>，所以我们设置<code>initial-scale=1;</code>就相当于让视觉视口等于理想视口。</p><p>这时，1个<code>CSS</code>像素就等于1个设备独立像素，而且我们也是基于理想视口来进行布局的，所以呈现出来的页面布局在各种设备上都能大致相似。</p><h3 id="4-6-缩放"><a href="#4-6-缩放" class="headerlink" title="4.6 缩放"></a>4.6 缩放</h3><p>上面提到<code>width</code>可以决定布局视口的宽度，实际上它并不是布局视口的唯一决定性因素，设置<code>initial-scale</code>也有肯能影响到布局视口，因为布局视口宽度取的是<code>width</code>和视觉视口宽度的最大值。</p><p>例如：若手机的理想视口宽度为<code>400px</code>，设置<code>width=device-width</code>，<code>initial-scale=2</code>，此时<code>视觉视口宽度 = 理想视口宽度 / initial-scale</code>即<code>200px</code>，布局视口取两者最大值即<code>device-width</code> <code>400px</code>。</p><p>若设置<code>width=device-width</code>，<code>initial-scale=0.5</code>，此时<code>视觉视口宽度 = 理想视口宽度 / initial-scale</code>即<code>800px</code>，布局视口取两者最大值即<code>800px</code>。</p><h3 id="4-7-获取浏览器大小"><a href="#4-7-获取浏览器大小" class="headerlink" title="4.7 获取浏览器大小"></a>4.7 获取浏览器大小</h3><p>浏览器为我们提供的获取窗口大小的<code>API</code>有很多，下面我们再来对比一下：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-c53c9b11993a28135ec60afc67be68af_hd.jpg" alt="img"></p><ul><li><code>window.innerHeight</code>：获取浏览器视觉视口高度（包括垂直滚动条）。</li><li><code>window.outerHeight</code>：获取浏览器窗口外部的高度。表示整个浏览器窗口的高度，包括侧边栏、窗口镶边和调正窗口大小的边框。</li><li><code>window.screen.Height</code>：获取获屏幕取理想视口高度，这个数值是固定的，<code>设备的分辨率/设备像素比</code></li><li><code>window.screen.availHeight</code>：浏览器窗口可用的高度。</li><li><code>document.documentElement.clientHeight</code>：获取浏览器布局视口高度，包括内边距，但不包括垂直滚动条、边框和外边距。</li><li><code>document.documentElement.offsetHeight</code>：包括内边距、滚动条、边框和外边距。</li><li><code>document.documentElement.scrollHeight</code>：在不使用滚动条的情况下适合视口中的所有内容所需的最小宽度。测量方式与<code>clientHeight</code>相同：它包含元素的内边距，但不包括边框，外边距或垂直滚动条。</li></ul><h2 id="五、1px问题"><a href="#五、1px问题" class="headerlink" title="五、1px问题"></a>五、1px问题</h2><p>为了适配各种屏幕，我们写代码时一般使用设备独立像素来对页面进行布局。</p><p>而在设备像素比大于<code>1</code>的屏幕上，我们写的<code>1px</code>实际上是被多个物理像素渲染，这就会出现<code>1px</code>在有些屏幕上看起来很粗的现象。</p><h3 id="5-1-border-image"><a href="#5-1-border-image" class="headerlink" title="5.1 border-image"></a>5.1 border-image</h3><p>基于<code>media</code>查询判断不同的设备像素比给定不同的<code>border-image</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border_1px</span>&#123;</span><br><span class="line">          <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="selector-class">.border_1px</span>&#123;</span><br><span class="line">                <span class="attribute">border-bottom</span>: none;</span><br><span class="line">                <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">0</span>;</span><br><span class="line">                <span class="attribute">border-image</span>: <span class="built_in">url</span>(../img/1pxline.png) <span class="number">0</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> stretch;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-background-image"><a href="#5-2-background-image" class="headerlink" title="5.2 background-image"></a>5.2 background-image</h3><p>和<code>border-image</code>类似，准备一张符合条件的边框背景图，模拟在背景上。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border_1px</span>&#123;</span><br><span class="line">          <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="selector-class">.border_1px</span>&#123;</span><br><span class="line">                <span class="attribute">background</span>: <span class="built_in">url</span>(../img/1pxline.png) repeat-x left bottom;</span><br><span class="line">                <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>上面两种都需要单独准备图片，而且圆角不是很好处理，但是可以应对大部分场景。</p><h3 id="5-3-伪类-transform"><a href="#5-3-伪类-transform" class="headerlink" title="5.3 伪类 + transform"></a>5.3 伪类 + transform</h3><p>基于<code>media</code>查询判断不同的设备像素比对线条进行缩放：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">          <span class="attribute">transform-origin</span>: <span class="number">50%</span> <span class="number">0%</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.5);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="selector-class">.border_1px</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">                <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(0.33);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这种方式可以满足各种场景，如果需要满足圆角，只需要给伪类也加上<code>border-radius</code>即可。</p><h3 id="5-4-svg"><a href="#5-4-svg" class="headerlink" title="5.4 svg"></a>5.4 svg</h3><p>上面我们<code>border-image</code>和<code>background-image</code>都可以模拟<code>1px</code>边框，但是使用的都是位图，还需要外部引入。</p><p>借助<code>PostCSS</code>的<code>postcss-write-svg</code>我们能直接使用<code>border-image</code>和<code>background-image</code>创建<code>svg</code>的<code>1px</code>边框：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">svg</span> border_1px &#123; </span><br><span class="line">  <span class="selector-tag">height</span>: 2<span class="selector-tag">px</span>; </span><br><span class="line">  @<span class="keyword">rect</span> &#123; </span><br><span class="line">    <span class="selector-tag">fill</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--color</span>, <span class="selector-tag">black</span>); </span><br><span class="line">    <span class="selector-tag">width</span>: 100%; </span><br><span class="line">    <span class="selector-tag">height</span>: 50%; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line"><span class="selector-class">.example</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid transparent; <span class="attribute">border-image</span>: <span class="built_in">svg</span>(border_1px param(--color #00b1ff)) <span class="number">2</span> <span class="number">2</span> stretch; &#125;</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.example</span> &#123; <span class="attribute">border</span>: <span class="number">1px</span> solid transparent; <span class="attribute">border-image</span>: <span class="built_in">url</span>(<span class="string">"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' height='2px'%3E%3Crect fill='%2300b1ff' width='100%25' height='50%25'/%3E%3C/svg%3E"</span>) <span class="number">2</span> <span class="number">2</span> stretch; &#125;</span><br></pre></td></tr></table></figure><p>上面的方案是大漠在他的文章中推荐使用的，基本可以满足所有场景，而且不需要外部引入，这是我个人比较喜欢的一种方案。</p><h3 id="5-5-设置viewport"><a href="#5-5-设置viewport" class="headerlink" title="5.5 设置viewport"></a>5.5 设置viewport</h3><p>通过设置缩放，让<code>CSS</code>像素等于真正的物理像素。</p><p>例如：当设备像素比为<code>3</code>时，我们将页面缩放<code>1/3</code>倍，这时<code>1px</code>等于一个真正的屏幕像素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scale = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    <span class="keyword">const</span> viewport = <span class="built_in">document</span>.querySelector(<span class="string">'meta[name="viewport"]'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!viewport) &#123;</span><br><span class="line">        viewport = <span class="built_in">document</span>.createElement(<span class="string">'meta'</span>);</span><br><span class="line">        viewport.setAttribute(<span class="string">'name'</span>, <span class="string">'viewport'</span>);</span><br><span class="line">        <span class="built_in">window</span>.document.head.appendChild(viewport);</span><br><span class="line">    &#125;</span><br><span class="line">    viewport.setAttribute(<span class="string">'content'</span>, <span class="string">'width=device-width,user-scalable=no,initial-scale='</span> + scale + <span class="string">',maximum-scale='</span> + scale + <span class="string">',minimum-scale='</span> + scale);</span><br></pre></td></tr></table></figure><p>实际上，上面这种方案是早先<code>flexible</code>采用的方案。</p><p>当然，这样做是要付出代价的，这意味着你页面上所有的布局都要按照物理像素来写。这显然是不现实的，这时，我们可以借助<code>flexible</code>或<code>vw、vh</code>来帮助我们进行适配。</p><h2 id="六、移动端适配方案"><a href="#六、移动端适配方案" class="headerlink" title="六、移动端适配方案"></a>六、移动端适配方案</h2><p>尽管我们可以使用设备独立像素来保证各个设备在不同手机上显示的效果类似，但这并不能保证它们显示完全一致，我们需要一种方案来让设计稿得到更完美的适配。</p><h3 id="6-1-flexible方案"><a href="#6-1-flexible方案" class="headerlink" title="6.1 flexible方案"></a>6.1 flexible方案</h3><p><code>flexible</code>方案是阿里早期开源的一个移动端适配解决方案，引用<code>flexible</code>后，我们在页面上统一使用<code>rem</code>来布局。</p><p>它的核心代码非常简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span></span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">'px'</span></span><br><span class="line">&#125;</span><br><span class="line">setRemUnit();</span><br></pre></td></tr></table></figure><p><code>rem</code> 是相对于<code>html</code>节点的<code>font-size</code>来做计算的。</p><p>我们通过设置<code>document.documentElement.style.fontSize</code>就可以统一整个页面的布局标准。</p><p>上面的代码中，将<code>html</code>节点的<code>font-size</code>设置为页面<code>clientWidth</code>(布局视口)的<code>1/10</code>，即<code>1rem</code>就等于页面布局视口的<code>1/10</code>，这就意味着我们后面使用的<code>rem</code>都是按照页面比例来计算的。</p><p>这时，我们只需要将<code>UI</code>出的图转换为<code>rem</code>即可。</p><p>以<code>iPhone6</code>为例：布局视口为<code>375px</code>，则<code>1rem = 37.5px</code>，这时<code>UI</code>给定一个元素的宽为<code>75px</code>（设备独立像素），我们只需要将它设置为<code>75 / 37.5 = 2rem</code>。</p><p>当然，每个布局都要计算非常繁琐，我们可以借助<code>PostCSS</code>的<code>px2rem</code>插件来帮助我们完成这个过程。</p><p>下面的代码可以保证在页面大小变化时，布局可以自适应，当触发了<code>window</code>的<code>resize</code>和<code>pageShow</code>事件之后自动调整<code>html</code>的<code>fontSize</code>大小。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reset rem unit on page resize</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, setRemUnit)<span class="built_in">window</span>.addEventListener(<span class="string">'pageshow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">      setRemUnit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>由于<code>viewport</code>单位得到众多浏览器的兼容，上面这种方案现在已经被官方弃用：</p><blockquote><p>lib-flexible这个过渡方案已经可以放弃使用，不管是现在的版本还是以前的版本，都存有一定的问题。建议大家开始使用viewport来替代此方案。</p></blockquote><p>下面我们来看看现在最流行的<code>vh、vw</code>方案。</p><h3 id="6-2-vh、vw方案"><a href="#6-2-vh、vw方案" class="headerlink" title="6.2 vh、vw方案"></a>6.2 vh、vw方案</h3><p><code>vh、vw</code>方案即将视觉视口宽度 <code>window.innerWidth</code>和视觉视口高度 <code>window.innerHeight</code> 等分为 100 份。</p><p>上面的<code>flexible</code>方案就是模仿这种方案，因为早些时候<code>vw</code>还没有得到很好的兼容。</p><ul><li><code>vw(Viewport&#39;s width)</code>：<code>1vw</code>等于视觉视口的<code>1%</code></li><li><code>vh(Viewport&#39;s height)</code> :<code>1vh</code> 为视觉视口高度的<code>1%</code></li><li><code>vmin</code> : <code>vw</code> 和 <code>vh</code> 中的较小值</li><li><code>vmax</code> : 选取 <code>vw</code> 和 <code>vh</code> 中的较大值</li></ul><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-6f3e73974ac5a1d7dfeb7ecef1bf1486_hd.jpg" alt="img"></p><p>如果视觉视口为<code>375px</code>，那么<code>1vw = 3.75px</code>，这时<code>UI</code>给定一个元素的宽为<code>75px</code>（设备独立像素），我们只需要将它设置为<code>75 / 3.75 = 20vw</code>。</p><p>这里的比例关系我们也不用自己换算，我们可以使用<code>PostCSS</code>的 <code>postcss-px-to-viewport</code> 插件帮我们完成这个过程。写代码时，我们只需要根据<code>UI</code>给的设计图写<code>px</code>单位即可。</p><p>当然，没有一种方案是十全十美的，<code>vw</code>同样有一定的缺陷：</p><ul><li><code>px</code>转换成<code>vw</code>不一定能完全整除，因此有一定的像素差。</li><li>比如当容器使用<code>vw</code>，<code>margin</code>采用<code>px</code>时，很容易造成整体宽度超过<code>100vw</code>，从而影响布局效果。当然我们也是可以避免的，例如使用<code>padding</code>代替<code>margin</code>，结合<code>calc()</code>函数使用等等…</li></ul><h2 id="七、适配iPhoneX"><a href="#七、适配iPhoneX" class="headerlink" title="七、适配iPhoneX"></a>七、适配iPhoneX</h2><p><code>iPhoneX</code>的出现将手机的颜值带上了一个新的高度，它取消了物理按键，改成了底部的小黑条，但是这样的改动给开发者适配移动端又增加了难度。</p><h3 id="7-1-安全区域"><a href="#7-1-安全区域" class="headerlink" title="7.1 安全区域"></a>7.1 安全区域</h3><p>在<code>iPhoneX</code>发布后，许多厂商相继推出了具有边缘屏幕的手机。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-3376005beb36dcff27c01e2fdcd6e74d_hd.jpg" alt="img"></p><p>这些手机和普通手机在外观上无外乎做了三个改动：圆角（<code>corners</code>）、刘海（<code>sensor housing</code>）和小黑条（<code>Home Indicator</code>）。为了适配这些手机，安全区域这个概念变诞生了：安全区域就是一个不受上面三个效果的可视窗口范围。</p><p>为了保证页面的显示效果，我们必须把页面限制在安全范围内，但是不影响整体效果。</p><h3 id="7-2-viewport-fit"><a href="#7-2-viewport-fit" class="headerlink" title="7.2 viewport-fit"></a>7.2 viewport-fit</h3><p><code>viewport-fit</code>是专门为了适配<code>iPhoneX</code>而诞生的一个属性，它用于限制网页如何在安全区域内进行展示。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-06227012b507379091529fb76e7310e8_hd.jpg" alt="img"></p><p><code>contain</code>: 可视窗口完全包含网页内容</p><p><code>cover</code>：网页内容完全覆盖可视窗口</p><p>默认情况下或者设置为<code>auto</code>和<code>contain</code>效果相同。</p><h3 id="7-3-env、constant"><a href="#7-3-env、constant" class="headerlink" title="7.3 env、constant"></a>7.3 env、constant</h3><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-f33672088cb1799d890d8ff2637aa0a3_hd.jpg" alt="img"></p><p>我们需要将顶部和底部合理的摆放在安全区域内，<code>iOS11</code>新增了两个<code>CSS</code>函数<code>env、constant</code>，用于设定安全区域与边界的距离。</p><p>函数内部可以是四个常量：</p><ul><li><code>safe-area-inset-left</code>：安全区域距离左边边界距离</li><li><code>safe-area-inset-right</code>：安全区域距离右边边界距离</li><li><code>safe-area-inset-top</code>：安全区域距离顶部边界距离</li><li><code>safe-area-inset-bottom</code>：安全区域距离底部边界距离</li></ul><p>注意：我们必须指定<code>viweport-fit</code>后才能使用这两个函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"viewport-fit=cover"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>constant</code>在<code>iOS &lt; 11.2</code>的版本中生效，<code>env</code>在<code>iOS &gt;= 11.2</code>的版本中生效，这意味着我们往往要同时设置他们，将页面限制在安全区域内：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当使用底部固定导航栏时，我们要为他们设置<code>padding</code>值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">constant</span>(safe-area-inset-bottom);</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="built_in">env</span>(safe-area-inset-bottom);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、横屏适配"><a href="#八、横屏适配" class="headerlink" title="八、横屏适配"></a>八、横屏适配</h2><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-8445a3877e495f77c2148014856ea2ef_hd.jpg" alt="img"></p><p>很多视口我们要对横屏和竖屏显示不同的布局，所以我们需要检测在不同的场景下给定不同的样式：</p><h3 id="8-1-JavaScript检测横屏"><a href="#8-1-JavaScript检测横屏" class="headerlink" title="8.1 JavaScript检测横屏"></a>8.1 JavaScript检测横屏</h3><p><code>window.orientation</code>:获取屏幕旋转方向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, ()=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">180</span> || <span class="built_in">window</span>.orientation === <span class="number">0</span>) &#123; </span><br><span class="line">      <span class="comment">// 正常方向或屏幕旋转180度</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'竖屏'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.orientation === <span class="number">90</span> || <span class="built_in">window</span>.orientation === <span class="number">-90</span> )&#123; </span><br><span class="line">       <span class="comment">// 屏幕顺时钟旋转90度或屏幕逆时针旋转90度</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'横屏'</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-2-CSS检测横屏"><a href="#8-2-CSS检测横屏" class="headerlink" title="8.2 CSS检测横屏"></a>8.2 CSS检测横屏</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@media screen and (orientation: portrait) &#123;</span><br><span class="line">  <span class="comment">/*竖屏...*/</span></span><br><span class="line">&#125; </span><br><span class="line">@media screen and (orientation: landscape) &#123;</span><br><span class="line">  <span class="comment">/*横屏...*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、图片模糊问题"><a href="#九、图片模糊问题" class="headerlink" title="九、图片模糊问题"></a>九、图片模糊问题</h2><h3 id="9-1-产生原因"><a href="#9-1-产生原因" class="headerlink" title="9.1 产生原因"></a>9.1 产生原因</h3><p>我们平时使用的图片大多数都属于位图（<code>png、jpg...</code>），位图由一个个像素点构成的，每个像素都具有特定的位置和颜色值：</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-c8d07dc1b8592b92dff6f76b78214fce_hd.jpg" alt="img"></p><p>理论上，位图的每个像素对应在屏幕上使用一个物理像素来渲染，才能达到最佳的显示效果。</p><p>而在<code>dpr &gt; 1</code>的屏幕上，位图的一个像素可能由多个物理像素来渲染，然而这些物理像素点并不能被准确的分配上对应位图像素的颜色，只能取近似值，所以相同的图片在<code>dpr &gt; 1</code>的屏幕上就会模糊:</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-584ece27c89dd8fbb76a3c433441b7c3_hd.jpg" alt="img"></p><h3 id="9-2-解决方案"><a href="#9-2-解决方案" class="headerlink" title="9.2 解决方案"></a>9.2 解决方案</h3><p>为了保证图片质量，我们应该尽可能让一个屏幕像素来渲染一个图片像素，所以，针对不同<code>DPR</code>的屏幕，我们需要展示不同分辨率的图片。</p><p>如：在<code>dpr=2</code>的屏幕上展示两倍图<code>(@2x)</code>，在<code>dpr=3</code>的屏幕上展示三倍图<code>(@3x)</code>。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-b2e5c31d2b3ed890dbf1e1082578f6e3_hd.jpg" alt="img"></p><h3 id="9-3-media查询"><a href="#9-3-media查询" class="headerlink" title="9.3 media查询"></a>9.3 media查询</h3><p>使用<code>media</code>查询判断不同的设备像素比来显示不同精度的图片：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span>&#123;</span><br><span class="line">            <span class="attribute">background-image</span>: <span class="built_in">url</span>(conardLi_1x.png);</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="selector-class">.avatar</span>&#123;</span><br><span class="line">                <span class="attribute">background-image</span>: <span class="built_in">url</span>(conardLi_2x.png);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @<span class="keyword">media</span> only screen and (-webkit-min-device-pixel-ratio:<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="selector-class">.avatar</span>&#123;</span><br><span class="line">                <span class="attribute">background-image</span>: <span class="built_in">url</span>(conardLi_3x.png);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><blockquote><p>只适用于背景图</p></blockquote><h3 id="9-4-image-set"><a href="#9-4-image-set" class="headerlink" title="9.4 image-set"></a>9.4 image-set</h3><p>使用<code>image-set</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">-webkit-image-set</span>( <span class="string">"conardLi_1x.png"</span> 1x, <span class="string">"conardLi_2x.png"</span> 2x );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>只适用于背景图</p></blockquote><h3 id="9-5-srcset"><a href="#9-5-srcset" class="headerlink" title="9.5 srcset"></a>9.5 srcset</h3><p>使用<code>img</code>标签的<code>srcset</code>属性，浏览器会自动根据像素密度匹配最佳显示图片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"conardLi_1x.png"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">srcset</span>=<span class="string">" conardLi_2x.png 2x, conardLi_3x.png 3x"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="9-6-JavaScript拼接图片url"><a href="#9-6-JavaScript拼接图片url" class="headerlink" title="9.6 JavaScript拼接图片url"></a>9.6 JavaScript拼接图片url</h3><p>使用<code>window.devicePixelRatio</code>获取设备像素比，遍历所有图片，替换图片地址：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dpr = <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"><span class="keyword">const</span> images =  <span class="built_in">document</span>.querySelectorAll(<span class="string">'img'</span>);</span><br><span class="line">images.forEach(<span class="function">(<span class="params">img</span>)=&gt;</span>&#123;</span><br><span class="line">  img.src.replace(<span class="string">"."</span>, <span class="string">`@<span class="subst">$&#123;dpr&#125;</span>x.`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="9-7-使用svg"><a href="#9-7-使用svg" class="headerlink" title="9.7 使用svg"></a>9.7 使用svg</h3><p><code>SVG</code>的全称是可缩放矢量图（<code>Scalable Vector Graphics</code>）。不同于位图的基于像素，<code>SVG</code>则是属于对图像的形状描述，所以它本质上是文本文件，体积较小，且不管放大多少倍都不会失真。</p><p><img src="../../../Desktop/%E5%8D%9A%E5%AE%A2/%E7%A7%BB%E5%8A%A8%E7%AB%AF/assets/v2-b1c55d17a5fda1cd05c647a377149019_hd.jpg" alt="img"></p><p>除了我们手动在代码中绘制<code>svg</code>，我们还可以像使用位图一样使用<code>svg</code>图片：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"conardLi.svg"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">"data:image/svg+xml;base64,[data]"</span>&gt;</span><br><span class="line"></span><br><span class="line">.avatar &#123;</span><br><span class="line">  background: url(conardLi.svg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://link.zhihu.com/?target=https%3A//99designs.com/blog/tips/ppi-vs-dpi-whats-the-difference/" target="_blank" rel="noopener">https://99designs.com/blog/tips/ppi-vs-dpi-whats-the-difference/</a></li><li><a href="https://link.zhihu.com/?target=https%3A//www.w3cplus.com/css/vw-for-layout.html" target="_blank" rel="noopener">https://www.w3cplus.com/css/vw-for-layout.html</a></li><li><a href="https://link.zhihu.com/?target=https%3A//aotu.io/notes/2017/11/27/iphonex/index.html" target="_blank" rel="noopener">https://aotu.io/notes/2017/11/27/iphonex/index.html</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>希望你阅读本篇文章后可以达到以下几点：</p><ul><li>理清移动端适配常用概念</li><li>理解移动端适配问题产生的原理，至少掌握一种解决方案</li></ul><hr><h1 id="淘宝flexible适配方法"><a href="#淘宝flexible适配方法" class="headerlink" title="淘宝flexible适配方法"></a>淘宝flexible适配方法</h1><p><a href="https://www.w3cplus.com/mobile/lib-flexible-for-html5-layout.html" target="_blank" rel="noopener">原文来源</a></p><p>直接插入到HTML中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">! <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = f.getBoundingClientRect().width;</span><br><span class="line">        b / i &gt; <span class="number">540</span> &amp;&amp; (b = <span class="number">540</span> * i);</span><br><span class="line">        <span class="keyword">var</span> c = b / <span class="number">10</span>;</span><br><span class="line">        f.style.fontSize = c + <span class="string">"px"</span>, k.rem = a.rem = c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> d, e = a.document,</span><br><span class="line">        f = e.documentElement,</span><br><span class="line">        g = e.querySelector(<span class="string">'meta[name="viewport"]'</span>),</span><br><span class="line">        h = e.querySelector(<span class="string">'meta[name="flexible"]'</span>),</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        j = <span class="number">0</span>,</span><br><span class="line">        k = b.flexible || (b.flexible = &#123;&#125;);</span><br><span class="line">    <span class="keyword">if</span> (g) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">"将根据已有的meta标签来设置缩放比例"</span>);</span><br><span class="line">        <span class="keyword">var</span> l = g.getAttribute(<span class="string">"content"</span>).match(<span class="regexp">/initial\-scale=([\d\.]+)/</span>);</span><br><span class="line">        l &amp;&amp; (j = <span class="built_in">parseFloat</span>(l[<span class="number">1</span>]), i = <span class="built_in">parseInt</span>(<span class="number">1</span> / j))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h) &#123;</span><br><span class="line">        <span class="keyword">var</span> m = h.getAttribute(<span class="string">"content"</span>);</span><br><span class="line">        <span class="keyword">if</span> (m) &#123;</span><br><span class="line">            <span class="keyword">var</span> n = m.match(<span class="regexp">/initial\-dpr=([\d\.]+)/</span>),</span><br><span class="line">                o = m.match(<span class="regexp">/maximum\-dpr=([\d\.]+)/</span>);</span><br><span class="line">            n &amp;&amp; (i = <span class="built_in">parseFloat</span>(n[<span class="number">1</span>]), j = <span class="built_in">parseFloat</span>((<span class="number">1</span> / i).toFixed(<span class="number">2</span>))), o &amp;&amp; (i = <span class="built_in">parseFloat</span>(o[<span class="number">1</span>]), j = <span class="built_in">parseFloat</span>((<span class="number">1</span> / i).toFixed(<span class="number">2</span>)))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!i &amp;&amp; !j) &#123;</span><br><span class="line">        <span class="keyword">var</span> p = a.navigator.userAgent,</span><br><span class="line">            q = (!!p.match(<span class="regexp">/android/gi</span>), !!p.match(<span class="regexp">/iphone/gi</span>)),</span><br><span class="line">            r = q &amp;&amp; !!p.match(<span class="regexp">/OS 9_3/</span>),</span><br><span class="line">            s = a.devicePixelRatio;</span><br><span class="line">        i = q &amp;&amp; !r ? s &gt;= <span class="number">3</span> &amp;&amp; (!i || i &gt;= <span class="number">3</span>) ? <span class="number">3</span> : s &gt;= <span class="number">2</span> &amp;&amp; (!i || i &gt;= <span class="number">2</span>) ? <span class="number">2</span> : <span class="number">1</span> : <span class="number">1</span>, j = <span class="number">1</span> / i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (f.setAttribute(<span class="string">"data-dpr"</span>, i), !g)</span><br><span class="line">        <span class="keyword">if</span> (g = e.createElement(<span class="string">"meta"</span>), g.setAttribute(<span class="string">"name"</span>, <span class="string">"viewport"</span>), g.setAttribute(<span class="string">"content"</span>, <span class="string">"initial-scale="</span> + j + <span class="string">", maximum-scale="</span> + j + <span class="string">", minimum-scale="</span> + j + <span class="string">", user-scalable=no"</span>), f.firstElementChild) f.firstElementChild.appendChild(g);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> t = e.createElement(<span class="string">"div"</span>);</span><br><span class="line">            t.appendChild(g), e.write(t.innerHTML)</span><br><span class="line">        &#125; a.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearTimeout(d), d = setTimeout(c, <span class="number">300</span>)</span><br><span class="line">    &#125;, !<span class="number">1</span>), a.addEventListener(<span class="string">"pageshow"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        a.persisted &amp;&amp; (clearTimeout(d), d = setTimeout(c, <span class="number">300</span>))</span><br><span class="line">    &#125;, !<span class="number">1</span>), <span class="string">"complete"</span> === e.readyState ? e.body.style.fontSize = <span class="number">12</span> * i + <span class="string">"px"</span> : e.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        e.body.style.fontSize = <span class="number">12</span> * i + <span class="string">"px"</span></span><br><span class="line">    &#125;, !<span class="number">1</span>), c(), k.dpr = a.dpr = i, k.refreshRem = c, k.rem2px = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(a) * <span class="keyword">this</span>.rem;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"string"</span> == <span class="keyword">typeof</span> a &amp;&amp; a.match(<span class="regexp">/rem$/</span>) &amp;&amp; (b += <span class="string">"px"</span>), b</span><br><span class="line">    &#125;, k.px2rem = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = <span class="built_in">parseFloat</span>(a) / <span class="keyword">this</span>.rem;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"string"</span> == <span class="keyword">typeof</span> a &amp;&amp; a.match(<span class="regexp">/px$/</span>) &amp;&amp; (b += <span class="string">"rem"</span>), b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;(<span class="built_in">window</span>, <span class="built_in">window</span>.lib || (<span class="built_in">window</span>.lib = &#123;&#125;));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;移动端适配基础知识及方案&quot;&gt;&lt;a href=&quot;#移动端适配基础知识及方案&quot; class=&quot;headerlink&quot; title=&quot;移动端适配基础知识及方案&quot;&gt;&lt;/a&gt;移动端适配基础知识及方案&lt;/h1&gt;&lt;p&gt;导读&lt;/p&gt;
&lt;p&gt;移动端适配，是我们在开发中经常会遇到的，
      
    
    </summary>
    
      <category term="适配" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E9%80%82%E9%85%8D/"/>
    
      <category term="移动端" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E9%80%82%E9%85%8D/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
      <category term="rem" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/rem/"/>
    
      <category term="移动端" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
      <category term="适配" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
      <category term="Flexible" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/Flexible/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式实例</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AE%9E%E4%BE%8B/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/正则表达式实例/</id>
    <published>2019-03-17T08:29:57.000Z</published>
    <updated>2019-03-17T08:30:30.310Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>收集在业务中经常使用的正则表达式实例，方便以后进行查找，减少工作量。</p></blockquote><ol><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader0" target="_blank" rel="noopener">校验基本日期格式</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader1" target="_blank" rel="noopener">校验密码强度</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader2" target="_blank" rel="noopener">校验中文</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader3" target="_blank" rel="noopener">由数字、26个英文字母或下划线组成的字符串</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader4" target="_blank" rel="noopener">校验E-Mail 地址</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader5" target="_blank" rel="noopener">校验身份证号码</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader6" target="_blank" rel="noopener">校验日期</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader7" target="_blank" rel="noopener">校验金额</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader8" target="_blank" rel="noopener">校验手机号</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader9" target="_blank" rel="noopener">判断IE的版本</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader10" target="_blank" rel="noopener">校验IP-v4地址</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader11" target="_blank" rel="noopener">校验IP-v6地址</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader12" target="_blank" rel="noopener">检查URL的前缀</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader13" target="_blank" rel="noopener">提取URL链接</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader14" target="_blank" rel="noopener">文件路径及扩展名校验</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader15" target="_blank" rel="noopener">提取Color Hex Codes</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader16" target="_blank" rel="noopener">提取网页图片</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader17" target="_blank" rel="noopener">提取页面超链接</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader18" target="_blank" rel="noopener">查找CSS属性</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader19" target="_blank" rel="noopener">抽取注释</a></li><li><a href="https://segmentfault.com/a/1190000012806098#articleHeader20" target="_blank" rel="noopener">转换千分位分隔符</a></li></ol><h2 id="1-校验基本日期格式"><a href="#1-校验基本日期格式" class="headerlink" title="1. 校验基本日期格式"></a>1. 校验基本日期格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var reg1 = /^\d&#123;4&#125;(\-|\/|\.)\d&#123;1,2&#125;\1\d&#123;1,2&#125;$/;</span><br><span class="line">var reg2 = /^(^(\d&#123;4&#125;|\d&#123;2&#125;)(\-|\/|\.)\d&#123;1,2&#125;\3\d&#123;1,2&#125;$)|(^\d&#123;4&#125;年\d&#123;1,2&#125;月\d&#123;1,2&#125;日$)$/;</span><br></pre></td></tr></table></figure><h2 id="2-校验密码强度"><a href="#2-校验密码强度" class="headerlink" title="2. 校验密码强度"></a>2. 校验密码强度</h2><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$/;</span><br></pre></td></tr></table></figure><p><strong>网友提供的解决检测特殊字符的方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="3-校验中文"><a href="#3-校验中文" class="headerlink" title="3. 校验中文"></a>3. 校验中文</h2><p>字符串仅能是中文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[\\u4e00-\\u9fa5]&#123;0,&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="4-由数字、26个英文字母或下划线组成的字符串"><a href="#4-由数字、26个英文字母或下划线组成的字符串" class="headerlink" title="4. 由数字、26个英文字母或下划线组成的字符串"></a>4. 由数字、26个英文字母或下划线组成的字符串</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^\\w+$/;</span><br></pre></td></tr></table></figure><h2 id="5-校验E-Mail-地址"><a href="#5-校验E-Mail-地址" class="headerlink" title="5. 校验E-Mail 地址"></a>5. 校验E-Mail 地址</h2><p>同密码一样，下面是E-mail地址合规性的正则检查语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&apos;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?/;</span><br></pre></td></tr></table></figure><h2 id="6-校验身份证号码"><a href="#6-校验身份证号码" class="headerlink" title="6. 校验身份证号码"></a>6. 校验身份证号码</h2><p>下面是身份证号码的正则校验。15 或 18位。</p><p>15位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$/;</span><br></pre></td></tr></table></figure><p>18位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[1-9]\\d&#123;5&#125;[1-9]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;([0-9]|X)$/;</span><br></pre></td></tr></table></figure><h2 id="7-校验日期"><a href="#7-校验日期" class="headerlink" title="7. 校验日期"></a>7. 校验日期</h2><p>“yyyy-mm-dd” 格式的日期校验，已考虑平闰年。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$/;</span><br></pre></td></tr></table></figure><h2 id="8-校验金额"><a href="#8-校验金额" class="headerlink" title="8. 校验金额"></a>8. 校验金额</h2><p>金额校验，精确到2位小数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^[0-9]+(.[0-9]&#123;2&#125;)?$/;</span><br></pre></td></tr></table></figure><h2 id="9-校验手机号"><a href="#9-校验手机号" class="headerlink" title="9. 校验手机号"></a>9. 校验手机号</h2><p>下面是国内 13、15、18开头的手机号正则表达式。（可根据目前国内收集号扩展前两位开头号码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$/;</span><br></pre></td></tr></table></figure><h2 id="10-判断IE的版本"><a href="#10-判断IE的版本" class="headerlink" title="10. 判断IE的版本"></a>10. 判断IE的版本</h2><p>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^.*MSIE [5-8](?:\\.[0-9]+)?(?!.*Trident\\\/[5-9]\\.0).*$/;</span><br></pre></td></tr></table></figure><h2 id="11-校验IP-v4地址"><a href="#11-校验IP-v4地址" class="headerlink" title="11. 校验IP-v4地址"></a>11. 校验IP-v4地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b/;</span><br></pre></td></tr></table></figure><h2 id="12-校验IP-v6地址"><a href="#12-校验IP-v6地址" class="headerlink" title="12. 校验IP-v6地址"></a>12. 校验IP-v6地址</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7,7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]&#123;1,&#125;|::(ffff(:0&#123;1,4&#125;)&#123;0,1&#125;:)&#123;0,1&#125;((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9])\\.)&#123;3,3&#125;(25[0-5]|(2[0-4]|1&#123;0,1&#125;[0-9])&#123;0,1&#125;[0-9]))/;</span><br></pre></td></tr></table></figure><h2 id="13-检查URL的前缀"><a href="#13-检查URL的前缀" class="headerlink" title="13. 检查URL的前缀"></a>13. 检查URL的前缀</h2><p>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!s.match(/^[a-zA-Z]+:\/\//)) &#123;</span><br><span class="line">    s = &apos;http://&apos; + s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-提取URL链接"><a href="#14-提取URL链接" class="headerlink" title="14. 提取URL链接"></a>14. 提取URL链接</h2><p>下面的这个表达式可以筛选出一段文本中的URL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^(f|ht)&#123;1&#125;(tp|tps):\/\/([\w-]+\.)+[\w-]+(\/[\w- ./?%&amp;=]*)?/;</span><br></pre></td></tr></table></figure><h2 id="15-文件路径及扩展名校验"><a href="#15-文件路径及扩展名校验" class="headerlink" title="15. 文件路径及扩展名校验"></a>15. 文件路径及扩展名校验</h2><p>验证windows下文件路径和扩展名（下面的例子中为.txt文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^([a-zA-Z]\\:|\\\\)\\\\([^\\]+\\)*[^\\/:*?&quot;&lt;&gt;|]+\\.txt(l)?$/;</span><br></pre></td></tr></table></figure><h2 id="16-提取Color-Hex-Codes"><a href="#16-提取Color-Hex-Codes" class="headerlink" title="16. 提取Color Hex Codes"></a>16. 提取Color Hex Codes</h2><p>有时需要抽取网页中的颜色代码，可以使用下面的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^#([A-Fa-f0-9]&#123;6&#125;|[A-Fa-f0-9]&#123;3&#125;)$/;</span><br></pre></td></tr></table></figure><h2 id="17-提取网页图片"><a href="#17-提取网页图片" class="headerlink" title="17. 提取网页图片"></a>17. 提取网页图片</h2><p>假若你想提取网页中所有图片信息，可以利用下面的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /\\&lt; *[img][^\\&gt;]*[src] *= *[\\&quot;\&apos;]&#123;0,1&#125;([^\\&quot;\&apos;\ &gt;]*)/;</span><br></pre></td></tr></table></figure><h2 id="18-提取页面超链接"><a href="#18-提取页面超链接" class="headerlink" title="18. 提取页面超链接"></a>18. 提取页面超链接</h2><p>提取html中的超链接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /(&lt;a\\s*(?!.*\\brel=)[^&gt;]*)(href=&quot;https?:\/\/)((?!(?:(?:www\\.)?&apos;.implode(&apos;|(?:www\\.)?&apos;, $follow_list).&apos;))[^&quot;]+)&quot;((?!.*\\brel=)[^&gt;]*)(?:[^&gt;]*)&gt;/;</span><br></pre></td></tr></table></figure><h2 id="19-查找CSS属性"><a href="#19-查找CSS属性" class="headerlink" title="19. 查找CSS属性"></a>19. 查找CSS属性</h2><p>通过下面的表达式，可以搜索到相匹配的CSS属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^\\s*[a-zA-Z\\-]+\\s*[:]&#123;1&#125;\\s[a-zA-Z0-9\\s.#]+[;]&#123;1&#125;/;</span><br></pre></td></tr></table></figure><h2 id="20-抽取注释"><a href="#20-抽取注释" class="headerlink" title="20. 抽取注释"></a>20. 抽取注释</h2><p>如果你需要移除HMTL中的注释，可以使用如下的表达式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /&lt;!--(.*?)--&gt;/;</span><br></pre></td></tr></table></figure><h2 id="21-转换千分位分隔符"><a href="#21-转换千分位分隔符" class="headerlink" title="21. 转换千分位分隔符"></a>21. 转换千分位分隔符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return total.toString().replace(/\B(?=(\d&#123;3&#125;)+$)/g, &apos;,&apos;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;收集在业务中经常使用的正则表达式实例，方便以后进行查找，减少工作量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000012806098#articleHe
      
    
    </summary>
    
      <category term="正则" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/常用正则表达式/</id>
    <published>2019-03-17T08:28:35.000Z</published>
    <updated>2019-03-17T08:29:34.596Z</updated>
    
    <content type="html"><![CDATA[<p>原文链接：<a href="https://whjin.github.io/2018/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">正则表达式手册</a></p><table><thead><tr><th>字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\</code></td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>”匹配字符“<code>n</code>”。“<code>\n</code>”匹配一个换行符。串行“<code>\\</code>”匹配“<code>\</code>”而“<code>\(</code>”则匹配“<code>(</code>”。</td></tr><tr><td><code>^</code></td><td>匹配输入字符串的开始位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>^</code>也匹配“<code>\n</code>”或“<code>\r</code>”之后的位置。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置。如果设置了<code>RegExp</code>对象的<code>Multiline</code>属性，<code>$</code>也匹配“<code>\n</code>”或“<code>\r</code>”之前的位置。</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code>能匹配“<code>z</code>”以及“<code>zoo</code>”。<code>*</code>等价于<code>{0,}</code>。</td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>”能匹配“<code>zo</code>”以及“<code>zoo</code>”，但不能匹配“<code>z</code>”。<code>+</code>等价于<code>{1,}</code>。</td></tr><tr><td><code>?</code></td><td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>”可以匹配“<code>does</code>”或“<code>does</code>”中的“<code>do</code>”。<code>?</code>等价于<code>{0,1}</code>。</td></tr><tr><td><code>{n}</code></td><td><code>n</code>是一个非负整数。匹配确定的<code>n</code>次。例如，“<code>o{2}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但是能匹配“<code>food</code>”中的两个<code>o</code>。</td></tr><tr><td><code>{n,}</code></td><td><code>n</code>是一个非负整数。至少匹配<code>n</code>次。例如，“<code>o{2,}</code>”不能匹配“<code>Bob</code>”中的“<code>o</code>”，但能匹配“<code>foooood</code>”中的所有<code>o</code>。“<code>o{1,}</code>”等价于“<code>o+</code>”。“<code>o{0,}</code>”则等价于“<code>o*</code>”。</td></tr><tr><td><code>{n,m}</code></td><td><code>m</code>和<code>n</code>均为非负整数，其中<code>n&lt;=m</code>。最少匹配<code>n</code>次且最多匹配<code>m</code>次。例如，“<code>o{1,3}</code>”将匹配“<code>fooooood</code>”中的前三个<code>o</code>。“<code>o{0,1}</code>”等价于“<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td><code>?</code></td><td>当该字符紧跟在任何一个其他限制符（<code>*</code>,<code>+</code>,<code>?</code>，<code>{n}</code>，<code>{n,}</code>，<code>{n,m}</code>）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>”，“<code>o+?</code>”将匹配单个“<code>o</code>”，而“<code>o+</code>”将匹配所有“<code>o</code>”。</td></tr><tr><td><code>.</code></td><td>匹配除“<code>\n</code>”之外的任何单个字符。要匹配包括“<code>\n</code>”在内的任何字符，请使用像“<code>(.\n)</code>”的模式。</td></tr><tr><td><code>(pattern)</code></td><td>匹配<code>pattern</code>并获取这一匹配。所获取的匹配可以从产生的<code>Matches</code>集合得到，在<code>VBScript</code>中使用<code>SubMatches</code>集合，在<code>JScript</code>中则使用<code>$0…$9</code>属性。要匹配圆括号字符，请使用“<code>\(</code>”或“`</td><td>”。`</td></tr><tr><td><code>(?:pattern)</code></td><td>匹配<code>pattern</code>但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td><td>)<code>”来组合一个模式的各个部分是很有用。例如“</code>industr(?:y</td><td>ies)<code>”就是一个比“</code>industry</td><td>industries`”更简略的表达式。</td></tr><tr><td><code>(?=pattern)</code></td><td>正向肯定预查，在任何匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows2000<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows3.1<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td><code>(?!pattern)</code></td><td>正向否定预查，在任何不匹配<code>pattern</code>的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows3.1<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows2000<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td><code>(?&lt;=pattern)</code></td><td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>2000Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>3.1Windows<code>”中的“</code>Windows`”。</td></tr><tr><td><code>(?&lt;!pattern)</code></td><td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows`”。</td></tr><tr><td>`x</td><td>y`</td><td>匹配<code>x</code>或<code>y</code>。例如，“`z</td><td>food<code>”能匹配“</code>z<code>”或“</code>food<code>”。“</code>(z</td><td>f)ood<code>”则匹配“</code>zood<code>”或“</code>food`”。</td></tr><tr><td><code>[xyz]</code></td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td><code>[^xyz]</code></td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td><code>[a-z]</code></td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td><code>[^a-z]</code></td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td><code>\b</code></td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td><code>\B</code></td><td>匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td><code>\cx</code></td><td>匹配由<code>x</code>指明的控制字符。例如，<code>\cM</code>匹配一个<code>Control-M</code>或回车符。<code>x</code>的值必须为<code>A-Z</code>或<code>a-z</code>之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td><code>\d</code></td><td>匹配一个数字字符。等价于<code>[0-9]</code>。</td></tr><tr><td><code>\D</code></td><td>匹配一个非数字字符。等价于<code>[^0-9]</code>。</td></tr><tr><td><code>\f</code></td><td>匹配一个换页符。等价于<code>\x0c</code>和<code>\cL</code>。</td></tr><tr><td><code>\n</code></td><td>匹配一个换行符。等价于<code>\x0a</code>和<code>\cJ</code>。</td></tr><tr><td><code>\r</code></td><td>匹配一个回车符。等价于<code>\x0d</code>和<code>\cM</code>。</td></tr><tr><td><code>\s</code></td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于<code>[\f\n\r\t\v]</code>。</td></tr><tr><td><code>\S</code></td><td>匹配任何非空白字符。等价于<code>[^\f\n\r\t\v]</code>。</td></tr><tr><td><code>\t</code></td><td>匹配一个制表符。等价于<code>\x09</code>和<code>\cI</code>。</td></tr><tr><td><code>\v</code></td><td>匹配一个垂直制表符。等价于<code>\x0b</code>和<code>\cK</code>。</td></tr><tr><td><code>\w</code></td><td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td><code>\W</code></td><td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td><code>\xn</code></td><td>匹配<code>n</code>，其中<code>n</code>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用<code>ASCII</code>编码。</td></tr><tr><td><code>\num</code></td><td>匹配<code>num</code>，其中<code>num</code>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td><code>\n</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\n</code>之前至少<code>n</code>个获取的子表达式，则<code>n</code>为向后引用。否则，如果<code>n</code>为八进制数字（<code>0-7</code>），则<code>n</code>为一个八进制转义值。</td></tr><tr><td><code>\nm</code></td><td>标识一个八进制转义值或一个向后引用。如果<code>\nm</code>之前至少有<code>nm</code>个获得子表达式，则<code>nm</code>为向后引用。如果<code>\nm</code>之前至少有<code>n</code>个获取，则<code>n</code>为一个后跟文字<code>m</code>的向后引用。如果前面的条件都不满足，若<code>n</code>和<code>m</code>均为八进制数字（<code>0-7</code>），则<code>\nm</code>将匹配八进制转义值<code>nm</code>。</td></tr><tr><td><code>\nml</code></td><td>如果<code>n</code>为八进制数字（<code>0-3</code>），且<code>m</code>和<code>l</code>均为八进制数字（<code>0-7</code>），则匹配八进制转义值<code>nml</code>。</td></tr><tr><td><code>\un</code></td><td>匹配<code>n</code>，其中<code>n</code>是一个用四个十六进制数字表示的<code>Unicode</code>字符。例如，<code>\u00A9</code>匹配版权符号（<code>©</code>）。</td></tr></tbody></table><h1 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h1><table><thead><tr><th>匹配内容</th><th>正则表达式</th></tr></thead><tbody><tr><td>用户名</td><td><code>/^[a-z0-9_-]{3,16}$/</code></td></tr><tr><td>密码</td><td><code>/^[a-z0-9_-]{6,18}$/</code></td></tr><tr><td>十六进制值</td><td>`/^#?([a-f0-9]{6}</td><td>[a-f0-9]{3})$/`</td></tr><tr><td>电子邮箱</td><td><code>/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]{2,6})$/</code> <code>/^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+$/</code></td></tr><tr><td>URL</td><td><code>/^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/</code></td></tr><tr><td>IP 地址</td><td>`/((2[0-4]d</td><td>25[0-5]</td><td>[01]?dd?).){3}(2[0-4]d</td><td>25[0-5]</td><td>[01]?dd?)/<code></code>/^(?:(?:25[0-5]</td><td>20-4</td><td>[01]?0-9?).){3}(?:25[0-5]</td><td>20-4</td><td>[01]?0-9?)$/`</td></tr><tr><td>HTML标签</td><td>`/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)</td><td>s+/&gt;)$/`</td></tr><tr><td>删除代码\注释</td><td>`(?&lt;!http:</td><td>S)//.*$`</td></tr><tr><td><code>Unicode</code>编码中的汉字范围</td><td><code>/^[\u2E80-\u9FFF]+$/</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文链接：&lt;a href=&quot;https://whjin.github.io/2018/10/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%8B%E5%86%8C/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="正则" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="正则" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>摘抄面向对象实战之拖拽对象封装</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E6%91%98%E6%8A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%AE%9E%E6%88%98%E4%B9%8B%E6%8B%96%E6%8B%BD%E5%AF%B9%E8%B1%A1%E5%B0%81%E8%A3%85/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/摘抄面向对象实战之拖拽对象封装/</id>
    <published>2019-03-17T08:20:30.000Z</published>
    <updated>2019-03-17T14:13:22.207Z</updated>
    
    <content type="html"><![CDATA[<p>前面几篇文章，我跟大家分享了JavaScript的一些基础知识，这篇文章，将会进入第一个实战环节：利用前面几章的所涉及到的知识，封装一个拖拽对象。为了能够帮助大家了解更多的方式与进行对比，我会使用三种不同的方式来实现拖拽。</p><ul><li>不封装对象直接实现；</li><li>利用原生JavaScript封装拖拽对象；</li><li>通过扩展jQuery来实现拖拽对象。</li></ul><blockquote><p>本文的例子会放置于<a href="http://codepen.io/" target="_blank" rel="noopener">codepen.io</a>中，供大家在阅读时直接查看。如果对于codepen不了解的同学，可以花点时间稍微了解一下。</p></blockquote><p>拖拽的实现过程会涉及到非常多的实用小知识，因此为了巩固我自己的知识积累，也为了大家能够学到更多的知识，我会尽量详细的将一些细节分享出来，相信大家认真阅读之后，一定能学到一些东西。</p><h6 id="1、如何让一个DOM元素动起来"><a href="#1、如何让一个DOM元素动起来" class="headerlink" title="1、如何让一个DOM元素动起来"></a>1、如何让一个DOM元素动起来</h6><p>我们常常会通过修改元素的<code>top，left，translate</code>来其的位置发生改变。在下面的例子中，每点击一次按钮，对应的元素就会移动5px。大家可点击查看。</p><p><a href="http://codepen.io/yangbo5207/pen/YZxGpO" target="_blank" rel="noopener">点击查看一个让元素动起来的小例子</a></p><blockquote><p>由于修改一个元素top/left值会引起页面重绘，而translate不会，因此从性能优化上来判断，我们会优先使用translate属性。</p></blockquote><h6 id="2、如何获取当前浏览器支持的transform兼容写法"><a href="#2、如何获取当前浏览器支持的transform兼容写法" class="headerlink" title="2、如何获取当前浏览器支持的transform兼容写法"></a>2、如何获取当前浏览器支持的transform兼容写法</h6><p>transform是css3的属性，当我们使用它时就不得不面对兼容性的问题。不同版本浏览器的兼容写法大致有如下几种：</p><p><code>[&#39;transform&#39;, &#39;webkitTransform&#39;, &#39;MozTransform&#39;, &#39;msTransform&#39;, &#39;OTransform&#39;]</code></p><p>因此我们需要判断当前浏览器环境支持的transform属性是哪一种，方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前浏览器支持的transform兼容写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTransform</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> transform = <span class="string">''</span>,</span><br><span class="line">        divStyle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>).style,</span><br><span class="line">        <span class="comment">// 可能涉及到的几种兼容性写法，通过循环找出浏览器识别的那一个</span></span><br><span class="line">        transformArr = [<span class="string">'transform'</span>, <span class="string">'webkitTransform'</span>, <span class="string">'MozTransform'</span>, <span class="string">'msTransform'</span>, <span class="string">'OTransform'</span>],</span><br><span class="line"></span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        len = transformArr.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)  &#123;</span><br><span class="line">        <span class="keyword">if</span>(transformArr[i] <span class="keyword">in</span> divStyle) &#123;</span><br><span class="line">            <span class="comment">// 找到之后立即返回，结束函数</span></span><br><span class="line">            <span class="keyword">return</span> transform = transformArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有找到，就直接返回空字符串</span></span><br><span class="line">    <span class="keyword">return</span> transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法用于获取浏览器支持的transform属性。如果返回的为空字符串，则表示当前浏览器并不支持transform，这个时候我们就需要使用left，top值来改变元素的位置。如果支持，就改变transform的值。</p><h6 id="3、-如何获取元素的初始位置"><a href="#3、-如何获取元素的初始位置" class="headerlink" title="3、 如何获取元素的初始位置"></a>3、 如何获取元素的初始位置</h6><p>我们首先需要获取到目标元素的初始位置，因此这里我们需要一个专门用来获取元素样式的功能函数。</p><p>但是获取元素样式在IE浏览器与其他浏览器有一些不同，因此我们需要一个兼容性的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, property</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ie通过currentStyle来获取元素的样式，其他浏览器通过getComputedStyle来获取</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.defaultView.getComputedStyle ? <span class="built_in">document</span>.defaultView.getComputedStyle(elem, <span class="literal">false</span>)[property] : elem.currentStyle[property];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个方法之后，就可以开始动手写获取目标元素初始位置的方法了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetPos</span>(<span class="params">elem</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pos = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> transform = getTransform();</span><br><span class="line">    <span class="keyword">if</span>(transform) &#123;</span><br><span class="line">        <span class="keyword">var</span> transformValue = getStyle(elem, transform);</span><br><span class="line">        <span class="keyword">if</span>(transformValue == <span class="string">'none'</span>) &#123;</span><br><span class="line">            elem.style[transform] = <span class="string">'translate(0, 0)'</span>;</span><br><span class="line">            <span class="keyword">return</span> pos;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = transformValue.match(<span class="regexp">/-?\d+/g</span>);</span><br><span class="line">            <span class="keyword">return</span> pos = &#123;</span><br><span class="line">                x: <span class="built_in">parseInt</span>(temp[<span class="number">4</span>].trim()),</span><br><span class="line">                y: <span class="built_in">parseInt</span>(temp[<span class="number">5</span>].trim())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(getStyle(elem, <span class="string">'position'</span>) == <span class="string">'static'</span>) &#123;</span><br><span class="line">            elem.style.position = <span class="string">'relative'</span>;</span><br><span class="line">            <span class="keyword">return</span> pos;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(getStyle(elem, <span class="string">'left'</span>) ? getStyle(elem, <span class="string">'left'</span>) : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(getStyle(elem, <span class="string">'top'</span>) ? getStyle(elem, <span class="string">'top'</span>) : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> pos = &#123;</span><br><span class="line">                x: x,</span><br><span class="line">                y: y</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在拖拽过程中，我们需要不停的设置目标元素的新位置，这样它才会移动起来，因此我们需要一个设置目标元素位置的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pos = &#123; x: 200, y: 100 &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTargetPos</span>(<span class="params">elem, pos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> transform = getTransform();</span><br><span class="line">    <span class="keyword">if</span>(transform) &#123;</span><br><span class="line">        elem.style[transform] = <span class="string">'translate('</span>+ pos.x +<span class="string">'px, '</span>+ pos.y +<span class="string">'px)'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        elem.style.left = pos.x + <span class="string">'px'</span>;</span><br><span class="line">        elem.style.top = pos.y + <span class="string">'px'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5、我们需要用到哪些事件？"><a href="#5、我们需要用到哪些事件？" class="headerlink" title="5、我们需要用到哪些事件？"></a>5、我们需要用到哪些事件？</h6><p>在pc上的浏览器中，结合<code>mousedown、mousemove、mouseup</code>这三个事件可以帮助我们实现拖拽。</p><ul><li><code>mousedown</code> 鼠标按下时触发</li><li><code>mousemove</code> 鼠标按下后拖动时触发</li><li><code>mouseup</code> 鼠标松开时触发</li></ul><blockquote><p>而在移动端，分别与之对应的则是<code>touchstart、touchmove、touchend</code>。</p></blockquote><p>当我们将元素绑定这些事件时，有一个事件对象将会作为参数传递给回调函数，通过事件对象，我们可以获取到当前鼠标的精确位置，鼠标位置信息是实现拖拽的关键。</p><blockquote><p>事件对象十分重要，其中包含了非常多的有用的信息，这里我就不扩展了，大家可以在函数中将事件对象打印出来查看其中的具体属性，这个方法对于记不清事件对象重要属性的童鞋非常有用。</p></blockquote><h6 id="6、拖拽的原理"><a href="#6、拖拽的原理" class="headerlink" title="6、拖拽的原理"></a>6、拖拽的原理</h6><p>当事件触发时，我们可以通过事件对象获取到鼠标的精切位置。这是实现拖拽的关键。当鼠标按下(mousedown触发)时，我们需要记住鼠标的初始位置与目标元素的初始位置，我们的目标就是实现当鼠标移动时，目标元素也跟着移动，根据常理我们可以得出如下关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">移动后的鼠标位置 - 鼠标初始位置 = 移动后的目标元素位置 - 目标元素的初始位置</span><br></pre></td></tr></table></figure><p>如果鼠标位置的差值我们用dis来表示，那么目标元素的位置就等于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">移动后目标元素的位置 = dis + 目标元素的初始位置</span><br></pre></td></tr></table></figure><p>通过事件对象，我们可以精确的知道鼠标的当前位置，因此当鼠标拖动(mousemove)时，我们可以不停的计算出鼠标移动的差值，以此来求出目标元素的当前位置。这个过程，就实现了拖拽。</p><p>而在鼠标松开(mouseup)结束拖拽时，我们需要处理一些收尾工作。详情见代码。</p><h6 id="7、-我又来推荐思维导图辅助写代码了"><a href="#7、-我又来推荐思维导图辅助写代码了" class="headerlink" title="7、 我又来推荐思维导图辅助写代码了"></a>7、 我又来推荐思维导图辅助写代码了</h6><p>常常有新人朋友跑来问我，如果逻辑思维能力不强，能不能写代码做前端。我的答案是：能。因为借助思维导图，可以很轻松的弥补逻辑的短板。而且比在自己头脑中脑补逻辑更加清晰明了，不易出错。</p><p>上面第六点我介绍了原理，因此如何做就显得不是那么难了，而具体的步骤，则在下面的思维导图中明确给出，我们只需要按照这个步骤来写代码即可，试试看，一定很轻松。</p><p><img src="/ZombieBrand.github.io/assets/599584-6137a359597879a5.png" alt="使用思维导图清晰的表达出整个拖拽过程我们需要干的事情"></p><h6 id="8、代码实现"><a href="#8、代码实现" class="headerlink" title="8、代码实现"></a>8、代码实现</h6><p><strong>part1、准备工作</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取目标元素对象</span></span><br><span class="line"><span class="keyword">var</span> oElem = <span class="built_in">document</span>.getElementById(<span class="string">'target'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明2个变量用来保存鼠标初始位置的x，y坐标</span></span><br><span class="line"><span class="keyword">var</span> startX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> startY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明2个变量用来保存目标元素初始位置的x，y坐标</span></span><br><span class="line"><span class="keyword">var</span> sourceX = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sourceY = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>part2、功能函数</strong></p><p>因为之前已经贴过代码，就不再重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前浏览器支持的transform兼容写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTransform</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素属性</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, property</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取元素的初始位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTargetPos</span>(<span class="params">elem</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置元素的初始位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setTargetPos</span>(<span class="params">elem, potions</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><strong>part3、声明三个事件的回调函数</strong></p><p>这三个方法就是实现拖拽的核心所在，我将严格按照上面思维导图中的步骤来完成我们的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定在mousedown上的回调，event为传入的事件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取鼠标初始位置</span></span><br><span class="line">    startX = event.pageX;</span><br><span class="line">    startY = event.pageY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取元素初始位置</span></span><br><span class="line">    <span class="keyword">var</span> pos = getTargetPos(oElem);</span><br><span class="line"></span><br><span class="line">    sourceX = pos.x;</span><br><span class="line">    sourceY = pos.y;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定</span></span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move, <span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, end, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取鼠标当前位置</span></span><br><span class="line">    <span class="keyword">var</span> currentX = event.pageX;</span><br><span class="line">    <span class="keyword">var</span> currentY = event.pageY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算差值</span></span><br><span class="line">    <span class="keyword">var</span> distanceX = currentX - startX;</span><br><span class="line">    <span class="keyword">var</span> distanceY = currentY - startY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算并设置元素当前位置</span></span><br><span class="line">    setTargetPos(oElem, &#123;</span><br><span class="line">        x: (sourceX + distanceX).toFixed(),</span><br><span class="line">        y: (sourceY + distanceY).toFixed()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">    <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, end);</span><br><span class="line">    <span class="comment">// do other things</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OK，一个简单的拖拽，就这样愉快的实现了。点击下面的链接，可以在线查看该例子的demo。</p><p><a href="http://codepen.io/yangbo5207/pen/WpEoyd" target="_blank" rel="noopener">使用原生js实现拖拽</a></p><h6 id="9、封装拖拽对象"><a href="#9、封装拖拽对象" class="headerlink" title="9、封装拖拽对象"></a>9、封装拖拽对象</h6><p>在前面一章我给大家分享了面向对象如何实现，基于那些基础知识，我们来将上面实现的拖拽封装为一个拖拽对象。我们的目标是，只要我们声明一个拖拽实例，那么传入的目标元素将自动具备可以被拖拽的功能。</p><p>在实际开发中，一个对象我们常常会单独放在一个js文件中，这个js文件将单独作为一个模块，利用各种模块的方式组织起来使用。当然这里没有复杂的模块交互，因为这个例子，我们只需要一个模块即可。</p><p>为了避免变量污染，我们需要将模块放置于一个函数自执行方式模拟的块级作用域中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>在普通的模块组织中，我们只是单纯的将许多js文件压缩成为一个js文件，因此此处的第一个分号则是为了防止上一个模块的结尾不用分号导致报错。必不可少。当然在通过require或者ES6模块等方式就不会出现这样的情况。</p></blockquote><p>我们知道，在封装一个对象的时候，我们可以将属性与方法放置于构造函数或者原型中，而在增加了自执行函数之后，我们又可以将属性和方法防止与模块的内部作用域。这是闭包的知识。</p><p><strong>那么我们面临的挑战就在于，如何合理的处理属性与方法的位置。</strong></p><p>当然，每一个对象的情况都不一样，不能一概而论，我们需要清晰的知道这三种位置的特性才能做出最适合的决定。</p><ul><li>构造函数中： 属性与方法为当前实例单独拥有，只能被当前实例访问，并且每声明一个实例，其中的方法都会被重新创建一次。</li><li>原型中： 属性与方法为所有实例共同拥有，可以被所有实例访问，新声明实例不会重复创建方法。</li><li>模块作用域中：属性和方法不能被任何实例访问，但是能被内部方法访问，新声明的实例，不会重复创建相同的方法。</li></ul><p>对于方法的判断比较简单。</p><p>因为在构造函数中的方法总会在声明一个新的实例时被重复创建，因此我们声明的方法都尽量避免出现在构造函数中。</p><p>而如果你的方法中需要用到构造函数中的变量，或者想要公开，那就需要放在原型中。</p><p>如果方法需要私有不被外界访问，那么就放置在模块作用域中。</p><p>对于属性放置于什么位置有的时候很难做出正确的判断，因此我很难给出一个准确的定义告诉你什么属性一定要放在什么位置，这需要在实际开发中不断的总结经验。但是总的来说，仍然要结合这三个位置的特性来做出最合适的判断。</p><p>如果属性值只能被实例单独拥有，比如person对象的name，只能属于某一个person实例，又比如这里拖拽对象中，某一个元素的初始位置，也仅仅只是这个元素的当前位置，这个属性，则适合放在构造函数中。</p><p>而如果一个属性仅仅供内部方法访问，这个属性就适合放在模块作用域中。</p><blockquote><p>关于面向对象，上面的几点思考我认为是这篇文章最值得认真思考的精华。如果在封装时没有思考清楚，很可能会遇到很多你意想不到的bug，所以建议大家结合自己的开发经验，多多思考，总结出自己的观点。</p></blockquote><p>根据这些思考，大家可以自己尝试封装一下。然后与我的做一些对比，看看我们的想法有什么不同，在下面例子的注释中，我将自己的想法表达出来。</p><p><a href="http://codepen.io/yangbo5207/pen/LWjWpe" target="_blank" rel="noopener">点击查看已经封装好的demo</a></p><p>js 源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这是一个私有属性，不需要被实例访问</span></span><br><span class="line">    <span class="keyword">var</span> transform = getTransform();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Drag</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 放在构造函数中的属性，都是属于每一个实例单独拥有</span></span><br><span class="line">        <span class="keyword">this</span>.elem = <span class="keyword">typeof</span> selector == <span class="string">'Object'</span> ? selector : <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">        <span class="keyword">this</span>.startX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.startY = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.sourceX = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.sourceY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原型</span></span><br><span class="line">    Drag.prototype = &#123;</span><br><span class="line">        <span class="keyword">constructor</span>: Drag,</span><br><span class="line"></span><br><span class="line">        init: function() &#123;</span><br><span class="line">            <span class="comment">// 初始时需要做些什么事情</span></span><br><span class="line">            <span class="keyword">this</span>.setDrag();</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 稍作改造，仅用于获取当前元素的属性，类似于getName</span></span><br><span class="line">        getStyle: <span class="function"><span class="keyword">function</span>(<span class="params">property</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">document</span>.defaultView.getComputedStyle ? <span class="built_in">document</span>.defaultView.getComputedStyle(<span class="keyword">this</span>.elem, <span class="literal">false</span>)[property] : <span class="keyword">this</span>.elem.currentStyle[property];</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用来获取当前元素的位置信息，注意与之前的不同之处</span></span><br><span class="line">        getPosition: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> pos = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(transform) &#123;</span><br><span class="line">                <span class="keyword">var</span> transformValue = <span class="keyword">this</span>.getStyle(transform);</span><br><span class="line">                <span class="keyword">if</span>(transformValue == <span class="string">'none'</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.elem.style[transform] = <span class="string">'translate(0, 0)'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">var</span> temp = transformValue.match(<span class="regexp">/-?\d+/g</span>);</span><br><span class="line">                    pos = &#123;</span><br><span class="line">                        x: <span class="built_in">parseInt</span>(temp[<span class="number">4</span>].trim()),</span><br><span class="line">                        y: <span class="built_in">parseInt</span>(temp[<span class="number">5</span>].trim())</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.getStyle(<span class="string">'position'</span>) == <span class="string">'static'</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.elem.style.position = <span class="string">'relative'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    pos = &#123;</span><br><span class="line">                        x: <span class="built_in">parseInt</span>(<span class="keyword">this</span>.getStyle(<span class="string">'left'</span>) ? <span class="keyword">this</span>.getStyle(<span class="string">'left'</span>) : <span class="number">0</span>),</span><br><span class="line">                        y: <span class="built_in">parseInt</span>(<span class="keyword">this</span>.getStyle(<span class="string">'top'</span>) ? <span class="keyword">this</span>.getStyle(<span class="string">'top'</span>) : <span class="number">0</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pos;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用来设置当前元素的位置</span></span><br><span class="line">        setPostion: <span class="function"><span class="keyword">function</span>(<span class="params">pos</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(transform) &#123;</span><br><span class="line">                <span class="keyword">this</span>.elem.style[transform] = <span class="string">'translate('</span>+ pos.x +<span class="string">'px, '</span>+ pos.y +<span class="string">'px)'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.elem.style.left = pos.x + <span class="string">'px'</span>;</span><br><span class="line">                <span class="keyword">this</span>.elem.style.top = pos.y + <span class="string">'px'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 该方法用来绑定事件</span></span><br><span class="line">        setDrag: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">this</span>.elem.addEventListener(<span class="string">'mousedown'</span>, start, <span class="literal">false</span>);</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                self.startX = event.pageX;</span><br><span class="line">                self.startY = event.pageY;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> pos = self.getPosition();</span><br><span class="line"></span><br><span class="line">                self.sourceX = pos.x;</span><br><span class="line">                self.sourceY = pos.y;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">'mousemove'</span>, move, <span class="literal">false</span>);</span><br><span class="line">                <span class="built_in">document</span>.addEventListener(<span class="string">'mouseup'</span>, end, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> currentX = event.pageX;</span><br><span class="line">                <span class="keyword">var</span> currentY = event.pageY;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> distanceX = currentX - self.startX;</span><br><span class="line">                <span class="keyword">var</span> distanceY = currentY - self.startY;</span><br><span class="line"></span><br><span class="line">                self.setPostion(&#123;</span><br><span class="line">                    x: (self.sourceX + distanceX).toFixed(),</span><br><span class="line">                    y: (self.sourceY + distanceY).toFixed()</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">                <span class="built_in">document</span>.removeEventListener(<span class="string">'mouseup'</span>, end);</span><br><span class="line">                <span class="comment">// do other things</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有方法，仅仅用来获取transform的兼容写法</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getTransform</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> transform = <span class="string">''</span>,</span><br><span class="line">            divStyle = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>).style,</span><br><span class="line">            transformArr = [<span class="string">'transform'</span>, <span class="string">'webkitTransform'</span>, <span class="string">'MozTransform'</span>, <span class="string">'msTransform'</span>, <span class="string">'OTransform'</span>],</span><br><span class="line"></span><br><span class="line">            i = <span class="number">0</span>,</span><br><span class="line">            len = transformArr.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; i++)  &#123;</span><br><span class="line">            <span class="keyword">if</span>(transformArr[i] <span class="keyword">in</span> divStyle) &#123;</span><br><span class="line">                <span class="keyword">return</span> transform = transformArr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> transform;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一种对外暴露的方式</span></span><br><span class="line">    <span class="built_in">window</span>.Drag = Drag;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用：声明2个拖拽实例</span></span><br><span class="line"><span class="keyword">new</span> Drag(<span class="string">'target'</span>);</span><br><span class="line"><span class="keyword">new</span> Drag(<span class="string">'target2'</span>);</span><br></pre></td></tr></table></figure><p>这样一个拖拽对象就封装完毕了。</p><p>建议大家根据我提供的思维方式，多多尝试封装一些组件。比如封装一个弹窗，封装一个循环轮播等。练得多了，面向对象就不再是问题了。这种思维方式，在未来任何时候都是能够用到的。</p><p>下一章分析jQuery对象的实现，与如何将我们这里封装的拖拽对象扩展为jQuery插件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前面几篇文章，我跟大家分享了JavaScript的一些基础知识，这篇文章，将会进入第一个实战环节：利用前面几章的所涉及到的知识，封装一个拖拽对象。为了能够帮助大家了解更多的方式与进行对比，我会使用三种不同的方式来实现拖拽。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不封装对象直接实现；&lt;/
      
    
    </summary>
    
      <category term="面向对象" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="拖拽对象" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E6%8B%96%E6%8B%BD%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>摘抄面向对象</title>
    <link href="https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/%E6%91%98%E6%8A%84%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://zombrbrand.github.io/ZombieBrand.github.io/2019/03/17/摘抄面向对象/</id>
    <published>2019-03-17T08:20:09.000Z</published>
    <updated>2019-03-17T14:13:17.916Z</updated>
    
    <content type="html"><![CDATA[<p>如果要我总结一下学习前端以来我遇到了哪些瓶颈，那么面向对象一定是第一个毫不犹豫想到的。尽管我现在对于面向对象有了一些的了解，但是当初的那种似懂非懂的痛苦，依然历历在目。</p><p>为了帮助大家能够更加直观的学习和了解面向对象，我会用尽量简单易懂的描述来展示面向对象的相关知识。并且也准备了一些实用的例子帮助大家更加快速的掌握面向对象的真谛。</p><ul><li>jQuery的面向对象实现</li><li>封装拖拽</li><li>简易版运动框架封装</li></ul><p>这可能会花一点时间，但是却值得期待。所以如果有兴趣的朋友可以来简书和公众号关注我。</p><p>而这篇文章主要来聊一聊关于面向对象的一些重要的基本功。</p><h5 id="一、对象的定义"><a href="#一、对象的定义" class="headerlink" title="一、对象的定义"></a>一、对象的定义</h5><p>在ECMAScript-262中，对象被定义为<strong>“无序属性的集合，其属性可以包含基本值，对象或者函数”</strong>。</p><p>也就是说，在JavaScript中，对象无非就是由一些列无序的<code>key-value</code>对组成。其中value可以是基本值，对象或者函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的person就是一个对象</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Tom'</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    parent: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h6><p>我们可以通过new的方式创建一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><p>也可以通过对象字面量的形式创建一个简单的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><p>当我们想要给我们创建的简单对象添加方法时，可以这样表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以这样</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">"TOM"</span>;</span><br><span class="line">person.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以这样</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"TOM"</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="访问对象的属性和方法"><a href="#访问对象的属性和方法" class="headerlink" title="访问对象的属性和方法"></a>访问对象的属性和方法</h6><p>假如我们有一个简单的对象如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span>,</span><br><span class="line">    age: <span class="string">'20'</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们想要访问他的name属性时，可以用如下两种方式访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person.name</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">person[<span class="string">'name'</span>]</span><br></pre></td></tr></table></figure><p>如果我们想要访问的属性名是一个变量时，常常会使用第二种方式。例如我们要同时访问person的name与age，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'name'</span>, <span class="string">'age'</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person[item]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这种方式一定要重视，记住它以后在我们处理复杂数据的时候会有很大的帮助。</p></blockquote><h5 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a>二、工厂模式</h5><p>使用上面的方式创建对象很简单，但是在很多时候并不能满足我们的需求。就以person对象为例。假如我们在实际开发中，不仅仅需要一个名字叫做TOM的person对象，同时还需要另外一个名为Jake的person对象，虽然他们有很多相似之处，但是我们不得不重复写两次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> perTom = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> perJake = &#123;</span><br><span class="line">    name: <span class="string">'Jake'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然这并不是合理的方式，当相似对象太多时，大家都会崩溃掉。</p><p>我们可以使用工厂模式的方式解决这个问题。顾名思义，工厂模式就是我们提供一个模子，然后通过这个模子复制出我们需要的对象。我们需要多少个，就复制多少个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createPerson = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个中间对象，该对象就是工厂模式的模子</span></span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次添加我们需要的属性与方法</span></span><br><span class="line">    o.name = name;</span><br><span class="line">    o.age = age;</span><br><span class="line">    o.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建两个实例</span></span><br><span class="line"><span class="keyword">var</span> perTom = createPerson(<span class="string">'TOM'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> PerJake = createPerson(<span class="string">'Jake'</span>, <span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>相信上面的代码并不难理解，也不用把工厂模式看得太过高大上。很显然，工厂模式帮助我们解决了重复代码上的麻烦，让我们可以写很少的代码，就能够创建很多个person对象。但是这里还有两个麻烦，需要我们注意。</p><p>第一个麻烦就是这样处理，我们没有办法识别对象实例的类型。使用instanceof可以识别对象的类型，如下例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(foo <span class="keyword">instanceof</span> <span class="built_in">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因此在工厂模式的基础上，我们需要使用构造函数的方式来解决这个麻烦。</p><h5 id="三、构造函数"><a href="#三、构造函数" class="headerlink" title="三、构造函数"></a>三、构造函数</h5><p>在JavaScript中，new关键字可以让一个函数变得与众不同。通过下面的例子，我们来一探new关键字的神奇之处。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo();  <span class="comment">// window</span></span><br><span class="line"><span class="keyword">new</span> demo();  <span class="comment">// demo</span></span><br></pre></td></tr></table></figure><p>为了能够直观的感受他们不同，建议大家动手实践观察一下。很显然，使用new之后，函数内部发生了一些变化，让this指向改变。那么new关键字到底做了什么事情呢。嗯，其实我之前在文章里用文字大概表达了一下new到底干了什么，但是一些同学好奇心很足，总期望用代码实现一下，我就大概以我的理解来表达一下吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先一本正经的创建一个构造函数，其实该函数与普通函数并无区别</span></span><br><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将构造函数以参数形式传入</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个中间对象，该对象为最终返回的实例</span></span><br><span class="line">    <span class="keyword">var</span> res = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (func.prototype !== <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将实例的原型指向构造函数的原型</span></span><br><span class="line">        res.__proto__ = func.prototype;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ret为构造函数执行的结果，这里通过apply，将构造函数内部的this指向修改为指向res，即为实例对象</span></span><br><span class="line">    <span class="keyword">var</span> ret = func.apply(res, <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当我们在构造函数中明确指定了返回对象时，那么new的执行结果就是该返回对象</span></span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">typeof</span> ret === <span class="string">"object"</span> || <span class="keyword">typeof</span> ret === <span class="string">"function"</span>) &amp;&amp; ret !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有明确指定返回对象，则默认返回res，这个res就是实例对象</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过new声明创建实例，这里的p1，实际接收的正是new中返回的res</span></span><br><span class="line"><span class="keyword">var</span> p1 = New(Person, <span class="string">'tom'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，这里也可以判断出实例的类型了</span></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>JavaScript内部再通过其他的一些特殊处理，将<code>var p1 = New(Person, &#39;tom&#39;, 20);</code> 等效于<code>var p1 = new Person(&#39;tom&#39;, 20);</code>。就是我们认识的new关键字了。具体怎么处理的，我也不知道，别刨根问底了，一直回答下去太难 - -！</p></blockquote><p>老实讲，你可能很难在其他地方看到有如此明确的告诉你new关键字到底对构造函数干了什么的文章了。理解了这段代码，你对JavaScript的理解又比别人深刻了一分，所以，一本正经厚颜无耻求个赞可好？</p><p>当然，很多朋友由于对于前面几篇文章的知识理解不够到位，会对new的实现表示非常困惑。但是老实讲，如果你读了我的前面几篇文章，一定会对这里new的实现有似曾相识的感觉。而且我这里已经尽力做了详细的注解，剩下的只能靠你自己了。</p><p>但是只要你花点时间，理解了他的原理，那么困扰了无数人的构造函数中this到底指向谁就变得非常简单了。</p><p>所以，为了能够判断实例与对象的关系，我们就使用构造函数来搞定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'Ness'</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName());  <span class="comment">// Ness</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>关于构造函数，如果你暂时不能够理解new的具体实现，就先记住下面这几个结论吧。</p><ul><li>与普通函数相比，构造函数并没有任何特别的地方，首字母大写只是我们约定的小规定，用于区分普通函数；</li><li>new关键字让构造函数具有了与普通函数不同的许多特点，而new的过程中，执行了如下过程：<ol><li>声明一个中间对象；</li><li>将该中间对象的原型指向构造函数的原型；</li><li>将构造函数的this，指向该中间对象；</li><li>返回该中间对象，即返回实例对象。</li></ol></li></ul><h5 id="四、原型"><a href="#四、原型" class="headerlink" title="四、原型"></a>四、原型</h5><p>虽然构造函数解决了判断实例类型的问题，但是，说到底，还是一个对象的复制过程。跟工厂模式颇有相似之处。也就是说，当我们声明了100个person对象，那么就有100个getName方法被重新生成。</p><p>这里的每一个getName方法实现的功能其实是一模一样的，但是由于分别属于不同的实例，就不得不一直不停的为getName分配空间。这就是工厂模式存在的第二个麻烦。</p><p>显然这是不合理的。我们期望的是，既然都是实现同一个功能，那么能不能就让每一个实例对象都访问同一个方法？</p><p>当然能，这就是原型对象要帮我们解决的问题了。</p><p>我们创建的每一个函数，都可以有一个prototype属性，该属性指向一个对象。这个对象，就是我们这里说的原型。</p><p>当我们在创建对象时，可以根据自己的需求，选择性的将一些属性和方法通过prototype属性，挂载在原型对象上。而每一个new出来的实例，都有一个<code>__proto__</code>属性，该属性指向构造函数的原型对象，通过这个属性，让实例对象也能够访问原型对象上的方法。因此，当所有的实例都能够通过<code>__proto__</code>访问到原型对象时，原型对象的方法与属性就变成了共有方法与属性。</p><p>我们通过一个简单的例子与图示，来了解构造函数，实例与原型三者之间的关系。</p><blockquote><p>由于每个函数都可以是构造函数，每个对象都可以是原型对象，因此如果在理解原型之初就想的太多太复杂的话，反而会阻碍你的理解，这里我们要学会先简化它们。就单纯的剖析这三者的关系。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过prototye属性，将方法挂载到原型对象上</span></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tim'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">'jak'</span>, <span class="number">22</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p1.getName === p2.getName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="/ZombieBrand.github.io/assets/599584-2fc7dad23d112791.png" alt="图示"></p><p>通过图示我们可以看出，构造函数的prototype与所有实例对象的<code>__proto__</code>都指向原型对象。而原型对象的constructor指向构造函数。</p><p>除此之外，还可以从图中看出，实例对象实际上对前面我们所说的中间对象的复制，而中间对象中的属性与方法都在构造函数中添加。于是根据构造函数与原型的特性，我们就可以将在构造函数中，通过this声明的属性与方法称为私有变量与方法，它们被当前被某一个实例对象所独有。而通过原型声明的属性与方法，我们可以称之为共有属性与方法，它们可以被所有的实例对象访问。</p><p><strong>当我们访问实例对象中的属性或者方法时，会优先访问实例对象自身的属性和方法。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'this is constructor.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tim'</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">p1.getName(); <span class="comment">// this is constructor.</span></span><br></pre></td></tr></table></figure><p>在这个例子中，我们同时在原型与构造函数中都声明了一个getName函数，运行代码的结果表示原型中的访问并没有被访问。</p><p>我们还可以通过in来判断，一个对象是否拥有某一个属性/方法，无论是该属性/方法存在与实例对象还是原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">'tim'</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> p1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>in的这种特性最常用的场景之一，就是判断当前页面是否在移动端打开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">isMobile = <span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">document</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多人喜欢用浏览器UA的方式来判断，但并不是很好的方式</span></span><br></pre></td></tr></table></figure><p><strong> 更简单的原型写法 </strong></p><p>根据前面例子的写法，如果我们要在原型上添加更多的方法，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><p>除此之外，我还可以使用更为简单的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person,</span><br><span class="line">    getName: function() &#123;&#125;,</span><br><span class="line">    getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    sayHello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种字面量的写法看上去简单很多，但是有一个需要特别注意的地方。<code>Person.prototype = {}</code>实际上是重新创建了一个<code>{}</code>对象并赋值给Person.prototype，这里的<code>{}</code>并不是最初的那个原型对象。因此它里面并不包含<code>constructor</code>属性。为了保证正确性，我们必须在新创建的<code>{}</code>对象中显示的设置<code>constructor</code>的指向。即上面的<code>constructor: Person</code>。</p><h5 id="五、原型链"><a href="#五、原型链" class="headerlink" title="五、原型链"></a>五、原型链</h5><p>原型对象其实也是普通的对象。几乎所有的对象都可能是原型对象，也可能是实例对象，而且还可以同时是原型对象与实例对象。这样的一个对象，正是构成原型链的一个节点。因此理解了原型，那么原型链并不是一个多么复杂的概念。</p><p>我们知道所有的函数都有一个叫做toString的方法。那么这个方法到底是在哪里的呢？</p><p>先随意声明一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>那么我们可以用如下的图来表示这个函数的原型链。</p><p><img src="/ZombieBrand.github.io/assets/599584-f4ca22c5db668eaf.png" alt="原型链"></p><p>其中add是Function对象的实例。而Function的原型对象同时又是Object原型的实例。这样就构成了一条原型链。原型链的访问，其实跟作用域链有很大的相似之处，他们都是一次单向的查找过程。因此实例对象能够通过原型链，访问到处于原型链上对象的所有属性与方法。这也是foo最终能够访问到处于Object原型对象上的toString方法的原因。</p><p>基于原型链的特性，我们可以很轻松的实现<strong>继承</strong>。</p><h5 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h5><p>我们常常结合构造函数与原型来创建一个对象。因为构造函数与原型的不同特性，分别解决了我们不同的困扰。因此当我们想要实现继承时，就必须得根据构造函数与原型的不同而采取不同的策略。</p><p>我们声明一个Person对象，该对象将作为父级，而子级cPerson将要继承Person的所有属性与方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先我们来看构造函数的继承。在上面我们已经理解了构造函数的本质，它其实是在new内部实现的一个复制过程。而我们在继承时想要的，就是想父级构造函数中的操作在子级的构造函数中重现一遍即可。我们可以通过call方法来达到目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数的继承</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而原型的继承，则只需要将子级的原型对象设置为父级的一个实例，加入到原型链中即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承原型</span></span><br><span class="line">cPerson.prototype = <span class="keyword">new</span> Person(name, age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加更多方法</span></span><br><span class="line">cPerson.prototype.getLive = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="/ZombieBrand.github.io/assets/599584-c77eb714f66b8185.png" alt="原型链"></p><p>当然关于继承还有更好的方式。</p><h5 id="七、更好的继承"><a href="#七、更好的继承" class="headerlink" title="七、更好的继承"></a>七、更好的继承</h5><p>假设原型链的终点<code>Object.prototype</code>为原型链的E(end)端，原型链的起点为S(start)端。</p><p>通过前面原型链的学习我们知道，处于S端的对象，可以通过S -&gt; E的单向查找，访问到原型链上的所有方法与属性。因此这给继承提供了理论基础。我们只需要在S端添加新的对象，那么新对象就能够通过原型链访问到父级的方法与属性。因此想要实现继承，是一件非常简单的事情。</p><p>因为封装一个对象由构造函数与原型共同组成，因此继承也会分别有构造函数的继承与原型的继承。</p><p>假设我们已经封装好了一个父类对象Person。如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数的继承比较简单，我们可以借助call/apply来实现。假设我们要通过继承封装一个Student的子类对象。那么构造函数可以如下实现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, grade</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 通过call方法还原Person构造函数中的所有处理逻辑</span></span><br><span class="line">    Student.call(Person, name, age);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">var</span> Student = <span class="function"><span class="keyword">function</span>(<span class="params">name, age, grade</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原型的继承则稍微需要一点思考。首先我们应该考虑，如何将子类对象的原型加入到原型链中？我们只需要让子类对象的原型，成为父类对象的一个实例，然后通过<code>__proto__</code>就可以访问父类对象的原型。这样就继承了父类原型中的方法与属性了。</p><p>因此我们可以先封装一个方法，该方法根据父类对象的原型创建一个实例，该实例将会作为子类对象的原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">proto, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个空对象</span></span><br><span class="line">    <span class="keyword">var</span> tmp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让这个新的空对象成为父类对象的实例</span></span><br><span class="line">    tmp.__proto__ = proto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的方法都挂载到新对象上，新的对象将作为子类对象的原型</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperties(tmp, options);</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单封装了<code>create</code>对象之后，我们就可以使用该方法来实现原型的继承了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype = create(Person.prototype, &#123;</span><br><span class="line">    <span class="comment">// 不要忘了重新指定构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Student</span><br><span class="line">    &#125;</span><br><span class="line">    getGrade: &#123;</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.grade</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>那么我们来验证一下我们这里实现的继承是否正确。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'ming'</span>, <span class="number">22</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.getName());  <span class="comment">// ming</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.getAge());   <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.getGrade()); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>全部都能正常访问，没问题。在ECMAScript5中直接提供了一个<code>Object.create</code>方法来完成我们上面自己封装的<code>create</code>的功能。因此我们可以直接使用<code>Object.create</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Student.prototype = create(Person.prototype, &#123;</span><br><span class="line">    <span class="comment">// 不要忘了重新指定构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Student</span><br><span class="line">    &#125;</span><br><span class="line">    getGrade: &#123;</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.grade</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, grade</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数继承</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age);</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承</span></span><br><span class="line">Student.prototype = <span class="built_in">Object</span>.create(Person.prototype, &#123;</span><br><span class="line">    <span class="comment">// 不要忘了重新指定构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: &#123;</span><br><span class="line">        value: Student</span><br><span class="line">    &#125;</span><br><span class="line">    getGrade: &#123;</span><br><span class="line">        value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.grade</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> Student(<span class="string">'ming'</span>, <span class="number">22</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s1.getName());  <span class="comment">// ming</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.getAge());   <span class="comment">// 22</span></span><br><span class="line"><span class="built_in">console</span>.log(s1.getGrade()); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h5 id="八、属性类型"><a href="#八、属性类型" class="headerlink" title="八、属性类型"></a>八、属性类型</h5><p>在上面的继承实现中，使用了一个大家可能不太熟悉的方法<code>defineProperties</code>。并且在定义<code>getGrade</code>时使用了一个很奇怪的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getGrade: &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.grade</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这其实是对象中的属性类型。在我们平常的使用中，给对象添加一个属性时，直接使用<code>object.param</code>的方式就可以了，或者直接在对象中挂载。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在ECMAScript5中，对每个属性都添加了几个属性类型，来描述这些属性的特点。他们分别是</p><ul><li><strong><code>configurable</code></strong>: 表示该属性是否能被delete删除。当其值为false时，其他的特性也不能被改变。默认值为true</li><li><strong><code>enumerable</code></strong>: 是否能枚举。也就是是否能被for-in遍历。默认值为true</li><li><strong><code>writable</code></strong>: 是否能修改值。默认为true</li><li><strong><code>value</code></strong>: 该属性的具体值是多少。默认为undefined</li><li><strong><code>get</code></strong>: 当我们通过<code>person.name</code>访问name的值时，get将被调用。该方法可以自定义返回的具体值时多少。get默认值为undefined</li><li><strong><code>set</code></strong>: 当我们通过<code>person.name = &#39;Jake&#39;</code>设置name的值时，set方法将被调用。该方法可以自定义设置值的具体方式。set默认值为undefined</li></ul><blockquote><p>需要注意的是，不能同时设置value、writable 与 get、set的值。</p></blockquote><p>我们可以通过<code>Object.defineProperty</code>方法来修改这些属性类型。</p><p>下面我们用一些简单的例子来演示一下这些属性类型的具体表现。</p><p><strong>configurable</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用普通的方式给person对象添加一个name属性，值为TOM</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用delete删除该属性</span></span><br><span class="line"><span class="keyword">delete</span> person.name;  <span class="comment">// 返回true 表示删除成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过Object.defineProperty重新添加name属性</span></span><br><span class="line"><span class="comment">// 并设置name的属性类型的configurable为false，表示不能再用delete删除</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'Jake'</span>  <span class="comment">// 设置name属性的值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次delete，已经不能删除了</span></span><br><span class="line"><span class="keyword">delete</span> person.name   <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name)    <span class="comment">// 值为Jake</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 试图改变value</span></span><br><span class="line">person.name = <span class="string">"alex"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// Jake 改变失败</span></span><br></pre></td></tr></table></figure><p><strong>enumerable</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span>,</span><br><span class="line">    age: <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用for-in枚举person的属性</span></span><br><span class="line"><span class="keyword">var</span> params = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    params.push(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看枚举结果</span></span><br><span class="line"><span class="built_in">console</span>.log(params);  <span class="comment">// ['name', 'age']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新设置name属性的类型，让其不可被枚举</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    enumerable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> params_ = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    params_.push(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次查看枚举结果</span></span><br><span class="line"><span class="built_in">console</span>.log(params_); <span class="comment">// ['age']</span></span><br></pre></td></tr></table></figure><p><strong>writable</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'TOM'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改name的值</span></span><br><span class="line">person.name = <span class="string">'Jake'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看修改结果</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Jake 修改成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置name的值不能被修改</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次试图修改name的值</span></span><br><span class="line">person.name = <span class="string">'alex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// Jake 修改失败</span></span><br></pre></td></tr></table></figure><p><strong>value</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个name属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'TOM'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name)  <span class="comment">// TOM</span></span><br></pre></td></tr></table></figure><p><strong>get/set</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过get与set自定义访问与设置name属性的方式</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        <span class="comment">// 一直返回TOM</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'TOM'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(value) &#123;</span><br><span class="line">        <span class="comment">// 设置name属性时，返回该字符串，value为新值</span></span><br><span class="line">        <span class="built_in">console</span>.log(value + <span class="string">' in set'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一次访问name，调用get</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)   <span class="comment">// TOM</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试修改name值，此时set方法被调用</span></span><br><span class="line">person.name = <span class="string">'alex'</span>   <span class="comment">// alex in set</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二次访问name，还是调用get</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// TOM</span></span><br></pre></td></tr></table></figure><blockquote><p>请尽量同时设置get、set。如果仅仅只设置了get，那么我们将无法设置该属性值。如果仅仅只设置了set，我们也无法读取该属性的值。</p></blockquote><p><code>Object.defineProperty</code>只能设置一个属性的属性特性。当我们想要同时设置多个属性的特性时，需要使用我们之前提到过的<code>Object.defineProperties</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(person, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">'Jake'</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.value || <span class="number">22</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>: function(value) &#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">person.name   <span class="comment">// Jake</span></span><br><span class="line">person.age    <span class="comment">// 22</span></span><br></pre></td></tr></table></figure><h6 id="读取属性的特性值"><a href="#读取属性的特性值" class="headerlink" title="读取属性的特性值"></a>读取属性的特性值</h6><p>我们可以使用<code>Object.getOwnPropertyDescriptor</code>方法读取某一个属性的特性值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    value: <span class="string">'alex'</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descripter = <span class="built_in">Object</span>.getOwnPropertyDescriptor(person, <span class="string">'name'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(descripter);  <span class="comment">// 返回结果如下</span></span><br><span class="line"></span><br><span class="line">descripter = &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'alex'</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h5><p> 关于面向对象的基础知识大概就是这些了。我从最简单的创建一个对象开始，解释了为什么我们需要构造函数与原型，理解了这其中的细节，有助于我们在实际开发中灵活的组织自己的对象。因为我们并不是所有的场景都会使用构造函数或者原型来创建对象，也许我们需要的对象并不会声明多个实例，或者不用区分对象的类型，那么我们就可以选择更简单的方式。</p><p>我们还需要关注构造函数与原型的各自特性，有助于我们在创建对象时准确的判断我们的属性与方法到底是放在构造函数中还是放在原型中。如果没有理解清楚，这会给我们在实际开发中造成非常大的困扰。</p><p>最后接下来的几篇文章，我会挑几个面向对象的例子，继续帮助大家掌握面向对象的实际运用。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果要我总结一下学习前端以来我遇到了哪些瓶颈，那么面向对象一定是第一个毫不犹豫想到的。尽管我现在对于面向对象有了一些的了解，但是当初的那种似懂非懂的痛苦，依然历历在目。&lt;/p&gt;
&lt;p&gt;为了帮助大家能够更加直观的学习和了解面向对象，我会用尽量简单易懂的描述来展示面向对象的相关
      
    
    </summary>
    
      <category term="面向对象" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/categories/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    
      <category term="面向对象" scheme="https://zombrbrand.github.io/ZombieBrand.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
</feed>
